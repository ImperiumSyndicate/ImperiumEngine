{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stemmer","stopWordFilter","trimmer"]},"docs":[{"location":"reference/imperiumengine/","title":"Index of Documentation","text":""},{"location":"reference/imperiumengine/analyzer/Analyzer/","title":"Class <code>Analyzer</code>","text":"<p>Here's the reference information for the <code>Analyzer</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>Analyzer</code> class directly from <code>imperiumengine.analyzer</code>:</p>"},{"location":"reference/imperiumengine/analyzer/Analyzer/#usage","title":"Usage","text":"<pre><code>from imperiumengine.analyzer import Analyzer\n</code></pre> <p>Analisa os dados coletados para gerar um score e sinal de negocia\u00e7\u00e3o. As depend\u00eancias (coletores) s\u00e3o injetadas via construtor.</p> Source code in <code>src/imperiumengine/analyzer.py</code> <pre><code>def __init__(self, technical, sentiment, news, onchain, social, weights=None):\n    self.technical = technical\n    self.sentiment = sentiment\n    self.news = news\n    self.onchain = onchain\n    self.social = social\n    self.weights = weights or {\n        \"technical\": 35,\n        \"sentiment\": 25,\n        \"news\": 22.5,\n        \"onchain\": 17.5,\n    }\n</code></pre>"},{"location":"reference/imperiumengine/analyzer/Analyzer/#imperiumengine.analyzer.Analyzer-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/analyzer/Analyzer/#imperiumengine.analyzer.Analyzer.technical","title":"imperiumengine.analyzer.Analyzer.technical  <code>instance-attribute</code>","text":"<pre><code>technical = technical\n</code></pre>"},{"location":"reference/imperiumengine/analyzer/Analyzer/#imperiumengine.analyzer.Analyzer.sentiment","title":"imperiumengine.analyzer.Analyzer.sentiment  <code>instance-attribute</code>","text":"<pre><code>sentiment = sentiment\n</code></pre>"},{"location":"reference/imperiumengine/analyzer/Analyzer/#imperiumengine.analyzer.Analyzer.news","title":"imperiumengine.analyzer.Analyzer.news  <code>instance-attribute</code>","text":"<pre><code>news = news\n</code></pre>"},{"location":"reference/imperiumengine/analyzer/Analyzer/#imperiumengine.analyzer.Analyzer.onchain","title":"imperiumengine.analyzer.Analyzer.onchain  <code>instance-attribute</code>","text":"<pre><code>onchain = onchain\n</code></pre>"},{"location":"reference/imperiumengine/analyzer/Analyzer/#imperiumengine.analyzer.Analyzer.social","title":"imperiumengine.analyzer.Analyzer.social  <code>instance-attribute</code>","text":"<pre><code>social = social\n</code></pre>"},{"location":"reference/imperiumengine/analyzer/Analyzer/#imperiumengine.analyzer.Analyzer.weights","title":"imperiumengine.analyzer.Analyzer.weights  <code>instance-attribute</code>","text":"<pre><code>weights = weights or {'technical': 35, 'sentiment': 25, 'news': 22.5, 'onchain': 17.5}\n</code></pre>"},{"location":"reference/imperiumengine/analyzer/Analyzer/#imperiumengine.analyzer.Analyzer-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/analyzer/Analyzer/#imperiumengine.analyzer.Analyzer.calculate_technical_score","title":"imperiumengine.analyzer.Analyzer.calculate_technical_score","text":"<pre><code>calculate_technical_score()\n</code></pre> Source code in <code>src/imperiumengine/analyzer.py</code> <pre><code>def calculate_technical_score(self):\n    try:\n        data = self.technical.data\n        score = data.get(\"market_value\", 35000) / 1000  # exemplo de c\u00e1lculo\n        logger.info(\"Score T\u00e9cnico calculado: %s\", score)\n        return score\n    except Exception as e:\n        logger.error(\"Erro no c\u00e1lculo do score t\u00e9cnico: %s\", e)\n        return 70\n</code></pre>"},{"location":"reference/imperiumengine/analyzer/Analyzer/#imperiumengine.analyzer.Analyzer.calculate_sentiment_score_numeric","title":"imperiumengine.analyzer.Analyzer.calculate_sentiment_score_numeric","text":"<pre><code>calculate_sentiment_score_numeric()\n</code></pre> Source code in <code>src/imperiumengine/analyzer.py</code> <pre><code>def calculate_sentiment_score_numeric(self):\n    try:\n        data = self.sentiment.data\n        sentiment_text = data.get(\"social_text\", \"NEUTRO\")\n        mapping = {\"NEGATIVO\": 40, \"NEUTRO\": 70, \"POSITIVO\": 90}\n        numeric_value = mapping.get(sentiment_text, 70)\n        logger.info(\"Score de Sentimento num\u00e9rico: %s\", numeric_value)\n        return numeric_value\n    except Exception as e:\n        logger.error(\"Erro no c\u00e1lculo do score de sentimento: %s\", e)\n        return 70\n</code></pre>"},{"location":"reference/imperiumengine/analyzer/Analyzer/#imperiumengine.analyzer.Analyzer.calculate_news_score","title":"imperiumengine.analyzer.Analyzer.calculate_news_score","text":"<pre><code>calculate_news_score()\n</code></pre> Source code in <code>src/imperiumengine/analyzer.py</code> <pre><code>def calculate_news_score(self):\n    try:\n        data = self.news.data\n        score = data.get(\"impact\", 50)\n        logger.info(\"Score de Not\u00edcias calculado: %s\", score)\n        return score\n    except Exception as e:\n        logger.error(\"Erro no c\u00e1lculo do score de not\u00edcias: %s\", e)\n        return 50\n</code></pre>"},{"location":"reference/imperiumengine/analyzer/Analyzer/#imperiumengine.analyzer.Analyzer.calculate_onchain_score","title":"imperiumengine.analyzer.Analyzer.calculate_onchain_score","text":"<pre><code>calculate_onchain_score()\n</code></pre> Source code in <code>src/imperiumengine/analyzer.py</code> <pre><code>def calculate_onchain_score(self):\n    try:\n        data = self.onchain.data\n        score = data.get(\"gas_fees\", 50)\n        logger.info(\"Score Onchain calculado: %s\", score)\n        return score\n    except Exception as e:\n        logger.error(\"Erro no c\u00e1lculo do score onchain: %s\", e)\n        return 70\n</code></pre>"},{"location":"reference/imperiumengine/analyzer/Analyzer/#imperiumengine.analyzer.Analyzer.calculate_total_score","title":"imperiumengine.analyzer.Analyzer.calculate_total_score","text":"<pre><code>calculate_total_score()\n</code></pre> Source code in <code>src/imperiumengine/analyzer.py</code> <pre><code>def calculate_total_score(self):\n    try:\n        t = self.calculate_technical_score()\n        s = self.calculate_sentiment_score_numeric()\n        n = self.calculate_news_score()\n        o = self.calculate_onchain_score()\n        total_weight = sum(self.weights.values())\n        weighted_sum = (\n            t * self.weights[\"technical\"]\n            + s * self.weights[\"sentiment\"]\n            + n * self.weights[\"news\"]\n            + o * self.weights[\"onchain\"]\n        )\n        total_score = weighted_sum / total_weight\n        logger.info(\"Score Total calculado: %s\", total_score)\n        return total_score\n    except Exception as e:\n        logger.error(\"Erro no c\u00e1lculo do score total: %s\", e)\n        return 70\n</code></pre>"},{"location":"reference/imperiumengine/analyzer/Analyzer/#imperiumengine.analyzer.Analyzer.generate_signal","title":"imperiumengine.analyzer.Analyzer.generate_signal","text":"<pre><code>generate_signal(threshold=75)\n</code></pre> Source code in <code>src/imperiumengine/analyzer.py</code> <pre><code>def generate_signal(self, threshold=75):\n    try:\n        score = self.calculate_total_score()\n        signal = \"BUY\" if score &gt;= threshold else \"SELL\"\n        logger.info(\"Sinal Gerado: %s\", signal)\n        return signal\n    except Exception as e:\n        logger.error(\"Erro na gera\u00e7\u00e3o do sinal: %s\", e)\n        return \"HOLD\"\n</code></pre>"},{"location":"reference/imperiumengine/collector/news_base/NewsCollectorBase/","title":"Class <code>NewsCollectorBase</code>","text":"<p>Here's the reference information for the <code>NewsCollectorBase</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>NewsCollectorBase</code> class directly from <code>imperiumengine.collector.news_base</code>:</p>"},{"location":"reference/imperiumengine/collector/news_base/NewsCollectorBase/#usage","title":"Usage","text":"<pre><code>from imperiumengine.collector.news_base import NewsCollectorBase\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Template para m\u00f3dulos de coleta de not\u00edcias.</p> Source code in <code>src/imperiumengine/collector/news_base.py</code> <pre><code>def __init__(self):\n    self.data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collector/news_base/NewsCollectorBase/#imperiumengine.collector.news_base.NewsCollectorBase-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/collector/news_base/NewsCollectorBase/#imperiumengine.collector.news_base.NewsCollectorBase.data","title":"imperiumengine.collector.news_base.NewsCollectorBase.data  <code>instance-attribute</code>","text":"<pre><code>data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collector/news_base/NewsCollectorBase/#imperiumengine.collector.news_base.NewsCollectorBase-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/collector/news_base/NewsCollectorBase/#imperiumengine.collector.news_base.NewsCollectorBase.fetch_data","title":"imperiumengine.collector.news_base.NewsCollectorBase.fetch_data  <code>abstractmethod</code>","text":"<pre><code>fetch_data()\n</code></pre> <p>M\u00e9todo abstrato para coletar dados de not\u00edcias.</p> Source code in <code>src/imperiumengine/collector/news_base.py</code> <pre><code>@abc.abstractmethod\ndef fetch_data(self):\n    \"\"\"\n    M\u00e9todo abstrato para coletar dados de not\u00edcias.\n    \"\"\"\n</code></pre>"},{"location":"reference/imperiumengine/collector/onchain_base/OnchainCollectorBase/","title":"Class <code>OnchainCollectorBase</code>","text":"<p>Here's the reference information for the <code>OnchainCollectorBase</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>OnchainCollectorBase</code> class directly from <code>imperiumengine.collector.onchain_base</code>:</p>"},{"location":"reference/imperiumengine/collector/onchain_base/OnchainCollectorBase/#usage","title":"Usage","text":"<pre><code>from imperiumengine.collector.onchain_base import OnchainCollectorBase\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Template para m\u00f3dulos de coleta de dados onchain.</p> Source code in <code>src/imperiumengine/collector/onchain_base.py</code> <pre><code>def __init__(self):\n    self.data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collector/onchain_base/OnchainCollectorBase/#imperiumengine.collector.onchain_base.OnchainCollectorBase-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/collector/onchain_base/OnchainCollectorBase/#imperiumengine.collector.onchain_base.OnchainCollectorBase.data","title":"imperiumengine.collector.onchain_base.OnchainCollectorBase.data  <code>instance-attribute</code>","text":"<pre><code>data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collector/onchain_base/OnchainCollectorBase/#imperiumengine.collector.onchain_base.OnchainCollectorBase-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/collector/onchain_base/OnchainCollectorBase/#imperiumengine.collector.onchain_base.OnchainCollectorBase.fetch_data","title":"imperiumengine.collector.onchain_base.OnchainCollectorBase.fetch_data  <code>abstractmethod</code>","text":"<pre><code>fetch_data()\n</code></pre> <p>M\u00e9todo abstrato para coletar dados onchain.</p> Source code in <code>src/imperiumengine/collector/onchain_base.py</code> <pre><code>@abc.abstractmethod\ndef fetch_data(self):\n    \"\"\"\n    M\u00e9todo abstrato para coletar dados onchain.\n    \"\"\"\n</code></pre>"},{"location":"reference/imperiumengine/collector/sentiment_base/SentimentCollectorBase/","title":"Class <code>SentimentCollectorBase</code>","text":"<p>Here's the reference information for the <code>SentimentCollectorBase</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>SentimentCollectorBase</code> class directly from <code>imperiumengine.collector.sentiment_base</code>:</p>"},{"location":"reference/imperiumengine/collector/sentiment_base/SentimentCollectorBase/#usage","title":"Usage","text":"<pre><code>from imperiumengine.collector.sentiment_base import SentimentCollectorBase\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Template para m\u00f3dulos de coleta de dados de sentimento.</p> Source code in <code>src/imperiumengine/collector/sentiment_base.py</code> <pre><code>def __init__(self):\n    self.data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collector/sentiment_base/SentimentCollectorBase/#imperiumengine.collector.sentiment_base.SentimentCollectorBase-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/collector/sentiment_base/SentimentCollectorBase/#imperiumengine.collector.sentiment_base.SentimentCollectorBase.data","title":"imperiumengine.collector.sentiment_base.SentimentCollectorBase.data  <code>instance-attribute</code>","text":"<pre><code>data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collector/sentiment_base/SentimentCollectorBase/#imperiumengine.collector.sentiment_base.SentimentCollectorBase-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/collector/sentiment_base/SentimentCollectorBase/#imperiumengine.collector.sentiment_base.SentimentCollectorBase.fetch_data","title":"imperiumengine.collector.sentiment_base.SentimentCollectorBase.fetch_data  <code>abstractmethod</code>","text":"<pre><code>fetch_data()\n</code></pre> <p>M\u00e9todo abstrato para coletar dados de sentimento.</p> Source code in <code>src/imperiumengine/collector/sentiment_base.py</code> <pre><code>@abc.abstractmethod\ndef fetch_data(self):\n    \"\"\"\n    M\u00e9todo abstrato para coletar dados de sentimento.\n    \"\"\"\n</code></pre>"},{"location":"reference/imperiumengine/collector/social_base/SocialCollectorBase/","title":"Class <code>SocialCollectorBase</code>","text":"<p>Here's the reference information for the <code>SocialCollectorBase</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>SocialCollectorBase</code> class directly from <code>imperiumengine.collector.social_base</code>:</p>"},{"location":"reference/imperiumengine/collector/social_base/SocialCollectorBase/#usage","title":"Usage","text":"<pre><code>from imperiumengine.collector.social_base import SocialCollectorBase\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Template para m\u00f3dulos de coleta de dados de redes sociais.</p> Source code in <code>src/imperiumengine/collector/social_base.py</code> <pre><code>def __init__(self):\n    self.data = {\"tweets\": [], \"news_headlines\": []}\n</code></pre>"},{"location":"reference/imperiumengine/collector/social_base/SocialCollectorBase/#imperiumengine.collector.social_base.SocialCollectorBase-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/collector/social_base/SocialCollectorBase/#imperiumengine.collector.social_base.SocialCollectorBase.data","title":"imperiumengine.collector.social_base.SocialCollectorBase.data  <code>instance-attribute</code>","text":"<pre><code>data = {'tweets': [], 'news_headlines': []}\n</code></pre>"},{"location":"reference/imperiumengine/collector/social_base/SocialCollectorBase/#imperiumengine.collector.social_base.SocialCollectorBase-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/collector/social_base/SocialCollectorBase/#imperiumengine.collector.social_base.SocialCollectorBase.fetch_data","title":"imperiumengine.collector.social_base.SocialCollectorBase.fetch_data  <code>abstractmethod</code>","text":"<pre><code>fetch_data()\n</code></pre> <p>M\u00e9todo abstrato para coletar dados de redes sociais.</p> Source code in <code>src/imperiumengine/collector/social_base.py</code> <pre><code>@abc.abstractmethod\ndef fetch_data(self):\n    \"\"\"\n    M\u00e9todo abstrato para coletar dados de redes sociais.\n    \"\"\"\n</code></pre>"},{"location":"reference/imperiumengine/collector/technical_base/TechnicalCollectorBase/","title":"Class <code>TechnicalCollectorBase</code>","text":"<p>Here's the reference information for the <code>TechnicalCollectorBase</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>TechnicalCollectorBase</code> class directly from <code>imperiumengine.collector.technical_base</code>:</p>"},{"location":"reference/imperiumengine/collector/technical_base/TechnicalCollectorBase/#usage","title":"Usage","text":"<pre><code>from imperiumengine.collector.technical_base import TechnicalCollectorBase\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Template para m\u00f3dulos de coleta de dados t\u00e9cnicos.</p> Source code in <code>src/imperiumengine/collector/technical_base.py</code> <pre><code>def __init__(self):\n    self.data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collector/technical_base/TechnicalCollectorBase/#imperiumengine.collector.technical_base.TechnicalCollectorBase-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/collector/technical_base/TechnicalCollectorBase/#imperiumengine.collector.technical_base.TechnicalCollectorBase.data","title":"imperiumengine.collector.technical_base.TechnicalCollectorBase.data  <code>instance-attribute</code>","text":"<pre><code>data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collector/technical_base/TechnicalCollectorBase/#imperiumengine.collector.technical_base.TechnicalCollectorBase-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/collector/technical_base/TechnicalCollectorBase/#imperiumengine.collector.technical_base.TechnicalCollectorBase.fetch_data","title":"imperiumengine.collector.technical_base.TechnicalCollectorBase.fetch_data  <code>abstractmethod</code>","text":"<pre><code>fetch_data()\n</code></pre> <p>M\u00e9todo abstrato para coletar dados t\u00e9cnicos.</p> Source code in <code>src/imperiumengine/collector/technical_base.py</code> <pre><code>@abc.abstractmethod\ndef fetch_data(self):\n    \"\"\"\n    M\u00e9todo abstrato para coletar dados t\u00e9cnicos.\n    \"\"\"\n</code></pre>"},{"location":"reference/imperiumengine/collectors_impl/my_news/MyNewsCollector/","title":"Class <code>MyNewsCollector</code>","text":"<p>Here's the reference information for the <code>MyNewsCollector</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>MyNewsCollector</code> class directly from <code>imperiumengine.collectors_impl.my_news</code>:</p>"},{"location":"reference/imperiumengine/collectors_impl/my_news/MyNewsCollector/#usage","title":"Usage","text":"<pre><code>from imperiumengine.collectors_impl.my_news import MyNewsCollector\n</code></pre> <p>               Bases: <code>NewsCollectorBase</code></p> Source code in <code>src/imperiumengine/collector/news_base.py</code> <pre><code>def __init__(self):\n    self.data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collectors_impl/my_news/MyNewsCollector/#imperiumengine.collectors_impl.my_news.MyNewsCollector-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/collectors_impl/my_news/MyNewsCollector/#imperiumengine.collectors_impl.my_news.MyNewsCollector.data","title":"imperiumengine.collectors_impl.my_news.MyNewsCollector.data  <code>instance-attribute</code>","text":"<pre><code>data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collectors_impl/my_news/MyNewsCollector/#imperiumengine.collectors_impl.my_news.MyNewsCollector-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/collectors_impl/my_news/MyNewsCollector/#imperiumengine.collectors_impl.my_news.MyNewsCollector.fetch_data","title":"imperiumengine.collectors_impl.my_news.MyNewsCollector.fetch_data","text":"<pre><code>fetch_data()\n</code></pre> Source code in <code>src/imperiumengine/collectors_impl/my_news.py</code> <pre><code>def fetch_data(self):\n    try:\n        self.data = {\n            \"latest_headline\": \"O governo dos EUA anunciou novas pol\u00edticas de regula\u00e7\u00e3o para criptomoedas.\",\n            \"source\": random.choice([\"CoinDesk\", \"CoinTelegraph\", \"Reuters\", \"Bloomberg\"]),\n            \"impact\": random.randint(1, 100),\n        }\n        logger.info(\"Dados de not\u00edcias coletados: %s\", self.data)\n    except Exception as e:\n        logger.error(\"Erro ao coletar dados de not\u00edcias: %s\", e)\n</code></pre>"},{"location":"reference/imperiumengine/collectors_impl/my_onchain/MyOnchainCollector/","title":"Class <code>MyOnchainCollector</code>","text":"<p>Here's the reference information for the <code>MyOnchainCollector</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>MyOnchainCollector</code> class directly from <code>imperiumengine.collectors_impl.my_onchain</code>:</p>"},{"location":"reference/imperiumengine/collectors_impl/my_onchain/MyOnchainCollector/#usage","title":"Usage","text":"<pre><code>from imperiumengine.collectors_impl.my_onchain import MyOnchainCollector\n</code></pre> <p>               Bases: <code>OnchainCollectorBase</code></p> Source code in <code>src/imperiumengine/collector/onchain_base.py</code> <pre><code>def __init__(self):\n    self.data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collectors_impl/my_onchain/MyOnchainCollector/#imperiumengine.collectors_impl.my_onchain.MyOnchainCollector-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/collectors_impl/my_onchain/MyOnchainCollector/#imperiumengine.collectors_impl.my_onchain.MyOnchainCollector.data","title":"imperiumengine.collectors_impl.my_onchain.MyOnchainCollector.data  <code>instance-attribute</code>","text":"<pre><code>data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collectors_impl/my_onchain/MyOnchainCollector/#imperiumengine.collectors_impl.my_onchain.MyOnchainCollector-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/collectors_impl/my_onchain/MyOnchainCollector/#imperiumengine.collectors_impl.my_onchain.MyOnchainCollector.fetch_data","title":"imperiumengine.collectors_impl.my_onchain.MyOnchainCollector.fetch_data","text":"<pre><code>fetch_data()\n</code></pre> Source code in <code>src/imperiumengine/collectors_impl/my_onchain.py</code> <pre><code>def fetch_data(self):\n    try:\n        self.data = {\n            \"whale_movements\": random.randint(0, 10),\n            \"addresses_active\": random.randint(1000, 5000),\n            \"new_wallets\": random.randint(10, 100),\n            \"active_addresses_1btc\": random.randint(100, 500),\n            \"gas_fees\": random.uniform(20, 100),\n        }\n        logger.info(\"Dados onchain coletados: %s\", self.data)\n    except Exception as e:\n        logger.error(\"Erro ao coletar dados onchain: %s\", e)\n</code></pre>"},{"location":"reference/imperiumengine/collectors_impl/my_sentiment/MySentimentCollector/","title":"Class <code>MySentimentCollector</code>","text":"<p>Here's the reference information for the <code>MySentimentCollector</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>MySentimentCollector</code> class directly from <code>imperiumengine.collectors_impl.my_sentiment</code>:</p>"},{"location":"reference/imperiumengine/collectors_impl/my_sentiment/MySentimentCollector/#usage","title":"Usage","text":"<pre><code>from imperiumengine.collectors_impl.my_sentiment import MySentimentCollector\n</code></pre> <p>               Bases: <code>SentimentCollectorBase</code></p> Source code in <code>src/imperiumengine/collector/sentiment_base.py</code> <pre><code>def __init__(self):\n    self.data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collectors_impl/my_sentiment/MySentimentCollector/#imperiumengine.collectors_impl.my_sentiment.MySentimentCollector-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/collectors_impl/my_sentiment/MySentimentCollector/#imperiumengine.collectors_impl.my_sentiment.MySentimentCollector.data","title":"imperiumengine.collectors_impl.my_sentiment.MySentimentCollector.data  <code>instance-attribute</code>","text":"<pre><code>data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collectors_impl/my_sentiment/MySentimentCollector/#imperiumengine.collectors_impl.my_sentiment.MySentimentCollector-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/collectors_impl/my_sentiment/MySentimentCollector/#imperiumengine.collectors_impl.my_sentiment.MySentimentCollector.fetch_data","title":"imperiumengine.collectors_impl.my_sentiment.MySentimentCollector.fetch_data","text":"<pre><code>fetch_data()\n</code></pre> Source code in <code>src/imperiumengine/collectors_impl/my_sentiment.py</code> <pre><code>def fetch_data(self):\n    try:\n        self.data = {\n            \"twitter_mentions\": random.randint(100, 1000),\n            \"reddit_mentions\": random.randint(50, 500),\n            \"fear_and_greed\": random.choice([\"Medo Extremo\", \"Medo\", \"Neutral\", \"Gan\u00e2ncia\"]),\n            \"google_trends\": random.randint(1, 100),\n            \"social_text\": \"NEUTRO\",\n        }\n        logger.info(\"Dados de sentimento coletados: %s\", self.data)\n    except Exception as e:\n        logger.error(\"Erro ao coletar dados de sentimento: %s\", e)\n</code></pre>"},{"location":"reference/imperiumengine/collectors_impl/my_social/MySocialCollector/","title":"Class <code>MySocialCollector</code>","text":"<p>Here's the reference information for the <code>MySocialCollector</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>MySocialCollector</code> class directly from <code>imperiumengine.collectors_impl.my_social</code>:</p>"},{"location":"reference/imperiumengine/collectors_impl/my_social/MySocialCollector/#usage","title":"Usage","text":"<pre><code>from imperiumengine.collectors_impl.my_social import MySocialCollector\n</code></pre> <p>               Bases: <code>SocialCollectorBase</code></p> Source code in <code>src/imperiumengine/collector/social_base.py</code> <pre><code>def __init__(self):\n    self.data = {\"tweets\": [], \"news_headlines\": []}\n</code></pre>"},{"location":"reference/imperiumengine/collectors_impl/my_social/MySocialCollector/#imperiumengine.collectors_impl.my_social.MySocialCollector-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/collectors_impl/my_social/MySocialCollector/#imperiumengine.collectors_impl.my_social.MySocialCollector.data","title":"imperiumengine.collectors_impl.my_social.MySocialCollector.data  <code>instance-attribute</code>","text":"<pre><code>data = {'tweets': [], 'news_headlines': []}\n</code></pre>"},{"location":"reference/imperiumengine/collectors_impl/my_social/MySocialCollector/#imperiumengine.collectors_impl.my_social.MySocialCollector-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/collectors_impl/my_social/MySocialCollector/#imperiumengine.collectors_impl.my_social.MySocialCollector.fetch_data","title":"imperiumengine.collectors_impl.my_social.MySocialCollector.fetch_data","text":"<pre><code>fetch_data()\n</code></pre> Source code in <code>src/imperiumengine/collectors_impl/my_social.py</code> <pre><code>def fetch_data(self):\n    try:\n        self.data[\"tweets\"] = self._fetch_tweets()\n        self.data[\"news_headlines\"] = self._fetch_news_headlines()\n        logger.info(\"Dados de social coletados: %s\", self.data)\n    except Exception as e:\n        logger.error(\"Erro ao coletar dados de social: %s\", e)\n</code></pre>"},{"location":"reference/imperiumengine/collectors_impl/my_technical/MyTechnicalCollector/","title":"Class <code>MyTechnicalCollector</code>","text":"<p>Here's the reference information for the <code>MyTechnicalCollector</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>MyTechnicalCollector</code> class directly from <code>imperiumengine.collectors_impl.my_technical</code>:</p>"},{"location":"reference/imperiumengine/collectors_impl/my_technical/MyTechnicalCollector/#usage","title":"Usage","text":"<pre><code>from imperiumengine.collectors_impl.my_technical import MyTechnicalCollector\n</code></pre> <p>               Bases: <code>TechnicalCollectorBase</code></p> Source code in <code>src/imperiumengine/collector/technical_base.py</code> <pre><code>def __init__(self):\n    self.data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collectors_impl/my_technical/MyTechnicalCollector/#imperiumengine.collectors_impl.my_technical.MyTechnicalCollector-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/collectors_impl/my_technical/MyTechnicalCollector/#imperiumengine.collectors_impl.my_technical.MyTechnicalCollector.data","title":"imperiumengine.collectors_impl.my_technical.MyTechnicalCollector.data  <code>instance-attribute</code>","text":"<pre><code>data = {}\n</code></pre>"},{"location":"reference/imperiumengine/collectors_impl/my_technical/MyTechnicalCollector/#imperiumengine.collectors_impl.my_technical.MyTechnicalCollector-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/collectors_impl/my_technical/MyTechnicalCollector/#imperiumengine.collectors_impl.my_technical.MyTechnicalCollector.fetch_data","title":"imperiumengine.collectors_impl.my_technical.MyTechnicalCollector.fetch_data","text":"<pre><code>fetch_data()\n</code></pre> Source code in <code>src/imperiumengine/collectors_impl/my_technical.py</code> <pre><code>def fetch_data(self):\n    try:\n        self.data = {\n            \"market_value\": random.uniform(30000, 40000),\n            \"min_day\": random.uniform(28000, 30000),\n            \"volume\": random.uniform(1000, 5000),\n            \"dominance\": random.uniform(40, 60),\n            \"RSI\": random.uniform(30, 70),\n            \"ATR\": random.uniform(100, 300),\n            \"EMA\": random.uniform(30000, 40000),\n            \"Bollinger\": (random.uniform(29000, 31000), random.uniform(39000, 41000)),\n            \"MACD\": random.uniform(-50, 50),\n            \"VWAP\": random.uniform(30000, 40000),\n        }\n        logger.info(\"Dados t\u00e9cnicos coletados: %s\", self.data)\n    except Exception as e:\n        logger.error(\"Erro ao coletar dados t\u00e9cnicos: %s\", e)\n</code></pre>"},{"location":"reference/imperiumengine/config/imperiumengine_settings/ImperiumengineConfig/","title":"Class <code>ImperiumengineConfig</code>","text":"<p>Here's the reference information for the <code>ImperiumengineConfig</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>ImperiumengineConfig</code> class directly from <code>imperiumengine.config.imperiumengine_settings</code>:</p>"},{"location":"reference/imperiumengine/config/imperiumengine_settings/ImperiumengineConfig/#usage","title":"Usage","text":"<pre><code>from imperiumengine.config.imperiumengine_settings import ImperiumengineConfig\n</code></pre> <p>Gerencia o carregamento e acesso \u00e0s configura\u00e7\u00f5es de uma aplica\u00e7\u00e3o a partir de um arquivo TOML.</p> <p>Esta classe implementa o padr\u00e3o singleton para que apenas uma inst\u00e2ncia com as configura\u00e7\u00f5es seja utilizada durante a execu\u00e7\u00e3o da aplica\u00e7\u00e3o. Ela permite a busca por arquivos de configura\u00e7\u00e3o em caminhos padr\u00e3o e oferece m\u00e9todos para carregar, recarregar e acessar as configura\u00e7\u00f5es de forma estruturada.</p> Atributos <p>_instance : Optional[ImperiumengineConfig]     Inst\u00e2ncia \u00fanica da classe. Utilizada para implementar o padr\u00e3o singleton. config_file : Optional[Path]     Caminho do arquivo de configura\u00e7\u00e3o atualmente utilizado. config_data : dict[str, Any]     Dicion\u00e1rio contendo as configura\u00e7\u00f5es carregadas do arquivo TOML.</p> Exemplos <p>config = ImperiumengineConfig() valor = config.get(\"sentry.dsn\", default=\"valor_default\") print(valor) valor_default</p>"},{"location":"reference/imperiumengine/config/imperiumengine_settings/ImperiumengineConfig/#imperiumengine.config.imperiumengine_settings.ImperiumengineConfig-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/config/imperiumengine_settings/ImperiumengineConfig/#imperiumengine.config.imperiumengine_settings.ImperiumengineConfig.initialize_config","title":"imperiumengine.config.imperiumengine_settings.ImperiumengineConfig.initialize_config","text":"<pre><code>initialize_config(config_file=None)\n</code></pre> <p>Inicializa a inst\u00e2ncia carregando o arquivo de configura\u00e7\u00e3o.</p> <p>Se <code>config_file</code> for fornecido, converte-o para um objeto <code>Path</code> e expande o usu\u00e1rio. Caso contr\u00e1rio, procura um arquivo de configura\u00e7\u00e3o nos caminhos padr\u00e3o definidos em DEFAULT_CONFIG_PATHS. Se nenhum arquivo for encontrado, a configura\u00e7\u00e3o \u00e9 definida como um dicion\u00e1rio vazio.</p> PARAMETER DESCRIPTION <p>Caminho para o arquivo de configura\u00e7\u00e3o. O padr\u00e3o \u00e9 None.</p> <p> TYPE: <code>str or None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>None</code> Exemplos <p>config = ImperiumengineConfig(\"config.toml\")</p> Source code in <code>src/imperiumengine/config/imperiumengine_settings.py</code> <pre><code>def initialize_config(self, config_file: str | None = None) -&gt; None:\n    \"\"\"\n    Inicializa a inst\u00e2ncia carregando o arquivo de configura\u00e7\u00e3o.\n\n    Se `config_file` for fornecido, converte-o para um objeto `Path` e expande o usu\u00e1rio.\n    Caso contr\u00e1rio, procura um arquivo de configura\u00e7\u00e3o nos caminhos padr\u00e3o definidos em\n    DEFAULT_CONFIG_PATHS. Se nenhum arquivo for encontrado, a configura\u00e7\u00e3o \u00e9 definida como\n    um dicion\u00e1rio vazio.\n\n    Parameters\n    ----------\n    config_file : str or None, optional\n        Caminho para o arquivo de configura\u00e7\u00e3o. O padr\u00e3o \u00e9 None.\n\n    Returns\n    -------\n    None\n\n    Exemplos\n    --------\n    &gt;&gt;&gt; config = ImperiumengineConfig(\"config.toml\")\n    \"\"\"\n    if config_file:\n        self.config_file = Path(config_file).expanduser()\n    else:\n        try:\n            self.config_file = self._find_default_config()\n        except FileNotFoundError:\n            self.config_file = None\n\n    # Tenta carregar o arquivo se houver; caso contr\u00e1rio, define config_data como {}\n    if self.config_file is not None:\n        try:\n            self.config_data = self._load_config()\n        except (FileNotFoundError, ValueError):\n            self.config_data = {}\n    else:\n        self.config_data = {}\n</code></pre>"},{"location":"reference/imperiumengine/config/imperiumengine_settings/ImperiumengineConfig/#imperiumengine.config.imperiumengine_settings.ImperiumengineConfig.initialize_config(config_file)","title":"<code>config_file</code>","text":""},{"location":"reference/imperiumengine/config/imperiumengine_settings/ImperiumengineConfig/#imperiumengine.config.imperiumengine_settings.ImperiumengineConfig.get","title":"imperiumengine.config.imperiumengine_settings.ImperiumengineConfig.get","text":"<pre><code>get(key, default=None)\n</code></pre> <p>Obt\u00e9m um valor da configura\u00e7\u00e3o com base na chave fornecida.</p> <p>A chave pode ser composta e aninhada, utilizando o ponto como separador. O m\u00e9todo percorre o dicion\u00e1rio de configura\u00e7\u00e3o e retorna o valor associado ou o valor padr\u00e3o se a chave n\u00e3o for encontrada.</p> PARAMETER DESCRIPTION <p>Chave da configura\u00e7\u00e3o (por exemplo, \"sentry.dsn\").</p> <p> TYPE: <code>str</code> </p> <p>Valor a ser retornado se a chave n\u00e3o for encontrada. O padr\u00e3o \u00e9 None.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>Valor associado \u00e0 chave ou o valor padr\u00e3o.</p> Source code in <code>src/imperiumengine/config/imperiumengine_settings.py</code> <pre><code>def get(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"\n    Obt\u00e9m um valor da configura\u00e7\u00e3o com base na chave fornecida.\n\n    A chave pode ser composta e aninhada, utilizando o ponto como separador.\n    O m\u00e9todo percorre o dicion\u00e1rio de configura\u00e7\u00e3o e retorna o valor associado ou\n    o valor padr\u00e3o se a chave n\u00e3o for encontrada.\n\n    Parameters\n    ----------\n    key : str\n        Chave da configura\u00e7\u00e3o (por exemplo, \"sentry.dsn\").\n    default : Any, optional\n        Valor a ser retornado se a chave n\u00e3o for encontrada. O padr\u00e3o \u00e9 None.\n\n    Returns\n    -------\n    Any\n        Valor associado \u00e0 chave ou o valor padr\u00e3o.\n\n\n    \"\"\"\n    keys = key.split(\".\")\n    value = self.config_data\n    for k in keys:\n        if isinstance(value, dict) and k in value:\n            value = value[k]\n        else:\n            return default\n    return value\n</code></pre>"},{"location":"reference/imperiumengine/config/imperiumengine_settings/ImperiumengineConfig/#imperiumengine.config.imperiumengine_settings.ImperiumengineConfig.get(key)","title":"<code>key</code>","text":""},{"location":"reference/imperiumengine/config/imperiumengine_settings/ImperiumengineConfig/#imperiumengine.config.imperiumengine_settings.ImperiumengineConfig.get(default)","title":"<code>default</code>","text":""},{"location":"reference/imperiumengine/config/imperiumengine_settings/ImperiumengineConfig/#imperiumengine.config.imperiumengine_settings.ImperiumengineConfig.reload","title":"imperiumengine.config.imperiumengine_settings.ImperiumengineConfig.reload","text":"<pre><code>reload()\n</code></pre> <p>Recarrega as configura\u00e7\u00f5es a partir do arquivo TOML.</p> <p>Se um arquivo de configura\u00e7\u00e3o estiver definido, tenta recarreg\u00e1-lo e atualizar o dicion\u00e1rio de configura\u00e7\u00f5es. Caso contr\u00e1rio, define as configura\u00e7\u00f5es como um dicion\u00e1rio vazio.</p> RETURNS DESCRIPTION <code>None</code> Exemplos <p>config = ImperiumengineConfig(\"config.toml\") config.reload()</p> Source code in <code>src/imperiumengine/config/imperiumengine_settings.py</code> <pre><code>def reload(self) -&gt; None:\n    \"\"\"\n    Recarrega as configura\u00e7\u00f5es a partir do arquivo TOML.\n\n    Se um arquivo de configura\u00e7\u00e3o estiver definido, tenta recarreg\u00e1-lo e atualizar\n    o dicion\u00e1rio de configura\u00e7\u00f5es. Caso contr\u00e1rio, define as configura\u00e7\u00f5es como um dicion\u00e1rio vazio.\n\n    Returns\n    -------\n    None\n\n    Exemplos\n    --------\n    &gt;&gt;&gt; config = ImperiumengineConfig(\"config.toml\")\n    &gt;&gt;&gt; config.reload()\n    \"\"\"\n    if self.config_file is not None:\n        try:\n            self.config_data = self._load_config()\n        except (FileNotFoundError, ValueError):\n            self.config_data = {}\n    else:\n        self.config_data = {}\n</code></pre>"},{"location":"reference/imperiumengine/config/imperiumengine_settings/ImperiumengineConfig/#imperiumengine.config.imperiumengine_settings.ImperiumengineConfig.set_config_file","title":"imperiumengine.config.imperiumengine_settings.ImperiumengineConfig.set_config_file  <code>classmethod</code>","text":"<pre><code>set_config_file(file_path)\n</code></pre> <p>Define um novo arquivo de configura\u00e7\u00e3o e recarrega os dados.</p> <p>Este m\u00e9todo permite alterar o arquivo de configura\u00e7\u00e3o em tempo de execu\u00e7\u00e3o. Ele valida a exist\u00eancia do arquivo, reseta a inst\u00e2ncia singleton e cria uma nova inst\u00e2ncia com o arquivo especificado.</p> PARAMETER DESCRIPTION <p>Caminho para o novo arquivo de configura\u00e7\u00e3o.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>ImperiumengineConfig</code> <p>Nova inst\u00e2ncia com as configura\u00e7\u00f5es carregadas a partir do arquivo especificado.</p> RAISES DESCRIPTION <code>FileNotFoundError</code> <p>Se o arquivo de configura\u00e7\u00e3o fornecido n\u00e3o for encontrado.</p> Source code in <code>src/imperiumengine/config/imperiumengine_settings.py</code> <pre><code>@classmethod\ndef set_config_file(cls, file_path: str) -&gt; \"ImperiumengineConfig\":\n    \"\"\"\n    Define um novo arquivo de configura\u00e7\u00e3o e recarrega os dados.\n\n    Este m\u00e9todo permite alterar o arquivo de configura\u00e7\u00e3o em tempo de execu\u00e7\u00e3o.\n    Ele valida a exist\u00eancia do arquivo, reseta a inst\u00e2ncia singleton e cria\n    uma nova inst\u00e2ncia com o arquivo especificado.\n\n    Parameters\n    ----------\n    file_path : str\n        Caminho para o novo arquivo de configura\u00e7\u00e3o.\n\n    Returns\n    -------\n    ImperiumengineConfig\n        Nova inst\u00e2ncia com as configura\u00e7\u00f5es carregadas a partir do arquivo especificado.\n\n    Raises\n    ------\n    FileNotFoundError\n        Se o arquivo de configura\u00e7\u00e3o fornecido n\u00e3o for encontrado.\n\n\n    \"\"\"\n    new_path = Path(file_path).expanduser()\n    if not new_path.exists():\n        raise FileNotFoundError(f\"Arquivo de configura\u00e7\u00e3o '{new_path}' n\u00e3o encontrado.\")\n    cls._instance = None  # Reseta a inst\u00e2ncia para carregar nova configura\u00e7\u00e3o\n    return cls(file_path)\n</code></pre>"},{"location":"reference/imperiumengine/config/imperiumengine_settings/ImperiumengineConfig/#imperiumengine.config.imperiumengine_settings.ImperiumengineConfig.set_config_file(file_path)","title":"<code>file_path</code>","text":""},{"location":"reference/imperiumengine/config/logger/ColoredFormatter/","title":"Class <code>ColoredFormatter</code>","text":"<p>Here's the reference information for the <code>ColoredFormatter</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>ColoredFormatter</code> class directly from <code>imperiumengine.config.logger</code>:</p>"},{"location":"reference/imperiumengine/config/logger/ColoredFormatter/#usage","title":"Usage","text":"<pre><code>from imperiumengine.config.logger import ColoredFormatter\n</code></pre> <p>               Bases: <code>Formatter</code></p> <p>Formatter que adiciona cores \u00e0s mensagens de log de acordo com o n\u00edvel, se a op\u00e7\u00e3o <code>use_color</code> estiver ativada.</p> ATTRIBUTE DESCRIPTION <code>LEVEL_COLOR</code> <p>Dicion\u00e1rio que mapeia n\u00edveis de log para os c\u00f3digos de cor ANSI do Colorama.</p> <p> TYPE: <code>dict[int, str]</code> </p> <code>use_color</code> <p>Indica se a formata\u00e7\u00e3o com cores deve ser aplicada.</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>format</code> <p>Formata o registro de log aplicando a cor definida para o n\u00edvel do registro se <code>use_color</code> for True.</p> <p>Inicializa o formatter.</p> PARAMETER DESCRIPTION <p>Formato da mensagem de log.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <p>Formato da data/hora.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <p>Indica se o formatter deve aplicar cores \u00e0 mensagem. O padr\u00e3o \u00e9 True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>src/imperiumengine/config/logger.py</code> <pre><code>def __init__(self, fmt: str = None, datefmt: str = None, use_color: bool = True):\n    \"\"\"\n    Inicializa o formatter.\n\n    Parameters\n    ----------\n    fmt : str, optional\n        Formato da mensagem de log.\n    datefmt : str, optional\n        Formato da data/hora.\n    use_color : bool, optional\n        Indica se o formatter deve aplicar cores \u00e0 mensagem. O padr\u00e3o \u00e9 True.\n    \"\"\"\n    super().__init__(fmt, datefmt)\n    self.use_color = use_color\n</code></pre>"},{"location":"reference/imperiumengine/config/logger/ColoredFormatter/#imperiumengine.config.logger.ColoredFormatter(fmt)","title":"<code>fmt</code>","text":""},{"location":"reference/imperiumengine/config/logger/ColoredFormatter/#imperiumengine.config.logger.ColoredFormatter(datefmt)","title":"<code>datefmt</code>","text":""},{"location":"reference/imperiumengine/config/logger/ColoredFormatter/#imperiumengine.config.logger.ColoredFormatter(use_color)","title":"<code>use_color</code>","text":""},{"location":"reference/imperiumengine/config/logger/ColoredFormatter/#imperiumengine.config.logger.ColoredFormatter-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/config/logger/ColoredFormatter/#imperiumengine.config.logger.ColoredFormatter.LEVEL_COLOR","title":"imperiumengine.config.logger.ColoredFormatter.LEVEL_COLOR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LEVEL_COLOR = {DEBUG: CYAN, INFO: GREEN, WARNING: YELLOW, ERROR: RED, CRITICAL: RED + BRIGHT}\n</code></pre>"},{"location":"reference/imperiumengine/config/logger/ColoredFormatter/#imperiumengine.config.logger.ColoredFormatter.use_color","title":"imperiumengine.config.logger.ColoredFormatter.use_color  <code>instance-attribute</code>","text":"<pre><code>use_color = use_color\n</code></pre>"},{"location":"reference/imperiumengine/config/logger/ColoredFormatter/#imperiumengine.config.logger.ColoredFormatter-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/config/logger/ColoredFormatter/#imperiumengine.config.logger.ColoredFormatter.format","title":"imperiumengine.config.logger.ColoredFormatter.format","text":"<pre><code>format(record)\n</code></pre> <p>Formata o registro de log aplicando a cor correspondente, caso <code>use_color</code> seja True.</p> PARAMETER DESCRIPTION <p>Registro de log contendo as informa\u00e7\u00f5es da mensagem e seu n\u00edvel.</p> <p> TYPE: <code>LogRecord</code> </p> RETURNS DESCRIPTION <code>str</code> <p>Mensagem formatada (colorida se <code>use_color</code> for True, ou bruta caso contr\u00e1rio).</p> Source code in <code>src/imperiumengine/config/logger.py</code> <pre><code>def format(self, record: logging.LogRecord) -&gt; str:\n    \"\"\"\n    Formata o registro de log aplicando a cor correspondente, caso `use_color` seja True.\n\n    Parameters\n    ----------\n    record : logging.LogRecord\n        Registro de log contendo as informa\u00e7\u00f5es da mensagem e seu n\u00edvel.\n\n    Returns\n    -------\n    str\n        Mensagem formatada (colorida se `use_color` for True, ou bruta caso contr\u00e1rio).\n    \"\"\"\n    if self.use_color:\n        color: str = self.LEVEL_COLOR.get(record.levelno, \"\")\n        # Aplica a cor \u00e0 mensagem e reseta o estilo ao final\n        record.msg = f\"{color}{record.msg}{Style.RESET_ALL}\"\n    return super().format(record)\n</code></pre>"},{"location":"reference/imperiumengine/config/logger/ColoredFormatter/#imperiumengine.config.logger.ColoredFormatter.format(record)","title":"<code>record</code>","text":""},{"location":"reference/imperiumengine/config/logger/LogFactory/","title":"Class <code>LogFactory</code>","text":"<p>Here's the reference information for the <code>LogFactory</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>LogFactory</code> class directly from <code>imperiumengine.config.logger</code>:</p>"},{"location":"reference/imperiumengine/config/logger/LogFactory/#usage","title":"Usage","text":"<pre><code>from imperiumengine.config.logger import LogFactory\n</code></pre> <p>F\u00e1brica centralizada para cria\u00e7\u00e3o e configura\u00e7\u00e3o dos loggers.</p> <p>Esta classe gerencia a configura\u00e7\u00e3o global dos logs, integrando:   - Sentry: Monitoramento de erros e performance.   - Graylog: Centraliza\u00e7\u00e3o de logs via UDP.   - Fallback Local: Grava\u00e7\u00e3o de logs em arquivos locais (em diret\u00f3rios tempor\u00e1rios)     caso as integra\u00e7\u00f5es acima n\u00e3o estejam configuradas.</p> <p>A configura\u00e7\u00e3o \u00e9, preferencialmente, obtida a partir de uma inst\u00e2ncia externa da classe <code>ImperiumengineConfig</code>. Se esta n\u00e3o estiver dispon\u00edvel, utiliza-se o fallback local.</p> ATTRIBUTE DESCRIPTION <code>_loggers</code> <p>Dicion\u00e1rio que mapeia nomes de loggers para suas respectivas inst\u00e2ncias.</p> <p> TYPE: <code>dict[str, Logger]</code> </p> <code>_configured</code> <p>Flag que indica se o logger raiz j\u00e1 foi configurado.</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>configure</code> <p>Configura o logger raiz com os handlers e integra\u00e7\u00f5es apropriadas.</p> <code>get_logger</code> <p>Retorna uma inst\u00e2ncia de logger com o nome especificado.</p>"},{"location":"reference/imperiumengine/config/logger/LogFactory/#imperiumengine.config.logger.LogFactory-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/config/logger/LogFactory/#imperiumengine.config.logger.LogFactory.configure","title":"imperiumengine.config.logger.LogFactory.configure  <code>classmethod</code>","text":"<pre><code>configure()\n</code></pre> <p>Configura o logger raiz com handlers e integra\u00e7\u00f5es (Sentry, Graylog ou fallback local).</p> <p>O m\u00e9todo tenta obter uma inst\u00e2ncia de configura\u00e7\u00e3o via <code>ImperiumengineConfig</code>. Se dispon\u00edvel, utiliza as configura\u00e7\u00f5es definidas para Sentry e Graylog. Caso contr\u00e1rio, aplica um fallback que grava os logs em arquivos locais (em diret\u00f3rios tempor\u00e1rios).</p> <p>Adicionalmente, um <code>StreamHandler</code> \u00e9 sempre adicionado para exibir os logs no terminal com formata\u00e7\u00e3o colorida.</p> RETURNS DESCRIPTION <code>None</code> Source code in <code>src/imperiumengine/config/logger.py</code> <pre><code>@classmethod\ndef configure(cls) -&gt; None:\n    \"\"\"\n    Configura o logger raiz com handlers e integra\u00e7\u00f5es (Sentry, Graylog ou fallback local).\n\n    O m\u00e9todo tenta obter uma inst\u00e2ncia de configura\u00e7\u00e3o via `ImperiumengineConfig`.\n    Se dispon\u00edvel, utiliza as configura\u00e7\u00f5es definidas para Sentry e Graylog. Caso contr\u00e1rio,\n    aplica um fallback que grava os logs em arquivos locais (em diret\u00f3rios tempor\u00e1rios).\n\n    Adicionalmente, um `StreamHandler` \u00e9 sempre adicionado para exibir os logs no terminal\n    com formata\u00e7\u00e3o colorida.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    if cls._configured:\n        return\n\n    root_logger: logging.Logger = logging.getLogger()\n    use_sentry: bool = False\n    use_graylog: bool = False\n\n    # Tenta obter a inst\u00e2ncia de configura\u00e7\u00e3o via ImperiumengineConfig\n    try:\n        from imperiumengine.config.imperiumengine_settings import ImperiumengineConfig\n\n        config_instance = ImperiumengineConfig()\n    except Exception as e:\n        config_instance = None\n        root_logger.warning(\"N\u00e3o foi poss\u00edvel obter a inst\u00e2ncia de Config: %s\", e)\n\n    if config_instance is not None:\n        # --- Integra\u00e7\u00e3o com Sentry ---\n        dsn: str = config_instance.get(\"sentry.dsn\", \"\").strip()\n        if dsn:\n            use_sentry = True\n            environment: str = config_instance.get(\"sentry.environment\", \"production\")\n            if HAS_SENTRY:\n                sentry_logging = LoggingIntegration(\n                    level=logging.INFO,  # Captura breadcrumbs a partir do n\u00edvel INFO\n                    event_level=logging.ERROR,  # Erros s\u00e3o enviados como eventos para o Sentry\n                )\n                sentry_sdk.init(\n                    dsn=dsn,\n                    integrations=[sentry_logging],\n                    environment=environment,\n                    traces_sample_rate=1.0,  # Habilita o tracing para monitoramento de performance\n                )\n                root_logger.info(\"Sentry configurado com sucesso (via TOML).\")\n            else:\n                root_logger.warning(\n                    \"Configura\u00e7\u00e3o para Sentry encontrada, mas o pacote sentry-sdk n\u00e3o est\u00e1 instalado.\"\n                )\n        else:\n            root_logger.info(\"Sentry n\u00e3o configurado (via TOML).\")\n\n        # --- Integra\u00e7\u00e3o com Graylog ---\n        host: str = config_instance.get(\"graylog.host\", \"\").strip()\n        if host:\n            use_graylog = True\n            port: int = config_instance.get(\"graylog.port\", 12201)\n            if HAS_PYGELF:\n                graylog_handler = GelfUdpHandler(host=host, port=int(port))\n                graylog_handler.setLevel(logging.DEBUG)\n                # Utiliza um formatter sem cores para Graylog (formata\u00e7\u00e3o bruta)\n                plain_formatter = logging.Formatter(\n                    \"%(asctime)s [%(levelname)s] %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\"\n                )\n                graylog_handler.setFormatter(plain_formatter)\n                root_logger.addHandler(graylog_handler)\n                root_logger.info(\"Graylog configurado com sucesso (via TOML).\")\n            else:\n                root_logger.warning(\n                    \"Configura\u00e7\u00e3o para Graylog encontrada, mas o pacote pygelf n\u00e3o est\u00e1 instalado.\"\n                )\n        else:\n            root_logger.info(\"Graylog n\u00e3o configurado (via TOML).\")\n    else:\n        root_logger.info(\"Inst\u00e2ncia de Config n\u00e3o dispon\u00edvel. Utilizando fallback local.\")\n\n    # --- Fallback Local: grava logs e tracking em arquivos ---\n    if not use_sentry and not use_graylog:\n        project_name: str = \"ImperiumEngine\"\n        tmp_dir: Path = Path(tempfile.gettempdir()) / project_name\n        log_dir: Path = tmp_dir / \"log\"\n        tracking_dir: Path = tmp_dir / \"tracking\"\n        log_dir.mkdir(parents=True, exist_ok=True)\n        tracking_dir.mkdir(parents=True, exist_ok=True)\n        log_file: Path = log_dir / \"app.log\"\n        tracking_file: Path = tracking_dir / \"tracking.log\"\n\n        # Handler para logs gerais com formata\u00e7\u00e3o colorida (exibe no terminal ou arquivo)\n        file_handler = logging.FileHandler(str(log_file))\n        file_formatter = ColoredFormatter(\n            \"%(asctime)s [%(levelname)s] %(message)s\",\n            datefmt=\"%Y-%m-%d %H:%M:%S\",\n            use_color=False,  # Fallback: logs enviados para arquivo sem cores\n        )\n        file_handler.setFormatter(file_formatter)\n        root_logger.addHandler(file_handler)\n\n        # Handler para tracking com formata\u00e7\u00e3o em estilo JSON-like (sem cores)\n        tracking_handler = logging.FileHandler(str(tracking_file))\n        tracking_formatter = logging.Formatter(\n            '{\"time\": \"%(asctime)s\", \"level\": \"%(levelname)s\", \"message\": \"%(message)s\"}',\n            datefmt=\"%Y-%m-%d %H:%M:%S\",\n        )\n        tracking_handler.setFormatter(tracking_formatter)\n        root_logger.addHandler(tracking_handler)\n\n        root_logger.info(\n            \"Fallback local: logs ser\u00e3o gravados em '%s' e tracking em '%s'\",\n            log_dir,\n            tracking_dir,\n        )\n\n    # --- Adiciona um StreamHandler para exibir os logs no terminal com cores ---\n    stream_handler = logging.StreamHandler()\n    stream_handler.setFormatter(\n        ColoredFormatter(\n            \"%(asctime)s [%(levelname)s] %(message)s\",\n            datefmt=\"%Y-%m-%d %H:%M:%S\",\n            use_color=True,\n        )\n    )\n    root_logger.addHandler(stream_handler)\n    root_logger.setLevel(logging.DEBUG)\n    cls._configured = True\n</code></pre>"},{"location":"reference/imperiumengine/config/logger/LogFactory/#imperiumengine.config.logger.LogFactory.get_logger","title":"imperiumengine.config.logger.LogFactory.get_logger  <code>classmethod</code>","text":"<pre><code>get_logger(name)\n</code></pre> <p>Retorna um logger com o nome especificado, garantindo que a configura\u00e7\u00e3o global seja aplicada.</p> <p>Se o logger com o nome fornecido ainda n\u00e3o foi criado, este m\u00e9todo o cria, armazena na f\u00e1brica e retorna a inst\u00e2ncia correspondente.</p> PARAMETER DESCRIPTION <p>Nome do logger a ser obtido.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Logger</code> <p>Inst\u00e2ncia do logger associada ao nome informado.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; logger = LogFactory.get_logger(\"ExampleLogger\")\n&gt;&gt;&gt; isinstance(logger, logging.Logger)\nTrue\n</code></pre> Source code in <code>src/imperiumengine/config/logger.py</code> <pre><code>@classmethod\ndef get_logger(cls, name: str) -&gt; logging.Logger:\n    \"\"\"\n    Retorna um logger com o nome especificado, garantindo que a configura\u00e7\u00e3o global seja aplicada.\n\n    Se o logger com o nome fornecido ainda n\u00e3o foi criado, este m\u00e9todo o cria,\n    armazena na f\u00e1brica e retorna a inst\u00e2ncia correspondente.\n\n    Parameters\n    ----------\n    name : str\n        Nome do logger a ser obtido.\n\n    Returns\n    -------\n    logging.Logger\n        Inst\u00e2ncia do logger associada ao nome informado.\n\n    Examples\n    --------\n    &gt;&gt;&gt; logger = LogFactory.get_logger(\"ExampleLogger\")\n    &gt;&gt;&gt; isinstance(logger, logging.Logger)\n    True\n    \"\"\"\n    if not cls._configured:\n        cls.configure()\n    if name not in cls._loggers:\n        logger = logging.getLogger(name)\n        cls._loggers[name] = logger\n    return cls._loggers[name]\n</code></pre>"},{"location":"reference/imperiumengine/config/logger/LogFactory/#imperiumengine.config.logger.LogFactory.get_logger(name)","title":"<code>name</code>","text":""},{"location":"reference/imperiumengine/dsl/context/Context/","title":"Class <code>Context</code>","text":"<p>Here's the reference information for the <code>Context</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>Context</code> class directly from <code>imperiumengine.dsl.context</code>:</p>"},{"location":"reference/imperiumengine/dsl/context/Context/#usage","title":"Usage","text":"<pre><code>from imperiumengine.dsl.context import Context\n</code></pre> <p>Contexto de execu\u00e7\u00e3o que armazena vari\u00e1veis.</p> <p>Esta classe fornece um cont\u00eainer simples para armazenar e gerenciar vari\u00e1veis durante a execu\u00e7\u00e3o de uma aplica\u00e7\u00e3o ou de uma DSL. O contexto utiliza um dicion\u00e1rio para manter o estado e permite atualiza\u00e7\u00f5es din\u00e2micas dos dados atrav\u00e9s do m\u00e9todo <code>update</code>.</p> ATTRIBUTE DESCRIPTION <code>variables</code> <p>Dicion\u00e1rio que armazena as vari\u00e1veis do contexto.</p> <p> TYPE: <code>dict[str, Any]</code> </p> METHOD DESCRIPTION <code>update</code> <p>Atualiza o dicion\u00e1rio de vari\u00e1veis com os valores fornecidos em <code>data</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ctx = Context()\n&gt;&gt;&gt; ctx.variables\n{}\n&gt;&gt;&gt; ctx.update({\"a\": 1, \"b\": 2})\n&gt;&gt;&gt; ctx.variables\n{'a': 1, 'b': 2}\n</code></pre> <p>Inicializa uma nova inst\u00e2ncia de Context com um dicion\u00e1rio vazio de vari\u00e1veis.</p> Source code in <code>src/imperiumengine/dsl/context.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"\n    Inicializa uma nova inst\u00e2ncia de Context com um dicion\u00e1rio vazio de vari\u00e1veis.\n    \"\"\"\n    self.variables: dict[str, Any] = {}\n</code></pre>"},{"location":"reference/imperiumengine/dsl/context/Context/#imperiumengine.dsl.context.Context-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/dsl/context/Context/#imperiumengine.dsl.context.Context.variables","title":"imperiumengine.dsl.context.Context.variables  <code>instance-attribute</code>","text":"<pre><code>variables = {}\n</code></pre>"},{"location":"reference/imperiumengine/dsl/context/Context/#imperiumengine.dsl.context.Context-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/dsl/context/Context/#imperiumengine.dsl.context.Context.update","title":"imperiumengine.dsl.context.Context.update","text":"<pre><code>update(data)\n</code></pre> <p>Atualiza o contexto com os dados fornecidos.</p> <p>Este m\u00e9todo recebe um dicion\u00e1rio e atualiza o dicion\u00e1rio interno <code>variables</code> com os pares chave-valor presentes em <code>data</code>. Se uma chave j\u00e1 existir, seu valor ser\u00e1 atualizado; caso contr\u00e1rio, a chave ser\u00e1 adicionada.</p> PARAMETER DESCRIPTION <p>Dicion\u00e1rio contendo os dados a serem atualizados no contexto.</p> <p> TYPE: <code>dict[str, Any]</code> </p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ctx = Context()\n&gt;&gt;&gt; ctx.update({\"x\": 10})\n&gt;&gt;&gt; ctx.variables\n{'x': 10}\n&gt;&gt;&gt; ctx.update({\"y\": 20})\n&gt;&gt;&gt; ctx.variables\n{'x': 10, 'y': 20}\n</code></pre> Source code in <code>src/imperiumengine/dsl/context.py</code> <pre><code>def update(self, data: dict[str, Any]) -&gt; None:\n    \"\"\"\n    Atualiza o contexto com os dados fornecidos.\n\n    Este m\u00e9todo recebe um dicion\u00e1rio e atualiza o dicion\u00e1rio interno `variables` com os\n    pares chave-valor presentes em `data`. Se uma chave j\u00e1 existir, seu valor ser\u00e1 atualizado;\n    caso contr\u00e1rio, a chave ser\u00e1 adicionada.\n\n    Parameters\n    ----------\n    data : dict[str, Any]\n        Dicion\u00e1rio contendo os dados a serem atualizados no contexto.\n\n    Examples\n    --------\n    &gt;&gt;&gt; ctx = Context()\n    &gt;&gt;&gt; ctx.update({\"x\": 10})\n    &gt;&gt;&gt; ctx.variables\n    {'x': 10}\n    &gt;&gt;&gt; ctx.update({\"y\": 20})\n    &gt;&gt;&gt; ctx.variables\n    {'x': 10, 'y': 20}\n    \"\"\"\n    self.variables.update(data)\n</code></pre>"},{"location":"reference/imperiumengine/dsl/context/Context/#imperiumengine.dsl.context.Context.update(data)","title":"<code>data</code>","text":""},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/","title":"Class <code>SafeEvaluator</code>","text":"<p>Here's the reference information for the <code>SafeEvaluator</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>SafeEvaluator</code> class directly from <code>imperiumengine.dsl.evaluator</code>:</p>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#usage","title":"Usage","text":"<pre><code>from imperiumengine.dsl.evaluator import SafeEvaluator\n</code></pre> <p>               Bases: <code>NodeVisitor</code></p> <p>Avalia express\u00f5es de uma DSL de forma segura utilizando uma AST restrita.</p> <p>Esta classe percorre a \u00e1rvore sint\u00e1tica abstrata (AST) gerada a partir de uma express\u00e3o e avalia os n\u00f3s permitidos, garantindo que somente opera\u00e7\u00f5es seguras sejam executadas. Opera\u00e7\u00f5es n\u00e3o permitidas ou n\u00f3s inesperados geram uma exce\u00e7\u00e3o <code>DSLError</code>.</p> <p>A classe permite opera\u00e7\u00f5es aritm\u00e9ticas simples, opera\u00e7\u00f5es un\u00e1rias, opera\u00e7\u00f5es booleanas, compara\u00e7\u00f5es, al\u00e9m de chamadas a fun\u00e7\u00f5es permitidas. As fun\u00e7\u00f5es autorizadas est\u00e3o definidas na vari\u00e1vel de classe <code>ALLOWED_FUNCTIONS</code>.</p> ATTRIBUTE DESCRIPTION <code>ALLOWED_FUNCTIONS</code> <p>Conjunto de nomes de fun\u00e7\u00f5es que s\u00e3o permitidas nas express\u00f5es. Valores permitidos: {\"implies\", \"iff\", \"xor\", \"nand\", \"nor\"}.</p> <p> TYPE: <code>ClassVar[set[str]]</code> </p> <code>context</code> <p>Dicion\u00e1rio que representa o contexto de avalia\u00e7\u00e3o, contendo vari\u00e1veis e fun\u00e7\u00f5es dispon\u00edveis.</p> <p> TYPE: <code>dict[str, Any]</code> </p> PARAMETER DESCRIPTION <p>Dicion\u00e1rio contendo as vari\u00e1veis e fun\u00e7\u00f5es que poder\u00e3o ser utilizadas durante a avalia\u00e7\u00e3o.</p> <p> TYPE: <code>dict[str, Any]</code> </p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Exemplo simples de avalia\u00e7\u00e3o segura:\n&gt;&gt;&gt; contexto = {\"x\": 10, \"y\": 5}\n&gt;&gt;&gt; evaluator = SafeEvaluator(contexto)\n&gt;&gt;&gt; import ast\n&gt;&gt;&gt; node = ast.parse(\"x + y\", mode=\"eval\")\n&gt;&gt;&gt; evaluator.visit(node.body)\n15\n</code></pre> Source code in <code>src/imperiumengine/dsl/evaluator.py</code> <pre><code>def __init__(self, context: dict[str, Any]) -&gt; None:\n    self.context = context\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator(context)","title":"<code>context</code>","text":""},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.ALLOWED_FUNCTIONS","title":"imperiumengine.dsl.evaluator.SafeEvaluator.ALLOWED_FUNCTIONS  <code>class-attribute</code>","text":"<pre><code>ALLOWED_FUNCTIONS = {'implies', 'iff', 'xor', 'nand', 'nor'}\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.context","title":"imperiumengine.dsl.evaluator.SafeEvaluator.context  <code>instance-attribute</code>","text":"<pre><code>context = context\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_BinOp","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_BinOp  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>visit_BinOp = visit_binop\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_UnaryOp","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_UnaryOp  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>visit_UnaryOp = visit_unaryop\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_Num","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_Num  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>visit_Num = visit_num\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_Constant","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_Constant  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>visit_Constant = visit_constant\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_Name","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_Name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>visit_Name = visit_name\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_BoolOp","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_BoolOp  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>visit_BoolOp = visit_boolop\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_Compare","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_Compare  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>visit_Compare = visit_compare\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_Call","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_Call  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>visit_Call = visit_call\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_binop","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_binop","text":"<pre><code>visit_binop(node)\n</code></pre> <p>Avalia uma opera\u00e7\u00e3o bin\u00e1ria (ex.: adi\u00e7\u00e3o, subtra\u00e7\u00e3o).</p> PARAMETER DESCRIPTION <p>N\u00f3 da AST que representa uma opera\u00e7\u00e3o bin\u00e1ria.</p> <p> TYPE: <code>BinOp</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>Resultado da opera\u00e7\u00e3o bin\u00e1ria avaliada.</p> RAISES DESCRIPTION <code>DSLError</code> <p>Se o operador bin\u00e1rio n\u00e3o for suportado.</p> Source code in <code>src/imperiumengine/dsl/evaluator.py</code> <pre><code>def visit_binop(self, node: ast.BinOp) -&gt; Any:\n    \"\"\"\n    Avalia uma opera\u00e7\u00e3o bin\u00e1ria (ex.: adi\u00e7\u00e3o, subtra\u00e7\u00e3o).\n\n    Parameters\n    ----------\n    node : ast.BinOp\n        N\u00f3 da AST que representa uma opera\u00e7\u00e3o bin\u00e1ria.\n\n    Returns\n    -------\n    Any\n        Resultado da opera\u00e7\u00e3o bin\u00e1ria avaliada.\n\n    Raises\n    ------\n    DSLError\n        Se o operador bin\u00e1rio n\u00e3o for suportado.\n    \"\"\"\n    left = self.visit(node.left)\n    right = self.visit(node.right)\n    if isinstance(node.op, ast.Add):\n        return left + right\n    if isinstance(node.op, ast.Sub):\n        return left - right\n    if isinstance(node.op, ast.Mult):\n        return left * right\n    if isinstance(node.op, ast.Div):\n        return left / right\n    if isinstance(node.op, ast.Mod):\n        return left % right\n    if isinstance(node.op, ast.Pow):\n        return left**right\n    raise DSLError(f\"Binary operator {type(node.op).__name__} is not supported.\")\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_binop(node)","title":"<code>node</code>","text":""},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_unaryop","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_unaryop","text":"<pre><code>visit_unaryop(node)\n</code></pre> <p>Avalia uma opera\u00e7\u00e3o un\u00e1ria (ex.: nega\u00e7\u00e3o).</p> PARAMETER DESCRIPTION <p>N\u00f3 da AST que representa uma opera\u00e7\u00e3o un\u00e1ria.</p> <p> TYPE: <code>UnaryOp</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>Resultado da opera\u00e7\u00e3o un\u00e1ria avaliada.</p> RAISES DESCRIPTION <code>DSLError</code> <p>Se o operador un\u00e1rio n\u00e3o for suportado.</p> Source code in <code>src/imperiumengine/dsl/evaluator.py</code> <pre><code>def visit_unaryop(self, node: ast.UnaryOp) -&gt; Any:\n    \"\"\"\n    Avalia uma opera\u00e7\u00e3o un\u00e1ria (ex.: nega\u00e7\u00e3o).\n\n    Parameters\n    ----------\n    node : ast.UnaryOp\n        N\u00f3 da AST que representa uma opera\u00e7\u00e3o un\u00e1ria.\n\n    Returns\n    -------\n    Any\n        Resultado da opera\u00e7\u00e3o un\u00e1ria avaliada.\n\n    Raises\n    ------\n    DSLError\n        Se o operador un\u00e1rio n\u00e3o for suportado.\n    \"\"\"\n    operand = self.visit(node.operand)\n    if isinstance(node.op, ast.UAdd):\n        return +operand\n    if isinstance(node.op, ast.USub):\n        return -operand\n    if isinstance(node.op, ast.Not):\n        return not operand\n    raise DSLError(f\"Unary operator {type(node.op).__name__} is not supported.\")\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_unaryop(node)","title":"<code>node</code>","text":""},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_num","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_num","text":"<pre><code>visit_num(node)\n</code></pre> <p>Retorna o valor num\u00e9rico de um n\u00f3 antigo (para vers\u00f5es de Python anteriores a 3.8).</p> PARAMETER DESCRIPTION <p>N\u00f3 que cont\u00e9m um valor num\u00e9rico.</p> <p> TYPE: <code>Num</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>Valor num\u00e9rico armazenado em node.n.</p> Source code in <code>src/imperiumengine/dsl/evaluator.py</code> <pre><code>def visit_num(self, node: ast.Num) -&gt; Any:\n    \"\"\"\n    Retorna o valor num\u00e9rico de um n\u00f3 antigo (para vers\u00f5es de Python anteriores a 3.8).\n\n    Parameters\n    ----------\n    node : ast.Num\n        N\u00f3 que cont\u00e9m um valor num\u00e9rico.\n\n    Returns\n    -------\n    Any\n        Valor num\u00e9rico armazenado em node.n.\n    \"\"\"\n    return node.n\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_num(node)","title":"<code>node</code>","text":""},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_constant","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_constant","text":"<pre><code>visit_constant(node)\n</code></pre> <p>Retorna o valor de um n\u00f3 constante (utilizado em Python 3.8+).</p> PARAMETER DESCRIPTION <p>N\u00f3 que cont\u00e9m um valor constante.</p> <p> TYPE: <code>Constant</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>Valor constante armazenado em node.value.</p> Source code in <code>src/imperiumengine/dsl/evaluator.py</code> <pre><code>def visit_constant(self, node: ast.Constant) -&gt; Any:\n    \"\"\"\n    Retorna o valor de um n\u00f3 constante (utilizado em Python 3.8+).\n\n    Parameters\n    ----------\n    node : ast.Constant\n        N\u00f3 que cont\u00e9m um valor constante.\n\n    Returns\n    -------\n    Any\n        Valor constante armazenado em node.value.\n    \"\"\"\n    return node.value\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_constant(node)","title":"<code>node</code>","text":""},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_name","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_name","text":"<pre><code>visit_name(node)\n</code></pre> <p>Recupera o valor de uma vari\u00e1vel a partir do contexto.</p> PARAMETER DESCRIPTION <p>N\u00f3 que representa uma vari\u00e1vel.</p> <p> TYPE: <code>Name</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>Valor da vari\u00e1vel obtido a partir do contexto.</p> RAISES DESCRIPTION <code>DSLError</code> <p>Se a vari\u00e1vel n\u00e3o estiver presente no contexto.</p> Source code in <code>src/imperiumengine/dsl/evaluator.py</code> <pre><code>def visit_name(self, node: ast.Name) -&gt; Any:\n    \"\"\"\n    Recupera o valor de uma vari\u00e1vel a partir do contexto.\n\n    Parameters\n    ----------\n    node : ast.Name\n        N\u00f3 que representa uma vari\u00e1vel.\n\n    Returns\n    -------\n    Any\n        Valor da vari\u00e1vel obtido a partir do contexto.\n\n    Raises\n    ------\n    DSLError\n        Se a vari\u00e1vel n\u00e3o estiver presente no contexto.\n    \"\"\"\n    if node.id in self.context:\n        return self.context[node.id]\n    raise DSLError(f\"Variable '{node.id}' not found in context.\")\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_name(node)","title":"<code>node</code>","text":""},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_boolop","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_boolop","text":"<pre><code>visit_boolop(node)\n</code></pre> <p>Avalia opera\u00e7\u00f5es booleanas (AND, OR).</p> PARAMETER DESCRIPTION <p>N\u00f3 que representa uma opera\u00e7\u00e3o booleana.</p> <p> TYPE: <code>BoolOp</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>Resultado da opera\u00e7\u00e3o booleana.</p> RAISES DESCRIPTION <code>DSLError</code> <p>Se o operador booleano n\u00e3o for suportado.</p> Source code in <code>src/imperiumengine/dsl/evaluator.py</code> <pre><code>def visit_boolop(self, node: ast.BoolOp) -&gt; Any:\n    \"\"\"\n    Avalia opera\u00e7\u00f5es booleanas (AND, OR).\n\n    Parameters\n    ----------\n    node : ast.BoolOp\n        N\u00f3 que representa uma opera\u00e7\u00e3o booleana.\n\n    Returns\n    -------\n    Any\n        Resultado da opera\u00e7\u00e3o booleana.\n\n    Raises\n    ------\n    DSLError\n        Se o operador booleano n\u00e3o for suportado.\n    \"\"\"\n    if isinstance(node.op, ast.And):\n        result = True\n        for value in node.values:\n            result = result and self.visit(value)\n            if not result:\n                return False\n        return True\n    if isinstance(node.op, ast.Or):\n        result = False\n        for value in node.values:\n            result = result or self.visit(value)\n            if result:\n                return True\n        return False\n    raise DSLError(\"Boolean operator not supported.\")\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_boolop(node)","title":"<code>node</code>","text":""},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_compare","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_compare","text":"<pre><code>visit_compare(node)\n</code></pre> <p>Avalia express\u00f5es de compara\u00e7\u00e3o (ex.: &gt;, &lt;, ==).</p> PARAMETER DESCRIPTION <p>N\u00f3 que representa uma compara\u00e7\u00e3o.</p> <p> TYPE: <code>Compare</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>Valor booleano que resulta da compara\u00e7\u00e3o.</p> RAISES DESCRIPTION <code>DSLError</code> <p>Se algum operador de compara\u00e7\u00e3o n\u00e3o for suportado.</p> Source code in <code>src/imperiumengine/dsl/evaluator.py</code> <pre><code>def visit_compare(self, node: ast.Compare) -&gt; Any:\n    \"\"\"\n    Avalia express\u00f5es de compara\u00e7\u00e3o (ex.: &gt;, &lt;, ==).\n\n    Parameters\n    ----------\n    node : ast.Compare\n        N\u00f3 que representa uma compara\u00e7\u00e3o.\n\n    Returns\n    -------\n    Any\n        Valor booleano que resulta da compara\u00e7\u00e3o.\n\n    Raises\n    ------\n    DSLError\n        Se algum operador de compara\u00e7\u00e3o n\u00e3o for suportado.\n    \"\"\"\n    left = self.visit(node.left)\n    for op, comparator in zip(node.ops, node.comparators, strict=False):\n        right = self.visit(comparator)\n        if isinstance(op, ast.Gt):\n            if left &lt;= right:\n                return False\n        elif isinstance(op, ast.GtE):\n            if left &lt; right:\n                return False\n        elif isinstance(op, ast.Lt):\n            if left &gt;= right:\n                return False\n        elif isinstance(op, ast.LtE):\n            if left &gt; right:\n                return False\n        elif isinstance(op, ast.Eq):\n            if left != right:\n                return False\n        elif isinstance(op, ast.NotEq):\n            if left == right:\n                return False\n        else:\n            raise DSLError(f\"Comparison operator {type(op).__name__} is not supported.\")\n        left = right\n    return True\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_compare(node)","title":"<code>node</code>","text":""},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_call","title":"imperiumengine.dsl.evaluator.SafeEvaluator.visit_call","text":"<pre><code>visit_call(node)\n</code></pre> <p>Avalia uma chamada de fun\u00e7\u00e3o.</p> <p>Somente chamadas a fun\u00e7\u00f5es presentes em <code>ALLOWED_FUNCTIONS</code> s\u00e3o permitidas. Os argumentos e palavras-chave da chamada s\u00e3o avaliados recursivamente.</p> PARAMETER DESCRIPTION <p>N\u00f3 que representa uma chamada de fun\u00e7\u00e3o.</p> <p> TYPE: <code>Call</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>Resultado da chamada da fun\u00e7\u00e3o.</p> RAISES DESCRIPTION <code>DSLError</code> <p>Se a fun\u00e7\u00e3o chamada n\u00e3o for permitida ou n\u00e3o estiver presente no contexto, ou se a chamada n\u00e3o for uma chamada simples.</p> Source code in <code>src/imperiumengine/dsl/evaluator.py</code> <pre><code>def visit_call(self, node: ast.Call) -&gt; Any:\n    \"\"\"\n    Avalia uma chamada de fun\u00e7\u00e3o.\n\n    Somente chamadas a fun\u00e7\u00f5es presentes em `ALLOWED_FUNCTIONS` s\u00e3o permitidas.\n    Os argumentos e palavras-chave da chamada s\u00e3o avaliados recursivamente.\n\n    Parameters\n    ----------\n    node : ast.Call\n        N\u00f3 que representa uma chamada de fun\u00e7\u00e3o.\n\n    Returns\n    -------\n    Any\n        Resultado da chamada da fun\u00e7\u00e3o.\n\n    Raises\n    ------\n    DSLError\n        Se a fun\u00e7\u00e3o chamada n\u00e3o for permitida ou n\u00e3o estiver presente no contexto, ou se a\n        chamada n\u00e3o for uma chamada simples.\n    \"\"\"\n    if isinstance(node.func, ast.Name):\n        func_name = node.func.id\n        if func_name not in self.ALLOWED_FUNCTIONS:\n            raise DSLError(f\"Function call '{func_name}' is not permitted.\")\n        args = [self.visit(arg) for arg in node.args]\n        kwargs = {kw.arg: self.visit(kw.value) for kw in node.keywords if kw.arg is not None}\n        if func_name not in self.context:\n            raise DSLError(f\"Function '{func_name}' not found in context.\")\n        func = self.context[func_name]\n        return func(*args, **kwargs)\n    raise DSLError(\"Only simple function calls are allowed.\")\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.visit_call(node)","title":"<code>node</code>","text":""},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.generic_visit","title":"imperiumengine.dsl.evaluator.SafeEvaluator.generic_visit","text":"<pre><code>generic_visit(node)\n</code></pre> <p>M\u00e9todo gen\u00e9rico de visita que impede a avalia\u00e7\u00e3o de n\u00f3s n\u00e3o permitidos.</p> PARAMETER DESCRIPTION <p>N\u00f3 da AST que n\u00e3o possui um m\u00e9todo de visita espec\u00edfico.</p> <p> TYPE: <code>AST</code> </p> RAISES DESCRIPTION <code>DSLError</code> <p>Sempre levanta uma exce\u00e7\u00e3o indicando que o n\u00f3 n\u00e3o \u00e9 permitido.</p> Source code in <code>src/imperiumengine/dsl/evaluator.py</code> <pre><code>def generic_visit(self, node: ast.AST) -&gt; Any:\n    \"\"\"\n    M\u00e9todo gen\u00e9rico de visita que impede a avalia\u00e7\u00e3o de n\u00f3s n\u00e3o permitidos.\n\n    Parameters\n    ----------\n    node : ast.AST\n        N\u00f3 da AST que n\u00e3o possui um m\u00e9todo de visita espec\u00edfico.\n\n    Raises\n    ------\n    DSLError\n        Sempre levanta uma exce\u00e7\u00e3o indicando que o n\u00f3 n\u00e3o \u00e9 permitido.\n    \"\"\"\n    raise DSLError(f\"AST node {type(node).__name__} is not permitted in safe expressions.\")\n</code></pre>"},{"location":"reference/imperiumengine/dsl/evaluator/SafeEvaluator/#imperiumengine.dsl.evaluator.SafeEvaluator.generic_visit(node)","title":"<code>node</code>","text":""},{"location":"reference/imperiumengine/dsl/exceptions/DSLError/","title":"Class <code>DSLError</code>","text":"<p>Here's the reference information for the <code>DSLError</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>DSLError</code> class directly from <code>imperiumengine.dsl.exceptions</code>:</p>"},{"location":"reference/imperiumengine/dsl/exceptions/DSLError/#usage","title":"Usage","text":"<pre><code>from imperiumengine.dsl.exceptions import DSLError\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Erro relacionado \u00e0 DSL (Domain Specific Language).</p> <p>Esta exce\u00e7\u00e3o \u00e9 lan\u00e7ada sempre que ocorre um problema durante a avalia\u00e7\u00e3o ou execu\u00e7\u00e3o de express\u00f5es e instru\u00e7\u00f5es definidas na DSL. Ela pode ser utilizada para sinalizar erros de sintaxe, sem\u00e2ntica ou de seguran\u00e7a, garantindo que apenas opera\u00e7\u00f5es permitidas sejam realizadas.</p> PARAMETER DESCRIPTION <p>Explica\u00e7\u00e3o detalhada do erro ocorrido.</p> <p> TYPE: <code>str</code> </p> <p>...</p> <p> </p> <p> </p>"},{"location":"reference/imperiumengine/dsl/exceptions/DSLError/#imperiumengine.dsl.exceptions.DSLError(message)","title":"<code>message</code>","text":""},{"location":"reference/imperiumengine/dsl/exceptions/DSLError/#imperiumengine.dsl.exceptions.DSLError(Traceback)","title":"<code>Traceback</code>","text":""},{"location":"reference/imperiumengine/dsl/exceptions/DSLError/#imperiumengine.dsl.exceptions.DSLError(DSLError)","title":"<code>DSLError</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/compound_instruction/CompoundInstruction/","title":"Class <code>CompoundInstruction</code>","text":"<p>Here's the reference information for the <code>CompoundInstruction</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>CompoundInstruction</code> class directly from <code>imperiumengine.dsl.instructions.compound_instruction</code>:</p>"},{"location":"reference/imperiumengine/dsl/instructions/compound_instruction/CompoundInstruction/#usage","title":"Usage","text":"<pre><code>from imperiumengine.dsl.instructions.compound_instruction import CompoundInstruction\n</code></pre> <p>               Bases: <code>Instruction</code></p> <p>Representa uma instru\u00e7\u00e3o composta que executa uma sequ\u00eancia de instru\u00e7\u00f5es.</p> <p>Esta classe permite agrupar m\u00faltiplas instru\u00e7\u00f5es que ser\u00e3o executadas sequencialmente em um mesmo contexto. Cada instru\u00e7\u00e3o deve ser uma inst\u00e2ncia de uma classe derivada de <code>Instruction</code> e deve implementar o m\u00e9todo <code>execute(context)</code>.</p> PARAMETER DESCRIPTION <p>Lista de instru\u00e7\u00f5es a serem executadas na ordem definida.</p> <p> TYPE: <code>list of Instruction</code> </p> ATTRIBUTE DESCRIPTION <code>instructions</code> <p>Lista que armazena as instru\u00e7\u00f5es que ser\u00e3o executadas sequencialmente.</p> <p> TYPE: <code>list of Instruction</code> </p> METHOD DESCRIPTION <code>execute</code> <p>Executa cada instru\u00e7\u00e3o presente na lista utilizando o contexto fornecido.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from imperiumengine.dsl.context import Context\n&gt;&gt;&gt; class DummyInstruction(Instruction):\n...     def __init__(self, valor):\n...         self.valor = valor\n...\n...     def execute(self, context):\n...         # Inicializa o atributo 'resultado' se n\u00e3o existir e acumula o valor\n...         if not hasattr(context, \"resultado\"):\n...             context.resultado = 0\n...         context.resultado += self.valor\n&gt;&gt;&gt; contexto = Context()\n&gt;&gt;&gt; instrucao1 = DummyInstruction(10)\n&gt;&gt;&gt; instrucao2 = DummyInstruction(5)\n&gt;&gt;&gt; instrucao_composta = CompoundInstruction([instrucao1, instrucao2])\n&gt;&gt;&gt; instrucao_composta.execute(contexto)\n&gt;&gt;&gt; contexto.resultado\n15\n</code></pre> <p>Inicializa a instru\u00e7\u00e3o composta com uma lista de instru\u00e7\u00f5es.</p> PARAMETER DESCRIPTION <p>Lista de inst\u00e2ncias de instru\u00e7\u00f5es a serem executadas sequencialmente.</p> <p> TYPE: <code>list of Instruction</code> </p> Source code in <code>src/imperiumengine/dsl/instructions/compound_instruction.py</code> <pre><code>def __init__(self, instructions: list[Instruction]) -&gt; None:\n    \"\"\"\n    Inicializa a instru\u00e7\u00e3o composta com uma lista de instru\u00e7\u00f5es.\n\n    Parameters\n    ----------\n    instructions : list of Instruction\n        Lista de inst\u00e2ncias de instru\u00e7\u00f5es a serem executadas sequencialmente.\n    \"\"\"\n    self.instructions = instructions\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/compound_instruction/CompoundInstruction/#imperiumengine.dsl.instructions.compound_instruction.CompoundInstruction(instructions)","title":"<code>instructions</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/compound_instruction/CompoundInstruction/#imperiumengine.dsl.instructions.compound_instruction.CompoundInstruction(instructions)","title":"<code>instructions</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/compound_instruction/CompoundInstruction/#imperiumengine.dsl.instructions.compound_instruction.CompoundInstruction-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/dsl/instructions/compound_instruction/CompoundInstruction/#imperiumengine.dsl.instructions.compound_instruction.CompoundInstruction.instructions","title":"imperiumengine.dsl.instructions.compound_instruction.CompoundInstruction.instructions  <code>instance-attribute</code>","text":"<pre><code>instructions = instructions\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/compound_instruction/CompoundInstruction/#imperiumengine.dsl.instructions.compound_instruction.CompoundInstruction-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/dsl/instructions/compound_instruction/CompoundInstruction/#imperiumengine.dsl.instructions.compound_instruction.CompoundInstruction.execute","title":"imperiumengine.dsl.instructions.compound_instruction.CompoundInstruction.execute","text":"<pre><code>execute(context)\n</code></pre> <p>Executa cada instru\u00e7\u00e3o da lista utilizando o mesmo contexto.</p> <p>Itera sobre a lista de instru\u00e7\u00f5es e, para cada uma, invoca o m\u00e9todo <code>execute</code>, passando o contexto fornecido como par\u00e2metro. Dessa forma, todas as instru\u00e7\u00f5es operam sobre o mesmo estado ou conjunto de dados.</p> PARAMETER DESCRIPTION <p>Objeto que representa o contexto de execu\u00e7\u00e3o, contendo os dados ou estado necess\u00e1rio para a execu\u00e7\u00e3o das instru\u00e7\u00f5es.</p> <p> TYPE: <code>Context</code> </p> RETURNS DESCRIPTION <code>None</code> Source code in <code>src/imperiumengine/dsl/instructions/compound_instruction.py</code> <pre><code>def execute(self, context: Context) -&gt; None:\n    \"\"\"\n    Executa cada instru\u00e7\u00e3o da lista utilizando o mesmo contexto.\n\n    Itera sobre a lista de instru\u00e7\u00f5es e, para cada uma, invoca o m\u00e9todo `execute`, passando o\n    contexto fornecido como par\u00e2metro. Dessa forma, todas as instru\u00e7\u00f5es operam sobre o mesmo\n    estado ou conjunto de dados.\n\n    Parameters\n    ----------\n    context : Context\n        Objeto que representa o contexto de execu\u00e7\u00e3o, contendo os dados ou estado necess\u00e1rio para\n        a execu\u00e7\u00e3o das instru\u00e7\u00f5es.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    for instr in self.instructions:\n        instr.execute(context)\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/compound_instruction/CompoundInstruction/#imperiumengine.dsl.instructions.compound_instruction.CompoundInstruction.execute(context)","title":"<code>context</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/if_instruction/IfInstruction/","title":"Class <code>IfInstruction</code>","text":"<p>Here's the reference information for the <code>IfInstruction</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>IfInstruction</code> class directly from <code>imperiumengine.dsl.instructions.if_instruction</code>:</p>"},{"location":"reference/imperiumengine/dsl/instructions/if_instruction/IfInstruction/#usage","title":"Usage","text":"<pre><code>from imperiumengine.dsl.instructions.if_instruction import IfInstruction\n</code></pre> <p>               Bases: <code>Instruction</code></p> <p>Avalia um bloco condicional e executa suas instru\u00e7\u00f5es se a condi\u00e7\u00e3o for verdadeira.</p> <p>Esta classe representa uma instru\u00e7\u00e3o condicional que avalia uma express\u00e3o booleana definida em <code>condition</code>. Se a express\u00e3o, quando avaliada utilizando as vari\u00e1veis do contexto, retornar um valor verdadeiro, o bloco de instru\u00e7\u00f5es associado (<code>block</code>) \u00e9 executado.</p> PARAMETER DESCRIPTION <p>Express\u00e3o condicional a ser avaliada. Essa express\u00e3o deve resultar em um valor booleano quando avaliada no contexto fornecido.</p> <p> TYPE: <code>str</code> </p> <p>Bloco composto de instru\u00e7\u00f5es a ser executado se a condi\u00e7\u00e3o for satisfeita. Deve ser uma inst\u00e2ncia de <code>CompoundInstruction</code>.</p> <p> TYPE: <code>CompoundInstruction</code> </p> ATTRIBUTE DESCRIPTION <code>condition</code> <p>A express\u00e3o condicional que ser\u00e1 avaliada.</p> <p> TYPE: <code>str</code> </p> <code>block</code> <p>O bloco de instru\u00e7\u00f5es que ser\u00e1 executado se a condi\u00e7\u00e3o for verdadeira.</p> <p> TYPE: <code>CompoundInstruction</code> </p> METHOD DESCRIPTION <code>execute</code> <p>Avalia a condi\u00e7\u00e3o e, se o resultado for verdadeiro, executa o bloco de instru\u00e7\u00f5es associado.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from imperiumengine.dsl.context import Context\n&gt;&gt;&gt; from imperiumengine.dsl.instructions.compound_instruction import CompoundInstruction\n&gt;&gt;&gt; from imperiumengine.dsl.instructions.if_instruction import IfInstruction\n&gt;&gt;&gt; from imperiumengine.dsl.instructions.instruction import Instruction\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Definindo uma instru\u00e7\u00e3o dummy que incrementa o valor 'counter' no contexto\n&gt;&gt;&gt; class DummyInstruction(Instruction):\n...     def execute(self, context):\n...         context.variables[\"counter\"] = context.variables.get(\"counter\", 0) + 1\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Cria\u00e7\u00e3o de um bloco composto com a instru\u00e7\u00e3o dummy\n&gt;&gt;&gt; block = CompoundInstruction([DummyInstruction()])\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Cria\u00e7\u00e3o do contexto com vari\u00e1vel 'x' para avalia\u00e7\u00e3o da condi\u00e7\u00e3o\n&gt;&gt;&gt; context = Context()\n&gt;&gt;&gt; context.variables = {\"x\": 10}\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Se x &gt; 5, o bloco \u00e9 executado e 'counter' \u00e9 incrementado\n&gt;&gt;&gt; if_instr = IfInstruction(\"x &gt; 5\", block)\n&gt;&gt;&gt; if_instr.execute(context)\n&gt;&gt;&gt; context.variables.get(\"counter\", 0)\n1\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Exemplo com condi\u00e7\u00e3o falsa: se x &gt; 15, o bloco n\u00e3o \u00e9 executado\n&gt;&gt;&gt; context.variables = {\"x\": 10, \"counter\": 0}\n&gt;&gt;&gt; if_instr = IfInstruction(\"x &gt; 15\", block)\n&gt;&gt;&gt; if_instr.execute(context)\n&gt;&gt;&gt; context.variables.get(\"counter\", 0)\n0\n</code></pre> <p>Inicializa a instru\u00e7\u00e3o condicional com a express\u00e3o e o bloco de instru\u00e7\u00f5es.</p> PARAMETER DESCRIPTION <p>Express\u00e3o condicional que ser\u00e1 avaliada para determinar se o bloco ser\u00e1 executado.</p> <p> TYPE: <code>str</code> </p> <p>Bloco de instru\u00e7\u00f5es que ser\u00e1 executado caso a condi\u00e7\u00e3o seja avaliada como verdadeira.</p> <p> TYPE: <code>CompoundInstruction</code> </p> Source code in <code>src/imperiumengine/dsl/instructions/if_instruction.py</code> <pre><code>def __init__(self, condition: str, block: CompoundInstruction) -&gt; None:\n    \"\"\"\n    Inicializa a instru\u00e7\u00e3o condicional com a express\u00e3o e o bloco de instru\u00e7\u00f5es.\n\n    Parameters\n    ----------\n    condition : str\n        Express\u00e3o condicional que ser\u00e1 avaliada para determinar se o bloco ser\u00e1 executado.\n    block : CompoundInstruction\n        Bloco de instru\u00e7\u00f5es que ser\u00e1 executado caso a condi\u00e7\u00e3o seja avaliada como verdadeira.\n    \"\"\"\n    self.condition = condition\n    self.block = block\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/if_instruction/IfInstruction/#imperiumengine.dsl.instructions.if_instruction.IfInstruction(condition)","title":"<code>condition</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/if_instruction/IfInstruction/#imperiumengine.dsl.instructions.if_instruction.IfInstruction(block)","title":"<code>block</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/if_instruction/IfInstruction/#imperiumengine.dsl.instructions.if_instruction.IfInstruction(condition)","title":"<code>condition</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/if_instruction/IfInstruction/#imperiumengine.dsl.instructions.if_instruction.IfInstruction(block)","title":"<code>block</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/if_instruction/IfInstruction/#imperiumengine.dsl.instructions.if_instruction.IfInstruction-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/dsl/instructions/if_instruction/IfInstruction/#imperiumengine.dsl.instructions.if_instruction.IfInstruction.condition","title":"imperiumengine.dsl.instructions.if_instruction.IfInstruction.condition  <code>instance-attribute</code>","text":"<pre><code>condition = condition\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/if_instruction/IfInstruction/#imperiumengine.dsl.instructions.if_instruction.IfInstruction.block","title":"imperiumengine.dsl.instructions.if_instruction.IfInstruction.block  <code>instance-attribute</code>","text":"<pre><code>block = block\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/if_instruction/IfInstruction/#imperiumengine.dsl.instructions.if_instruction.IfInstruction-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/dsl/instructions/if_instruction/IfInstruction/#imperiumengine.dsl.instructions.if_instruction.IfInstruction.execute","title":"imperiumengine.dsl.instructions.if_instruction.IfInstruction.execute","text":"<pre><code>execute(context)\n</code></pre> <p>Avalia a condi\u00e7\u00e3o e executa o bloco de instru\u00e7\u00f5es se a condi\u00e7\u00e3o for verdadeira.</p> <p>A avalia\u00e7\u00e3o da condi\u00e7\u00e3o \u00e9 realizada utilizando a fun\u00e7\u00e3o <code>safe_eval_expr</code>, que processa a express\u00e3o definida em <code>condition</code> com base nas vari\u00e1veis presentes no objeto <code>context</code>. Se o resultado for avaliado como verdadeiro, o m\u00e9todo <code>execute</code> do bloco de instru\u00e7\u00f5es \u00e9 chamado.</p> PARAMETER DESCRIPTION <p>Objeto que cont\u00e9m as vari\u00e1veis e o estado necess\u00e1rio para a avalia\u00e7\u00e3o da condi\u00e7\u00e3o e execu\u00e7\u00e3o do bloco de instru\u00e7\u00f5es.</p> <p> TYPE: <code>Context</code> </p> RETURNS DESCRIPTION <code>None</code> Source code in <code>src/imperiumengine/dsl/instructions/if_instruction.py</code> <pre><code>def execute(self, context: Context) -&gt; None:\n    \"\"\"\n    Avalia a condi\u00e7\u00e3o e executa o bloco de instru\u00e7\u00f5es se a condi\u00e7\u00e3o for verdadeira.\n\n    A avalia\u00e7\u00e3o da condi\u00e7\u00e3o \u00e9 realizada utilizando a fun\u00e7\u00e3o `safe_eval_expr`, que processa a\n    express\u00e3o definida em `condition` com base nas vari\u00e1veis presentes no objeto `context`. Se o\n    resultado for avaliado como verdadeiro, o m\u00e9todo `execute` do bloco de instru\u00e7\u00f5es \u00e9 chamado.\n\n    Parameters\n    ----------\n    context : Context\n        Objeto que cont\u00e9m as vari\u00e1veis e o estado necess\u00e1rio para a avalia\u00e7\u00e3o da condi\u00e7\u00e3o e execu\u00e7\u00e3o\n        do bloco de instru\u00e7\u00f5es.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    result = safe_eval_expr(self.condition, context.variables)\n    if result:\n        self.block.execute(context)\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/if_instruction/IfInstruction/#imperiumengine.dsl.instructions.if_instruction.IfInstruction.execute(context)","title":"<code>context</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/indicator/IndicatorInstruction/","title":"Class <code>IndicatorInstruction</code>","text":"<p>Here's the reference information for the <code>IndicatorInstruction</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>IndicatorInstruction</code> class directly from <code>imperiumengine.dsl.instructions.indicator</code>:</p>"},{"location":"reference/imperiumengine/dsl/instructions/indicator/IndicatorInstruction/#usage","title":"Usage","text":"<pre><code>from imperiumengine.dsl.instructions.indicator import IndicatorInstruction\n</code></pre> <p>Calcula um indicador de mercado a partir dos dados fornecidos.</p> <p>Esta classe realiza o c\u00e1lculo de um indicador de mercado com base nos par\u00e2metros presentes em um dicion\u00e1rio (<code>indicator_data</code>). Os indicadores suportados incluem: \"SMA\", \"EMA\", \"ATR\", \"BollingerBands\", \"MACD\" e \"RSI\". Para cada indicador, \u00e9 poss\u00edvel configurar par\u00e2metros espec\u00edficos, como per\u00edodo, fonte dos pre\u00e7os e outros valores necess\u00e1rios para o c\u00e1lculo (por exemplo, \"fast\", \"slow\" e \"signal\" para o MACD).</p> Par\u00e2metros <p>indicator_data : dict     Dicion\u00e1rio contendo os par\u00e2metros necess\u00e1rios para o c\u00e1lculo do indicador.     Par\u00e2metros esperados:       - \"name\" : str             Nome do indicador a ser calculado. Valores poss\u00edveis: \"SMA\", \"EMA\", \"ATR\",             \"BollingerBands\", \"MACD\", \"RSI\".       - \"period\" : int, opcional             Per\u00edodo utilizado no c\u00e1lculo do indicador (valor padr\u00e3o \u00e9 14).       - \"source\" : str, opcional             Nome da vari\u00e1vel no contexto que cont\u00e9m os pre\u00e7os (valor padr\u00e3o \"close\").       - \"var\" : str             Nome da vari\u00e1vel onde o resultado do indicador ser\u00e1 armazenado no contexto.       - Outros par\u00e2metros espec\u00edficos, como:             * \"multiplier\" para BollingerBands;             * \"fast\", \"slow\" e \"signal\" para MACD.</p> Atributos <p>indicator_data : dict     Armazena os par\u00e2metros do indicador. logger : logging.Logger     Logger utilizado para registrar informa\u00e7\u00f5es, debug e erros durante a execu\u00e7\u00e3o.</p> M\u00e9todos <p>_compute_indicator(name: str, prices: list[float], context: Context) -&gt; Any     Calcula o valor do indicador com base no nome, na lista de pre\u00e7os e no contexto. _get_required_param(param_name: str) -&gt; Any     Recupera um par\u00e2metro obrigat\u00f3rio do dicion\u00e1rio <code>indicator_data</code>. execute(context: Context) -&gt; None     Executa o c\u00e1lculo do indicador e armazena o resultado no contexto.</p> Exemplos <p>from imperiumengine.dsl.context import Context</p> <p>Inicializa a instru\u00e7\u00e3o de indicador com os dados fornecidos.</p> PARAMETER DESCRIPTION <p>Dicion\u00e1rio contendo os par\u00e2metros necess\u00e1rios para o c\u00e1lculo do indicador.</p> <p> TYPE: <code>dict</code> </p> Source code in <code>src/imperiumengine/dsl/instructions/indicator.py</code> <pre><code>def __init__(self, indicator_data: dict) -&gt; None:\n    \"\"\"\n    Inicializa a instru\u00e7\u00e3o de indicador com os dados fornecidos.\n\n    Parameters\n    ----------\n    indicator_data : dict\n        Dicion\u00e1rio contendo os par\u00e2metros necess\u00e1rios para o c\u00e1lculo do indicador.\n    \"\"\"\n    self.indicator_data = indicator_data\n    self.logger = LogFactory.get_logger(self.__class__.__name__)\n    self.logger.info(\"IndicatorInstruction instance created with data: %s\", self.indicator_data)\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/indicator/IndicatorInstruction/#imperiumengine.dsl.instructions.indicator.IndicatorInstruction--exemplo-de-configuracao-para-calculo-de-sma-com-periodo-3-dados-suficientes-para-o-calculo","title":"Exemplo de configura\u00e7\u00e3o para c\u00e1lculo de SMA com per\u00edodo 3 (dados suficientes para o c\u00e1lculo)","text":"<p>dados = {\"name\": \"SMA\", \"period\": 3, \"source\": \"close\", \"var\": \"sma_result\"} indicador = IndicatorInstruction(dados)</p>"},{"location":"reference/imperiumengine/dsl/instructions/indicator/IndicatorInstruction/#imperiumengine.dsl.instructions.indicator.IndicatorInstruction--supondo-que-o-contexto-possua-a-lista-de-precos-na-variavel-close","title":"Supondo que o contexto possua a lista de pre\u00e7os na vari\u00e1vel \"close\"","text":"<p>contexto = Context() contexto.variables[\"close\"] = [10, 12, 11, 13, 12, 14] indicador.execute(contexto)</p>"},{"location":"reference/imperiumengine/dsl/instructions/indicator/IndicatorInstruction/#imperiumengine.dsl.instructions.indicator.IndicatorInstruction--o-resultado-do-calculo-estara-armazenado-em-contextovariablessma_result","title":"O resultado do c\u00e1lculo estar\u00e1 armazenado em contexto.variables[\"sma_result\"]","text":"<p>contexto.variables[\"sma_result\"] 13.0</p>"},{"location":"reference/imperiumengine/dsl/instructions/indicator/IndicatorInstruction/#imperiumengine.dsl.instructions.indicator.IndicatorInstruction(indicator_data)","title":"<code>indicator_data</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/indicator/IndicatorInstruction/#imperiumengine.dsl.instructions.indicator.IndicatorInstruction-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/dsl/instructions/indicator/IndicatorInstruction/#imperiumengine.dsl.instructions.indicator.IndicatorInstruction.indicator_data","title":"imperiumengine.dsl.instructions.indicator.IndicatorInstruction.indicator_data  <code>instance-attribute</code>","text":"<pre><code>indicator_data = indicator_data\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/indicator/IndicatorInstruction/#imperiumengine.dsl.instructions.indicator.IndicatorInstruction.logger","title":"imperiumengine.dsl.instructions.indicator.IndicatorInstruction.logger  <code>instance-attribute</code>","text":"<pre><code>logger = get_logger(__name__)\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/indicator/IndicatorInstruction/#imperiumengine.dsl.instructions.indicator.IndicatorInstruction-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/dsl/instructions/indicator/IndicatorInstruction/#imperiumengine.dsl.instructions.indicator.IndicatorInstruction.execute","title":"imperiumengine.dsl.instructions.indicator.IndicatorInstruction.execute","text":"<pre><code>execute(context)\n</code></pre> <p>Executa o c\u00e1lculo do indicador e armazena o resultado no contexto.</p> <p>Recupera os par\u00e2metros obrigat\u00f3rios (\"name\" e \"var\") e, opcionalmente, o par\u00e2metro \"source\" (com valor padr\u00e3o \"close\"). Em seguida, extrai a lista de pre\u00e7os do contexto e realiza o c\u00e1lculo do indicador por meio do m\u00e9todo <code>_compute_indicator</code>. O resultado \u00e9 armazenado em <code>context.variables</code> utilizando o nome da vari\u00e1vel especificado.</p> PARAMETER DESCRIPTION <p>Objeto que cont\u00e9m as vari\u00e1veis e o estado de execu\u00e7\u00e3o. \u00c9 esperado que contenha os dados (por exemplo, pre\u00e7os) necess\u00e1rios para o c\u00e1lculo do indicador.</p> <p> TYPE: <code>Context</code> </p> RAISES DESCRIPTION <code>DSLError</code> <p>Se ocorrer algum erro na execu\u00e7\u00e3o do c\u00e1lculo do indicador.</p> Source code in <code>src/imperiumengine/dsl/instructions/indicator.py</code> <pre><code>def execute(self, context: Context) -&gt; None:\n    \"\"\"\n    Executa o c\u00e1lculo do indicador e armazena o resultado no contexto.\n\n    Recupera os par\u00e2metros obrigat\u00f3rios (\"name\" e \"var\") e, opcionalmente, o par\u00e2metro \"source\"\n    (com valor padr\u00e3o \"close\"). Em seguida, extrai a lista de pre\u00e7os do contexto e realiza o\n    c\u00e1lculo do indicador por meio do m\u00e9todo `_compute_indicator`. O resultado \u00e9 armazenado em\n    `context.variables` utilizando o nome da vari\u00e1vel especificado.\n\n    Parameters\n    ----------\n    context : Context\n        Objeto que cont\u00e9m as vari\u00e1veis e o estado de execu\u00e7\u00e3o. \u00c9 esperado que contenha os dados\n        (por exemplo, pre\u00e7os) necess\u00e1rios para o c\u00e1lculo do indicador.\n\n    Raises\n    ------\n    DSLError\n        Se ocorrer algum erro na execu\u00e7\u00e3o do c\u00e1lculo do indicador.\n\n    \"\"\"\n    try:\n        name = self._get_required_param(\"name\")\n        source = self.indicator_data.get(\"source\", \"close\")\n        var_name = self._get_required_param(\"var\")\n\n        self.logger.debug(\n            \"Executing indicator '%s' with source '%s' and var '%s'\", name, source, var_name\n        )\n\n        prices = context.variables.get(source, [])\n        value = self._compute_indicator(name, prices, context)\n\n        context.variables[var_name] = value\n\n        period = self.indicator_data.get(\"period\", 14) if name != \"MACD\" else \"N/A\"\n        self.logger.info(\"Indicator %s (period %s) calculated: %s\", name, period, value)\n\n    except DSLError as e:\n        self.logger.error(\"Execution failed: %s\", str(e))\n        raise\n    except Exception as e:\n        self.logger.exception(\"Unexpected error during execution\")\n        raise DSLError(f\"Unexpected error during execution: {e}\")\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/indicator/IndicatorInstruction/#imperiumengine.dsl.instructions.indicator.IndicatorInstruction.execute(context)","title":"<code>context</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/instruction/Instruction/","title":"Class <code>Instruction</code>","text":"<p>Here's the reference information for the <code>Instruction</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>Instruction</code> class directly from <code>imperiumengine.dsl.instructions.instruction</code>:</p>"},{"location":"reference/imperiumengine/dsl/instructions/instruction/Instruction/#usage","title":"Usage","text":"<pre><code>from imperiumengine.dsl.instructions.instruction import Instruction\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Classe base abstrata para instru\u00e7\u00f5es na DSL.</p> <p>Esta classe define a interface que todas as instru\u00e7\u00f5es devem implementar. Cada instru\u00e7\u00e3o deve fornecer sua pr\u00f3pria implementa\u00e7\u00e3o do m\u00e9todo <code>execute(context)</code>, que cont\u00e9m a l\u00f3gica para executar a instru\u00e7\u00e3o utilizando o contexto fornecido.</p> METHOD DESCRIPTION <code>execute</code> <p>Executa a instru\u00e7\u00e3o utilizando o contexto passado como par\u00e2metro.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from imperiumengine.dsl.context import Context\n&gt;&gt;&gt; class DummyInstruction(Instruction):\n...     def execute(self, context: Context) -&gt; None:\n...         # Supondo que o objeto Context possua um atributo 'variables' do tipo dict.\n...         context.variables[\"dummy\"] = \"executado\"\n&gt;&gt;&gt;\n&gt;&gt;&gt; class DummyContext(Context):\n...     def __init__(self):\n...         self.variables = {}\n&gt;&gt;&gt;\n&gt;&gt;&gt; contexto = DummyContext()\n&gt;&gt;&gt; instrucao = DummyInstruction()\n&gt;&gt;&gt; instrucao.execute(contexto)\n&gt;&gt;&gt; contexto.variables[\"dummy\"]\n'executado'\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/instruction/Instruction/#imperiumengine.dsl.instructions.instruction.Instruction-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/dsl/instructions/instruction/Instruction/#imperiumengine.dsl.instructions.instruction.Instruction.execute","title":"imperiumengine.dsl.instructions.instruction.Instruction.execute  <code>abstractmethod</code>","text":"<pre><code>execute(context)\n</code></pre> <p>Executa a instru\u00e7\u00e3o utilizando o contexto fornecido.</p> <p>Este m\u00e9todo deve ser implementado pelas subclasses de <code>Instruction</code>. A implementa\u00e7\u00e3o deve definir a l\u00f3gica de execu\u00e7\u00e3o da instru\u00e7\u00e3o, podendo modificar o estado ou as vari\u00e1veis do objeto <code>context</code>.</p> PARAMETER DESCRIPTION <p>Objeto que cont\u00e9m o estado e as vari\u00e1veis necess\u00e1rias para a execu\u00e7\u00e3o da instru\u00e7\u00e3o.</p> <p> TYPE: <code>Context</code> </p> RAISES DESCRIPTION <code>NotImplementedError</code> <p>Se a subclasse n\u00e3o implementar este m\u00e9todo.</p> Source code in <code>src/imperiumengine/dsl/instructions/instruction.py</code> <pre><code>@abstractmethod\ndef execute(self, context: Context) -&gt; None:\n    \"\"\"\n    Executa a instru\u00e7\u00e3o utilizando o contexto fornecido.\n\n    Este m\u00e9todo deve ser implementado pelas subclasses de `Instruction`. A implementa\u00e7\u00e3o\n    deve definir a l\u00f3gica de execu\u00e7\u00e3o da instru\u00e7\u00e3o, podendo modificar o estado ou as vari\u00e1veis\n    do objeto `context`.\n\n    Parameters\n    ----------\n    context : Context\n        Objeto que cont\u00e9m o estado e as vari\u00e1veis necess\u00e1rias para a execu\u00e7\u00e3o da instru\u00e7\u00e3o.\n\n    Raises\n    ------\n    NotImplementedError\n        Se a subclasse n\u00e3o implementar este m\u00e9todo.\n    \"\"\"\n    raise NotImplementedError(\"Subclasses devem implementar o m\u00e9todo execute(context)\")\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/instruction/Instruction/#imperiumengine.dsl.instructions.instruction.Instruction.execute(context)","title":"<code>context</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/operation/OperationInstruction/","title":"Class <code>OperationInstruction</code>","text":"<p>Here's the reference information for the <code>OperationInstruction</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>OperationInstruction</code> class directly from <code>imperiumengine.dsl.instructions.operation</code>:</p>"},{"location":"reference/imperiumengine/dsl/instructions/operation/OperationInstruction/#usage","title":"Usage","text":"<pre><code>from imperiumengine.dsl.instructions.operation import OperationInstruction\n</code></pre> <p>               Bases: <code>Instruction</code></p> <p>Executa uma opera\u00e7\u00e3o de c\u00f3digo dentro do contexto da DSL.</p> <p>Esta classe encapsula uma opera\u00e7\u00e3o representada por uma string que ser\u00e1 executada de forma segura atrav\u00e9s da fun\u00e7\u00e3o <code>safe_exec_statement</code>. A opera\u00e7\u00e3o \u00e9 avaliada utilizando as vari\u00e1veis presentes no contexto, permitindo a modifica\u00e7\u00e3o do estado ou a execu\u00e7\u00e3o de l\u00f3gicas definidas pela DSL.</p> PARAMETER DESCRIPTION <p>String contendo o c\u00f3digo ou opera\u00e7\u00e3o a ser executada. Essa opera\u00e7\u00e3o deve ser compat\u00edvel com a sintaxe esperada pelo interpretador da DSL.</p> <p> TYPE: <code>str</code> </p> ATTRIBUTE DESCRIPTION <code>operation</code> <p>Armazena a opera\u00e7\u00e3o de c\u00f3digo que ser\u00e1 executada.</p> <p> TYPE: <code>str</code> </p> <code>logger</code> <p>Inst\u00e2ncia do logger utilizada para registrar mensagens, erros e informa\u00e7\u00f5es durante a execu\u00e7\u00e3o da opera\u00e7\u00e3o.</p> <p> TYPE: <code>Logger</code> </p> METHOD DESCRIPTION <code>execute</code> <p>Executa a opera\u00e7\u00e3o de c\u00f3digo no contexto fornecido, utilizando as vari\u00e1veis presentes no objeto <code>Context</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from imperiumengine.dsl.context import Context\n&gt;&gt;&gt; # Supondo que o contexto possua um atributo 'variables' (um dicion\u00e1rio)\n&gt;&gt;&gt; context = Context()\n&gt;&gt;&gt; context.variables = {\"x\": 10}\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Cria\u00e7\u00e3o de uma opera\u00e7\u00e3o que incrementa a vari\u00e1vel 'x'\n&gt;&gt;&gt; instrucao_operacao = OperationInstruction(\"x = x + 5\")\n&gt;&gt;&gt; instrucao_operacao.execute(context)\n&gt;&gt;&gt; context.variables[\"x\"]\n15\n</code></pre> <p>Inicializa a instru\u00e7\u00e3o de opera\u00e7\u00e3o com o c\u00f3digo a ser executado.</p> PARAMETER DESCRIPTION <p>String representando a opera\u00e7\u00e3o de c\u00f3digo que ser\u00e1 executada.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/imperiumengine/dsl/instructions/operation.py</code> <pre><code>def __init__(self, operation: str) -&gt; None:\n    \"\"\"\n    Inicializa a instru\u00e7\u00e3o de opera\u00e7\u00e3o com o c\u00f3digo a ser executado.\n\n    Parameters\n    ----------\n    operation : str\n        String representando a opera\u00e7\u00e3o de c\u00f3digo que ser\u00e1 executada.\n    \"\"\"\n    self.operation = operation\n    self.logger = LogFactory.get_logger(self.__class__.__name__)\n    self.logger.info(\"OperationInstruction instance created with operation: %s\", self.operation)\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/operation/OperationInstruction/#imperiumengine.dsl.instructions.operation.OperationInstruction(operation)","title":"<code>operation</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/operation/OperationInstruction/#imperiumengine.dsl.instructions.operation.OperationInstruction(operation)","title":"<code>operation</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/operation/OperationInstruction/#imperiumengine.dsl.instructions.operation.OperationInstruction-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/dsl/instructions/operation/OperationInstruction/#imperiumengine.dsl.instructions.operation.OperationInstruction.operation","title":"imperiumengine.dsl.instructions.operation.OperationInstruction.operation  <code>instance-attribute</code>","text":"<pre><code>operation = operation\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/operation/OperationInstruction/#imperiumengine.dsl.instructions.operation.OperationInstruction.logger","title":"imperiumengine.dsl.instructions.operation.OperationInstruction.logger  <code>instance-attribute</code>","text":"<pre><code>logger = get_logger(__name__)\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/operation/OperationInstruction/#imperiumengine.dsl.instructions.operation.OperationInstruction-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/dsl/instructions/operation/OperationInstruction/#imperiumengine.dsl.instructions.operation.OperationInstruction.execute","title":"imperiumengine.dsl.instructions.operation.OperationInstruction.execute","text":"<pre><code>execute(context)\n</code></pre> <p>Executa a opera\u00e7\u00e3o de c\u00f3digo utilizando o contexto fornecido.</p> <p>A execu\u00e7\u00e3o \u00e9 realizada atrav\u00e9s da fun\u00e7\u00e3o <code>safe_exec_statement</code>, que avalia e executa a opera\u00e7\u00e3o de forma segura, utilizando as vari\u00e1veis presentes no objeto <code>context</code>. Caso a execu\u00e7\u00e3o seja bem-sucedida, uma mensagem de log \u00e9 registrada. Em caso de erro relacionado \u00e0 DSL (DSLError) ou qualquer outro erro inesperado, a exce\u00e7\u00e3o \u00e9 registrada e propagada.</p> PARAMETER DESCRIPTION <p>Objeto que cont\u00e9m as vari\u00e1veis e o estado necess\u00e1rio para a execu\u00e7\u00e3o da opera\u00e7\u00e3o. \u00c9 esperado que o contexto possua um atributo <code>variables</code> (do tipo dict) onde os valores podem ser modificados.</p> <p> TYPE: <code>Context</code> </p> RAISES DESCRIPTION <code>DSLError</code> <p>Se ocorrer um erro durante a execu\u00e7\u00e3o da opera\u00e7\u00e3o, seja ele esperado (DSLError) ou inesperado, uma exce\u00e7\u00e3o DSLError \u00e9 levantada.</p> Source code in <code>src/imperiumengine/dsl/instructions/operation.py</code> <pre><code>def execute(self, context: Context) -&gt; None:\n    \"\"\"\n    Executa a opera\u00e7\u00e3o de c\u00f3digo utilizando o contexto fornecido.\n\n    A execu\u00e7\u00e3o \u00e9 realizada atrav\u00e9s da fun\u00e7\u00e3o `safe_exec_statement`, que avalia e executa a\n    opera\u00e7\u00e3o de forma segura, utilizando as vari\u00e1veis presentes no objeto `context`. Caso a\n    execu\u00e7\u00e3o seja bem-sucedida, uma mensagem de log \u00e9 registrada. Em caso de erro relacionado \u00e0\n    DSL (DSLError) ou qualquer outro erro inesperado, a exce\u00e7\u00e3o \u00e9 registrada e propagada.\n\n    Parameters\n    ----------\n    context : Context\n        Objeto que cont\u00e9m as vari\u00e1veis e o estado necess\u00e1rio para a execu\u00e7\u00e3o da opera\u00e7\u00e3o. \u00c9\n        esperado que o contexto possua um atributo `variables` (do tipo dict) onde os valores\n        podem ser modificados.\n\n    Raises\n    ------\n    DSLError\n        Se ocorrer um erro durante a execu\u00e7\u00e3o da opera\u00e7\u00e3o, seja ele esperado (DSLError) ou\n        inesperado, uma exce\u00e7\u00e3o DSLError \u00e9 levantada.\n    \"\"\"\n    self.logger.debug(\"Starting execution of operation: %s\", self.operation)\n\n    try:\n        safe_exec_statement(self.operation, context.variables)\n        self.logger.info(\"Successfully executed operation: %s\", self.operation)\n\n    except DSLError as e:\n        self.logger.error(\"Execution failed due to DSL error: %s\", str(e))\n        raise\n\n    except Exception as e:\n        self.logger.exception(\"Unexpected error during operation execution: %s\", self.operation)\n        raise DSLError(f\"Unexpected error executing operation: {e}\")\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/operation/OperationInstruction/#imperiumengine.dsl.instructions.operation.OperationInstruction.execute(context)","title":"<code>context</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/trade/TradeInstruction/","title":"Class <code>TradeInstruction</code>","text":"<p>Here's the reference information for the <code>TradeInstruction</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>TradeInstruction</code> class directly from <code>imperiumengine.dsl.instructions.trade</code>:</p>"},{"location":"reference/imperiumengine/dsl/instructions/trade/TradeInstruction/#usage","title":"Usage","text":"<pre><code>from imperiumengine.dsl.instructions.trade import TradeInstruction\n</code></pre> <p>               Bases: <code>Instruction</code></p> <p>Executa uma opera\u00e7\u00e3o de trade e registra os dados no contexto.</p> <p>Esta classe representa uma instru\u00e7\u00e3o que processa uma opera\u00e7\u00e3o de trade. Ao ser executada, os dados do trade s\u00e3o adicionados \u00e0 lista de trades presente nas vari\u00e1veis do contexto. Se a chave \"trades\" n\u00e3o existir no contexto, ela ser\u00e1 criada e inicializada como uma lista.</p> PARAMETER DESCRIPTION <p>Dicion\u00e1rio contendo os dados do trade. Geralmente, espera-se que contenha chaves como:   - \"action\": A a\u00e7\u00e3o do trade (por exemplo, \"buy\" ou \"sell\").   - \"symbol\": O s\u00edmbolo do ativo (por exemplo, \"AAPL\").   - \"quantity\": A quantidade a ser negociada.</p> <p> TYPE: <code>dict</code> </p> ATTRIBUTE DESCRIPTION <code>trade_data</code> <p>Armazena os dados do trade que ser\u00e3o processados.</p> <p> TYPE: <code>dict</code> </p> <code>logger</code> <p>Logger utilizado para registrar informa\u00e7\u00f5es, mensagens de debug e erros durante a execu\u00e7\u00e3o da instru\u00e7\u00e3o.</p> <p> TYPE: <code>Logger</code> </p> METHOD DESCRIPTION <code>execute</code> <p>Executa a instru\u00e7\u00e3o de trade, adicionando os dados do trade \u00e0 lista de trades presente no contexto.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from imperiumengine.dsl.context import Context\n&gt;&gt;&gt; from imperiumengine.dsl.instructions.trade import TradeInstruction\n&gt;&gt;&gt; # Cria\u00e7\u00e3o de um contexto simples com um dicion\u00e1rio de vari\u00e1veis\n&gt;&gt;&gt; context = Context()\n&gt;&gt;&gt; context.variables = {}\n&gt;&gt;&gt; # Dados do trade a ser executado\n&gt;&gt;&gt; trade_data = {\"action\": \"buy\", \"symbol\": \"AAPL\", \"quantity\": 100}\n&gt;&gt;&gt; # Cria\u00e7\u00e3o da instru\u00e7\u00e3o de trade\n&gt;&gt;&gt; trade_instr = TradeInstruction(trade_data)\n&gt;&gt;&gt; # Execu\u00e7\u00e3o da instru\u00e7\u00e3o de trade\n&gt;&gt;&gt; trade_instr.execute(context)\n&gt;&gt;&gt; # Verifica se os dados do trade foram adicionados ao contexto\n&gt;&gt;&gt; context.variables[\"trades\"]\n[{'action': 'buy', 'symbol': 'AAPL', 'quantity': 100}]\n</code></pre> <p>Inicializa a instru\u00e7\u00e3o de trade com os dados fornecidos.</p> PARAMETER DESCRIPTION <p>Dicion\u00e1rio contendo os dados do trade.</p> <p> TYPE: <code>dict</code> </p> Source code in <code>src/imperiumengine/dsl/instructions/trade.py</code> <pre><code>def __init__(self, trade_data: dict) -&gt; None:\n    \"\"\"\n    Inicializa a instru\u00e7\u00e3o de trade com os dados fornecidos.\n\n    Parameters\n    ----------\n    trade_data : dict\n        Dicion\u00e1rio contendo os dados do trade.\n    \"\"\"\n    self.trade_data = trade_data\n    self.logger = LogFactory.get_logger(self.__class__.__name__)\n    self.logger.info(\"TradeInstruction instance created with trade data: %s\", self.trade_data)\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/trade/TradeInstruction/#imperiumengine.dsl.instructions.trade.TradeInstruction(trade_data)","title":"<code>trade_data</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/trade/TradeInstruction/#imperiumengine.dsl.instructions.trade.TradeInstruction(trade_data)","title":"<code>trade_data</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/trade/TradeInstruction/#imperiumengine.dsl.instructions.trade.TradeInstruction-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/dsl/instructions/trade/TradeInstruction/#imperiumengine.dsl.instructions.trade.TradeInstruction.trade_data","title":"imperiumengine.dsl.instructions.trade.TradeInstruction.trade_data  <code>instance-attribute</code>","text":"<pre><code>trade_data = trade_data\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/trade/TradeInstruction/#imperiumengine.dsl.instructions.trade.TradeInstruction.logger","title":"imperiumengine.dsl.instructions.trade.TradeInstruction.logger  <code>instance-attribute</code>","text":"<pre><code>logger = get_logger(__name__)\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/trade/TradeInstruction/#imperiumengine.dsl.instructions.trade.TradeInstruction-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/dsl/instructions/trade/TradeInstruction/#imperiumengine.dsl.instructions.trade.TradeInstruction.execute","title":"imperiumengine.dsl.instructions.trade.TradeInstruction.execute","text":"<pre><code>execute(context)\n</code></pre> <p>Executa a instru\u00e7\u00e3o de trade, registrando os dados no contexto.</p> <p>O m\u00e9todo adiciona os dados do trade \u00e0 lista associada \u00e0 chave \"trades\" no dicion\u00e1rio de vari\u00e1veis do contexto. Se a chave n\u00e3o existir, ela \u00e9 criada com uma lista vazia.</p> PARAMETER DESCRIPTION <p>Objeto que cont\u00e9m o estado e as vari\u00e1veis necess\u00e1rias para a execu\u00e7\u00e3o da instru\u00e7\u00e3o.</p> <p> TYPE: <code>Context</code> </p> RAISES DESCRIPTION <code>RuntimeError</code> <p>Se ocorrer um erro inesperado durante a execu\u00e7\u00e3o da opera\u00e7\u00e3o de trade.</p> Source code in <code>src/imperiumengine/dsl/instructions/trade.py</code> <pre><code>def execute(self, context: Context) -&gt; None:\n    \"\"\"\n    Executa a instru\u00e7\u00e3o de trade, registrando os dados no contexto.\n\n    O m\u00e9todo adiciona os dados do trade \u00e0 lista associada \u00e0 chave \"trades\" no dicion\u00e1rio\n    de vari\u00e1veis do contexto. Se a chave n\u00e3o existir, ela \u00e9 criada com uma lista vazia.\n\n    Parameters\n    ----------\n    context : Context\n        Objeto que cont\u00e9m o estado e as vari\u00e1veis necess\u00e1rias para a execu\u00e7\u00e3o da instru\u00e7\u00e3o.\n\n    Raises\n    ------\n    RuntimeError\n        Se ocorrer um erro inesperado durante a execu\u00e7\u00e3o da opera\u00e7\u00e3o de trade.\n    \"\"\"\n    self.logger.debug(\"Starting trade execution: %s\", self.trade_data)\n\n    try:\n        trades = context.variables.setdefault(\"trades\", [])\n        trades.append(self.trade_data)\n        self.logger.info(\"Trade successfully executed: %s\", self.trade_data)\n\n    except Exception as e:\n        self.logger.exception(\"Unexpected error during trade execution: %s\", self.trade_data)\n        raise RuntimeError(f\"Unexpected error executing trade: {e}\")\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/trade/TradeInstruction/#imperiumengine.dsl.instructions.trade.TradeInstruction.execute(context)","title":"<code>context</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/wait_instruction/WaitInstruction/","title":"Class <code>WaitInstruction</code>","text":"<p>Here's the reference information for the <code>WaitInstruction</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>WaitInstruction</code> class directly from <code>imperiumengine.dsl.instructions.wait_instruction</code>:</p>"},{"location":"reference/imperiumengine/dsl/instructions/wait_instruction/WaitInstruction/#usage","title":"Usage","text":"<pre><code>from imperiumengine.dsl.instructions.wait_instruction import WaitInstruction\n</code></pre> <p>               Bases: <code>Instruction</code></p> <p>Instru\u00e7\u00e3o de espera que pausa a execu\u00e7\u00e3o por um determinado per\u00edodo.</p> <p>Esta instru\u00e7\u00e3o realiza uma pausa na execu\u00e7\u00e3o utilizando a fun\u00e7\u00e3o <code>time.sleep</code>. O tempo de espera pode ser especificado como um valor num\u00e9rico (int ou float) ou como uma string que contenha um valor num\u00e9rico seguido de uma unidade de tempo. As unidades suportadas s\u00e3o:   - 's' para segundos;   - 'm' para minutos;   - 'h' para horas.</p> <p>Se o valor de espera informado for inferior a {MIN_WAIT_LENGTH} segundos, o tempo de espera ser\u00e1 ajustado para {MIN_WAIT_LENGTH} segundos, garantindo uma pausa m\u00ednima.</p> PARAMETER DESCRIPTION <p>Valor que representa o tempo de espera. Se for num\u00e9rico, \u00e9 interpretado em segundos. Se for uma string, deve ser um n\u00famero seguido de uma unidade ('s', 'm' ou 'h'). Exemplos:   - 5 ou 5.0: 5 segundos;   - '3s': 3 segundos;   - '1.5m': 90 segundos;   - '0.5h': 1800 segundos.</p> <p> TYPE: <code>int, float ou str</code> </p> ATTRIBUTE DESCRIPTION <code>duration</code> <p>Dura\u00e7\u00e3o da espera em segundos, ap\u00f3s a convers\u00e3o e valida\u00e7\u00e3o.</p> <p> TYPE: <code>float</code> </p> <code>logger</code> <p>Logger utilizado para registrar mensagens, avisos e erros durante a execu\u00e7\u00e3o.</p> <p> TYPE: <code>Logger</code> </p> RAISES DESCRIPTION <code>DSLError</code> <p>Se a unidade de tempo na string for inv\u00e1lida (diferente de 's', 'm' ou 'h') ou se o formato for incorreto.</p> <code>TypeError</code> <p>Se o valor informado n\u00e3o for num\u00e9rico nem uma string com unidade.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import time\n&gt;&gt;&gt; from imperiumengine.dsl.context import Context\n&gt;&gt;&gt; context = Context()\n&gt;&gt;&gt; # Exemplo com valor num\u00e9rico inferior ao m\u00ednimo (1 segundo \u00e9 ajustado para 2 segundos)\n&gt;&gt;&gt; w = WaitInstruction(1)\n&gt;&gt;&gt; inicio = time.time()\n&gt;&gt;&gt; w.execute(context)\n&gt;&gt;&gt; elapsed = time.time() - inicio\n&gt;&gt;&gt; elapsed &gt;= 2\nTrue\n&gt;&gt;&gt; # Exemplo com string e unidade: '3s' para 3 segundos\n&gt;&gt;&gt; w2 = WaitInstruction(\"3s\")\n&gt;&gt;&gt; inicio = time.time()\n&gt;&gt;&gt; w2.execute(context)\n&gt;&gt;&gt; elapsed = time.time() - inicio\n&gt;&gt;&gt; elapsed &gt;= 3\nTrue\n</code></pre> <p>Inicializa a instru\u00e7\u00e3o de espera com a dura\u00e7\u00e3o especificada.</p> <p>Converte o valor informado para segundos, de acordo com o tipo e a unidade especificada. Caso o valor seja num\u00e9rico, ele \u00e9 interpretado diretamente como segundos. Se for uma string, o \u00faltimo caractere \u00e9 considerado a unidade de tempo e o restante \u00e9 convertido para float.</p> PARAMETER DESCRIPTION <p>Valor que representa o tempo de espera. Exemplos:   - 5 ou 5.0: 5 segundos;   - '3s': 3 segundos;   - '1.5m': 90 segundos;   - '0.5h': 1800 segundos.</p> <p> TYPE: <code>int, float ou str</code> </p> RAISES DESCRIPTION <code>DSLError</code> <p>Se a unidade de tempo na string for inv\u00e1lida (diferente de 's', 'm' ou 'h') ou se o formato for incorreto.</p> <code>TypeError</code> <p>Se o valor informado n\u00e3o for num\u00e9rico nem uma string com unidade.</p> Source code in <code>src/imperiumengine/dsl/instructions/wait_instruction.py</code> <pre><code>def __init__(self, duration: any) -&gt; None:\n    \"\"\"\n    Inicializa a instru\u00e7\u00e3o de espera com a dura\u00e7\u00e3o especificada.\n\n    Converte o valor informado para segundos, de acordo com o tipo e a unidade especificada.\n    Caso o valor seja num\u00e9rico, ele \u00e9 interpretado diretamente como segundos. Se for uma string,\n    o \u00faltimo caractere \u00e9 considerado a unidade de tempo e o restante \u00e9 convertido para float.\n\n    Parameters\n    ----------\n    duration : int, float ou str\n        Valor que representa o tempo de espera. Exemplos:\n          - 5 ou 5.0: 5 segundos;\n          - '3s': 3 segundos;\n          - '1.5m': 90 segundos;\n          - '0.5h': 1800 segundos.\n\n    Raises\n    ------\n    DSLError\n        Se a unidade de tempo na string for inv\u00e1lida (diferente de 's', 'm' ou 'h') ou se o\n        formato for incorreto.\n    TypeError\n        Se o valor informado n\u00e3o for num\u00e9rico nem uma string com unidade.\n    \"\"\"\n    self.logger = LogFactory.get_logger(self.__class__.__name__)\n\n    try:\n        if isinstance(duration, (int, float)):\n            self.duration = float(duration)\n        elif isinstance(duration, str):\n            unit = duration[-1].lower()\n            value = float(duration[:-1])\n            if unit == \"s\":\n                self.duration = value\n            elif unit == \"m\":\n                self.duration = value * 60\n            elif unit == \"h\":\n                self.duration = value * 3600\n            else:\n                self.logger.error(f\"Invalid wait unit '{unit}'. Use 's', 'm', or 'h'.\")\n                raise DSLError(\"Invalid wait unit. Use 's', 'm', or 'h'.\")\n        else:\n            self.logger.error(\n                f\"Wait value must be numeric or a string with a unit. Got: {type(duration)}\"\n            )\n            raise TypeError(\"Wait value must be numeric or a string with a unit.\")\n\n        # Garantir que a dura\u00e7\u00e3o seja v\u00e1lida (m\u00ednimo de espera)\n        if self.duration &lt; MIN_WAIT_LENGTH:\n            self.logger.warning(\n                f\"Wait duration {self.duration:.2f} is too short. Setting to minimum: {MIN_WAIT_LENGTH} seconds.\"\n            )\n            self.duration = MIN_WAIT_LENGTH\n\n        self.logger.info(f\"WaitInstruction created with duration: {self.duration:.2f} seconds\")\n\n    except ValueError as e:\n        self.logger.error(f\"Invalid wait value format: {duration}\")\n        raise DSLError(f\"Invalid wait value '{duration}': {e}\") from e\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/wait_instruction/WaitInstruction/#imperiumengine.dsl.instructions.wait_instruction.WaitInstruction(duration)","title":"<code>duration</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/wait_instruction/WaitInstruction/#imperiumengine.dsl.instructions.wait_instruction.WaitInstruction(duration)","title":"<code>duration</code>","text":""},{"location":"reference/imperiumengine/dsl/instructions/wait_instruction/WaitInstruction/#imperiumengine.dsl.instructions.wait_instruction.WaitInstruction-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/dsl/instructions/wait_instruction/WaitInstruction/#imperiumengine.dsl.instructions.wait_instruction.WaitInstruction.logger","title":"imperiumengine.dsl.instructions.wait_instruction.WaitInstruction.logger  <code>instance-attribute</code>","text":"<pre><code>logger = get_logger(__name__)\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/wait_instruction/WaitInstruction/#imperiumengine.dsl.instructions.wait_instruction.WaitInstruction.duration","title":"imperiumengine.dsl.instructions.wait_instruction.WaitInstruction.duration  <code>instance-attribute</code>","text":"<pre><code>duration = float(duration)\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/wait_instruction/WaitInstruction/#imperiumengine.dsl.instructions.wait_instruction.WaitInstruction-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/dsl/instructions/wait_instruction/WaitInstruction/#imperiumengine.dsl.instructions.wait_instruction.WaitInstruction.execute","title":"imperiumengine.dsl.instructions.wait_instruction.WaitInstruction.execute","text":"<pre><code>execute(context)\n</code></pre> <p>Executa a instru\u00e7\u00e3o de espera, pausando a execu\u00e7\u00e3o pelo per\u00edodo especificado.</p> <p>Este m\u00e9todo utiliza a fun\u00e7\u00e3o <code>time.sleep</code> para pausar a execu\u00e7\u00e3o por <code>self.duration</code> segundos. Durante a espera, mensagens de log s\u00e3o registradas para indicar o in\u00edcio e o t\u00e9rmino da opera\u00e7\u00e3o.</p> PARAMETER DESCRIPTION <p>Objeto que cont\u00e9m o estado e as vari\u00e1veis do contexto de execu\u00e7\u00e3o. Embora este m\u00e9todo n\u00e3o modifique o contexto, ele o utiliza para manter a consist\u00eancia na interface das instru\u00e7\u00f5es.</p> <p> TYPE: <code>Context</code> </p> RAISES DESCRIPTION <code>RuntimeError</code> <p>Se ocorrer um erro inesperado durante a execu\u00e7\u00e3o da espera.</p> Source code in <code>src/imperiumengine/dsl/instructions/wait_instruction.py</code> <pre><code>def execute(self, context: Context) -&gt; None:\n    \"\"\"\n    Executa a instru\u00e7\u00e3o de espera, pausando a execu\u00e7\u00e3o pelo per\u00edodo especificado.\n\n    Este m\u00e9todo utiliza a fun\u00e7\u00e3o `time.sleep` para pausar a execu\u00e7\u00e3o por `self.duration`\n    segundos. Durante a espera, mensagens de log s\u00e3o registradas para indicar o in\u00edcio e o\n    t\u00e9rmino da opera\u00e7\u00e3o.\n\n    Parameters\n    ----------\n    context : Context\n        Objeto que cont\u00e9m o estado e as vari\u00e1veis do contexto de execu\u00e7\u00e3o. Embora este m\u00e9todo\n        n\u00e3o modifique o contexto, ele o utiliza para manter a consist\u00eancia na interface das\n        instru\u00e7\u00f5es.\n\n    Raises\n    ------\n    RuntimeError\n        Se ocorrer um erro inesperado durante a execu\u00e7\u00e3o da espera.\n    \"\"\"\n    self.logger.info(f\"Waiting for {self.duration:.2f} seconds...\")\n\n    try:\n        time.sleep(self.duration)\n        self.logger.debug(\"Wait completed successfully.\")\n    except Exception as e:\n        self.logger.exception(\"Error during wait execution.\")\n        raise RuntimeError(f\"Unexpected error during wait: {e}\")\n</code></pre>"},{"location":"reference/imperiumengine/dsl/instructions/wait_instruction/WaitInstruction/#imperiumengine.dsl.instructions.wait_instruction.WaitInstruction.execute(context)","title":"<code>context</code>","text":""},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/","title":"Class <code>DSLInterpreter</code>","text":"<p>Here's the reference information for the <code>DSLInterpreter</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>DSLInterpreter</code> class directly from <code>imperiumengine.dsl.interpreter</code>:</p>"},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#usage","title":"Usage","text":"<pre><code>from imperiumengine.dsl.interpreter import DSLInterpreter\n</code></pre> <p>Interpreta a estrat\u00e9gia definida na DSL.</p> <p>Esta classe \u00e9 respons\u00e1vel por interpretar e executar uma estrat\u00e9gia definida por uma DSL. Ela gerencia o contexto de execu\u00e7\u00e3o, carrega os dados de mercado utilizando um provedor de dados e executa a instru\u00e7\u00e3o raiz da estrat\u00e9gia. Durante a execu\u00e7\u00e3o, mensagens de log s\u00e3o registradas para facilitar o monitoramento e a depura\u00e7\u00e3o.</p> PARAMETER DESCRIPTION <p>Instru\u00e7\u00e3o raiz que representa a estrat\u00e9gia a ser executada. Essa instru\u00e7\u00e3o deve ser uma inst\u00e2ncia de uma classe que implemente o m\u00e9todo <code>execute(context)</code>.</p> <p> TYPE: <code>Instruction</code> </p> <p>Provedor de dados de mercado que ser\u00e1 utilizado para carregar os dados necess\u00e1rios \u00e0 estrat\u00e9gia. Esse objeto deve implementar o m\u00e9todo <code>get_market_data(symbol, interval, limit)</code>.</p> <p> TYPE: <code>IMarketDataProvider</code> </p> ATTRIBUTE DESCRIPTION <code>logger</code> <p>Logger utilizado para registrar informa\u00e7\u00f5es, avisos e erros durante a execu\u00e7\u00e3o da estrat\u00e9gia.</p> <p> TYPE: <code>Logger</code> </p> <code>root_instruction</code> <p>Instru\u00e7\u00e3o raiz que define a estrat\u00e9gia DSL.</p> <p> TYPE: <code>Instruction</code> </p> <code>market_data_provider</code> <p>Inst\u00e2ncia do provedor de dados de mercado.</p> <p> TYPE: <code>IMarketDataProvider</code> </p> <code>context</code> <p>Contexto de execu\u00e7\u00e3o que armazena as vari\u00e1veis utilizadas durante a execu\u00e7\u00e3o da estrat\u00e9gia.</p> <p> TYPE: <code>Context</code> </p> METHOD DESCRIPTION <code>load_market_data</code> <p>Carrega os dados de mercado para um s\u00edmbolo espec\u00edfico, atualizando o contexto com os dados obtidos.</p> <code>run</code> <p>Executa a estrat\u00e9gia DSL chamando o m\u00e9todo <code>execute</code> da instru\u00e7\u00e3o raiz com o contexto atual.</p> <p>Examples:</p> <p>Inicializa o interpretador DSL com a instru\u00e7\u00e3o raiz e o provedor de dados de mercado.</p> PARAMETER DESCRIPTION <p>Instru\u00e7\u00e3o raiz que define a estrat\u00e9gia a ser executada.</p> <p> TYPE: <code>Instruction</code> </p> <p>Provedor de dados de mercado para carregar os dados necess\u00e1rios \u00e0 execu\u00e7\u00e3o da estrat\u00e9gia.</p> <p> TYPE: <code>IMarketDataProvider</code> </p> Source code in <code>src/imperiumengine/dsl/interpreter.py</code> <pre><code>def __init__(self, root_instruction, market_data_provider: IMarketDataProvider) -&gt; None:\n    \"\"\"\n\n    Inicializa o interpretador DSL com a instru\u00e7\u00e3o raiz e o provedor de dados de mercado.\n\n    Parameters\n    ----------\n    root_instruction : Instruction\n        Instru\u00e7\u00e3o raiz que define a estrat\u00e9gia a ser executada.\n    market_data_provider : IMarketDataProvider\n        Provedor de dados de mercado para carregar os dados necess\u00e1rios \u00e0 execu\u00e7\u00e3o da estrat\u00e9gia.\n    \"\"\"\n    self.logger = LogFactory.get_logger(self.__class__.__name__)\n    self.root_instruction = root_instruction\n    self.market_data_provider = market_data_provider\n    self.context = Context()\n\n    self.logger.info(\n        f\"DSLInterpreter initialized with root instruction: {type(root_instruction).__name__} \"\n        f\"and market data provider: {type(market_data_provider).__name__}\"\n    )\n</code></pre>"},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#imperiumengine.dsl.interpreter.DSLInterpreter(root_instruction)","title":"<code>root_instruction</code>","text":""},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#imperiumengine.dsl.interpreter.DSLInterpreter(market_data_provider)","title":"<code>market_data_provider</code>","text":""},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#imperiumengine.dsl.interpreter.DSLInterpreter(root_instruction)","title":"<code>root_instruction</code>","text":""},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#imperiumengine.dsl.interpreter.DSLInterpreter(market_data_provider)","title":"<code>market_data_provider</code>","text":""},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#imperiumengine.dsl.interpreter.DSLInterpreter-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#imperiumengine.dsl.interpreter.DSLInterpreter.logger","title":"imperiumengine.dsl.interpreter.DSLInterpreter.logger  <code>instance-attribute</code>","text":"<pre><code>logger = get_logger(__name__)\n</code></pre>"},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#imperiumengine.dsl.interpreter.DSLInterpreter.root_instruction","title":"imperiumengine.dsl.interpreter.DSLInterpreter.root_instruction  <code>instance-attribute</code>","text":"<pre><code>root_instruction = root_instruction\n</code></pre>"},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#imperiumengine.dsl.interpreter.DSLInterpreter.market_data_provider","title":"imperiumengine.dsl.interpreter.DSLInterpreter.market_data_provider  <code>instance-attribute</code>","text":"<pre><code>market_data_provider = market_data_provider\n</code></pre>"},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#imperiumengine.dsl.interpreter.DSLInterpreter.context","title":"imperiumengine.dsl.interpreter.DSLInterpreter.context  <code>instance-attribute</code>","text":"<pre><code>context = Context()\n</code></pre>"},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#imperiumengine.dsl.interpreter.DSLInterpreter-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#imperiumengine.dsl.interpreter.DSLInterpreter.load_market_data","title":"imperiumengine.dsl.interpreter.DSLInterpreter.load_market_data","text":"<pre><code>load_market_data(symbol, interval, limit)\n</code></pre> <p>Carrega os dados de mercado e atualiza o contexto.</p> <p>Utiliza o provedor de dados de mercado para obter os dados correspondentes ao s\u00edmbolo, intervalo e limite especificados. Ap\u00f3s obter os dados, o contexto de execu\u00e7\u00e3o \u00e9 atualizado com as informa\u00e7\u00f5es, permitindo que a estrat\u00e9gia utilize esses dados durante sua execu\u00e7\u00e3o.</p> PARAMETER DESCRIPTION <p>S\u00edmbolo do ativo (ex.: \"AAPL\") para o qual os dados de mercado ser\u00e3o carregados.</p> <p> TYPE: <code>str</code> </p> <p>Intervalo de tempo dos dados (ex.: \"1h\" para uma hora).</p> <p> TYPE: <code>str</code> </p> <p>N\u00famero m\u00e1ximo de registros de dados a serem carregados.</p> <p> TYPE: <code>int</code> </p> RAISES DESCRIPTION <code>DSLError</code> <p>Se ocorrer algum erro durante a obten\u00e7\u00e3o ou atualiza\u00e7\u00e3o dos dados de mercado.</p> Source code in <code>src/imperiumengine/dsl/interpreter.py</code> <pre><code>def load_market_data(self, symbol: str, interval: str, limit: int) -&gt; None:\n    \"\"\"\n    Carrega os dados de mercado e atualiza o contexto.\n\n    Utiliza o provedor de dados de mercado para obter os dados correspondentes ao s\u00edmbolo,\n    intervalo e limite especificados. Ap\u00f3s obter os dados, o contexto de execu\u00e7\u00e3o \u00e9 atualizado\n    com as informa\u00e7\u00f5es, permitindo que a estrat\u00e9gia utilize esses dados durante sua execu\u00e7\u00e3o.\n\n    Parameters\n    ----------\n    symbol : str\n        S\u00edmbolo do ativo (ex.: \"AAPL\") para o qual os dados de mercado ser\u00e3o carregados.\n    interval : str\n        Intervalo de tempo dos dados (ex.: \"1h\" para uma hora).\n    limit : int\n        N\u00famero m\u00e1ximo de registros de dados a serem carregados.\n\n    Raises\n    ------\n    DSLError\n        Se ocorrer algum erro durante a obten\u00e7\u00e3o ou atualiza\u00e7\u00e3o dos dados de mercado.\n    \"\"\"\n    try:\n        self.logger.info(\n            f\"Loading market data for symbol: {symbol}, interval: {interval}, limit: {limit}\"\n        )\n        market_data = self.market_data_provider.get_market_data(symbol, interval, limit)\n        self.context.update(market_data)\n        self.logger.info(\n            f\"Market data loaded successfully. {len(market_data)} records added to context.\"\n        )\n    except Exception as e:\n        self.logger.exception(\n            f\"Error loading market data for {symbol} at {interval} with limit {limit}\"\n        )\n        raise DSLError(f\"Failed to load market data: {e}\") from e\n</code></pre>"},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#imperiumengine.dsl.interpreter.DSLInterpreter.load_market_data(symbol)","title":"<code>symbol</code>","text":""},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#imperiumengine.dsl.interpreter.DSLInterpreter.load_market_data(interval)","title":"<code>interval</code>","text":""},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#imperiumengine.dsl.interpreter.DSLInterpreter.load_market_data(limit)","title":"<code>limit</code>","text":""},{"location":"reference/imperiumengine/dsl/interpreter/DSLInterpreter/#imperiumengine.dsl.interpreter.DSLInterpreter.run","title":"imperiumengine.dsl.interpreter.DSLInterpreter.run","text":"<pre><code>run()\n</code></pre> <p>Executa a estrat\u00e9gia DSL.</p> <p>Inicia a execu\u00e7\u00e3o da estrat\u00e9gia chamando o m\u00e9todo <code>execute</code> da instru\u00e7\u00e3o raiz com o contexto atual. Durante a execu\u00e7\u00e3o, mensagens de log s\u00e3o registradas para monitoramento e diagn\u00f3stico. Em caso de erros durante a execu\u00e7\u00e3o, as exce\u00e7\u00f5es s\u00e3o capturadas, logadas e relan\u00e7adas como <code>DSLError</code>.</p> RAISES DESCRIPTION <code>DSLError</code> <p>Se ocorrer um erro durante a execu\u00e7\u00e3o da estrat\u00e9gia.</p> Source code in <code>src/imperiumengine/dsl/interpreter.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"\n    Executa a estrat\u00e9gia DSL.\n\n    Inicia a execu\u00e7\u00e3o da estrat\u00e9gia chamando o m\u00e9todo `execute` da instru\u00e7\u00e3o raiz com o contexto\n    atual. Durante a execu\u00e7\u00e3o, mensagens de log s\u00e3o registradas para monitoramento e diagn\u00f3stico.\n    Em caso de erros durante a execu\u00e7\u00e3o, as exce\u00e7\u00f5es s\u00e3o capturadas, logadas e relan\u00e7adas como\n    `DSLError`.\n\n    Raises\n    ------\n    DSLError\n        Se ocorrer um erro durante a execu\u00e7\u00e3o da estrat\u00e9gia.\n    \"\"\"\n    try:\n        self.logger.info(\"Starting DSL strategy execution...\")\n        self.root_instruction.execute(self.context)\n        self.logger.info(\"DSL strategy executed successfully.\")\n    except DSLError as e:\n        self.logger.error(f\"DSL execution failed: {e}\")\n        raise\n    except Exception as e:\n        self.logger.exception(\"Unexpected error during strategy execution.\")\n        raise DSLError(f\"Unexpected error during strategy execution: {e}\") from e\n</code></pre>"},{"location":"reference/imperiumengine/dsl/market_data/BinanceMarketDataProvider/","title":"Class <code>BinanceMarketDataProvider</code>","text":"<p>Here's the reference information for the <code>BinanceMarketDataProvider</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>BinanceMarketDataProvider</code> class directly from <code>imperiumengine.dsl.market_data</code>:</p>"},{"location":"reference/imperiumengine/dsl/market_data/BinanceMarketDataProvider/#usage","title":"Usage","text":"<pre><code>from imperiumengine.dsl.market_data import BinanceMarketDataProvider\n</code></pre> <p>               Bases: <code>IMarketDataProvider</code></p> <p>Implementa\u00e7\u00e3o de provedor de dados de mercado utilizando a API da Binance.</p> <p>Esta classe utiliza a biblioteca <code>binance.client.Client</code> para se conectar \u00e0 API da Binance e obter os dados de mercado (klines) para um s\u00edmbolo espec\u00edfico. Os dados obtidos s\u00e3o processados para extrair as listas de pre\u00e7os de fechamento, m\u00e1xima e m\u00ednima.</p> PARAMETER DESCRIPTION <p>Chave de API para autentica\u00e7\u00e3o na Binance. Valor padr\u00e3o \u00e9 uma string vazia.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <p>Segredo da API para autentica\u00e7\u00e3o na Binance. Valor padr\u00e3o \u00e9 uma string vazia.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> ATTRIBUTE DESCRIPTION <code>client</code> <p>Inst\u00e2ncia do cliente Binance utilizada para obter os dados de mercado.</p> <p> TYPE: <code>Client</code> </p> <code>logger</code> <p>Logger utilizado para registrar informa\u00e7\u00f5es, avisos e erros durante a execu\u00e7\u00e3o.</p> <p> TYPE: <code>Logger</code> </p> METHOD DESCRIPTION <code>get_market_data</code> <p>Obt\u00e9m os dados de mercado (klines) para o s\u00edmbolo, intervalo e limite especificados e retorna um dicion\u00e1rio com listas de pre\u00e7os de fechamento, alta e baixa.</p> RAISES DESCRIPTION <code>DSLError</code> <p>Se ocorrer um erro durante a inicializa\u00e7\u00e3o do cliente ou na obten\u00e7\u00e3o dos dados de mercado.</p> <p>Inicializa a inst\u00e2ncia do BinanceMarketDataProvider.</p> <p>Tenta criar uma inst\u00e2ncia do cliente Binance utilizando as credenciais fornecidas. Caso ocorra algum erro durante a inicializa\u00e7\u00e3o, uma exce\u00e7\u00e3o <code>DSLError</code> \u00e9 lan\u00e7ada.</p> PARAMETER DESCRIPTION <p>Chave de API para autentica\u00e7\u00e3o na Binance. Valor padr\u00e3o \u00e9 uma string vazia.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <p>Segredo da API para autentica\u00e7\u00e3o na Binance. Valor padr\u00e3o \u00e9 uma string vazia.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> RAISES DESCRIPTION <code>DSLError</code> <p>Se ocorrer um erro ao inicializar o cliente da Binance.</p> Source code in <code>src/imperiumengine/dsl/market_data.py</code> <pre><code>def __init__(self, api_key: str = \"\", api_secret: str = \"\") -&gt; None:\n    \"\"\"\n    Inicializa a inst\u00e2ncia do BinanceMarketDataProvider.\n\n    Tenta criar uma inst\u00e2ncia do cliente Binance utilizando as credenciais fornecidas.\n    Caso ocorra algum erro durante a inicializa\u00e7\u00e3o, uma exce\u00e7\u00e3o `DSLError` \u00e9 lan\u00e7ada.\n\n    Parameters\n    ----------\n    api_key : str, optional\n        Chave de API para autentica\u00e7\u00e3o na Binance. Valor padr\u00e3o \u00e9 uma string vazia.\n    api_secret : str, optional\n        Segredo da API para autentica\u00e7\u00e3o na Binance. Valor padr\u00e3o \u00e9 uma string vazia.\n\n    Raises\n    ------\n    DSLError\n        Se ocorrer um erro ao inicializar o cliente da Binance.\n    \"\"\"\n    self.logger = LogFactory.get_logger(self.__class__.__name__)\n\n    try:\n        self.client = Client(api_key, api_secret)\n        self.logger.info(\"BinanceMarketDataProvider initialized successfully.\")\n    except Exception as e:\n        self.logger.exception(\"Failed to initialize Binance client.\")\n        raise DSLError(f\"Failed to initialize Binance client: {e}\") from e\n</code></pre>"},{"location":"reference/imperiumengine/dsl/market_data/BinanceMarketDataProvider/#imperiumengine.dsl.market_data.BinanceMarketDataProvider(api_key)","title":"<code>api_key</code>","text":""},{"location":"reference/imperiumengine/dsl/market_data/BinanceMarketDataProvider/#imperiumengine.dsl.market_data.BinanceMarketDataProvider(api_secret)","title":"<code>api_secret</code>","text":""},{"location":"reference/imperiumengine/dsl/market_data/BinanceMarketDataProvider/#imperiumengine.dsl.market_data.BinanceMarketDataProvider(api_key)","title":"<code>api_key</code>","text":""},{"location":"reference/imperiumengine/dsl/market_data/BinanceMarketDataProvider/#imperiumengine.dsl.market_data.BinanceMarketDataProvider(api_secret)","title":"<code>api_secret</code>","text":""},{"location":"reference/imperiumengine/dsl/market_data/BinanceMarketDataProvider/#imperiumengine.dsl.market_data.BinanceMarketDataProvider-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/dsl/market_data/BinanceMarketDataProvider/#imperiumengine.dsl.market_data.BinanceMarketDataProvider.logger","title":"imperiumengine.dsl.market_data.BinanceMarketDataProvider.logger  <code>instance-attribute</code>","text":"<pre><code>logger = get_logger(__name__)\n</code></pre>"},{"location":"reference/imperiumengine/dsl/market_data/BinanceMarketDataProvider/#imperiumengine.dsl.market_data.BinanceMarketDataProvider.client","title":"imperiumengine.dsl.market_data.BinanceMarketDataProvider.client  <code>instance-attribute</code>","text":"<pre><code>client = Client(api_key, api_secret)\n</code></pre>"},{"location":"reference/imperiumengine/dsl/market_data/BinanceMarketDataProvider/#imperiumengine.dsl.market_data.BinanceMarketDataProvider-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/dsl/market_data/BinanceMarketDataProvider/#imperiumengine.dsl.market_data.BinanceMarketDataProvider.get_market_data","title":"imperiumengine.dsl.market_data.BinanceMarketDataProvider.get_market_data","text":"<pre><code>get_market_data(symbol, interval, limit)\n</code></pre> <p>Obt\u00e9m os dados de mercado para um s\u00edmbolo utilizando a API da Binance.</p> <p>Este m\u00e9todo utiliza o cliente Binance para buscar os dados de mercado (klines) para o s\u00edmbolo especificado, em um intervalo de tempo definido e com um limite de registros. A partir dos klines, s\u00e3o extra\u00eddas as listas de pre\u00e7os de fechamento, m\u00e1xima e m\u00ednima.</p> PARAMETER DESCRIPTION <p>S\u00edmbolo do ativo para o qual os dados ser\u00e3o obtidos (ex.: \"BTCUSDT\").</p> <p> TYPE: <code>str</code> </p> <p>Intervalo de tempo dos dados (ex.: \"1h\" para uma hora, \"1d\" para um dia).</p> <p> TYPE: <code>str</code> </p> <p>N\u00famero m\u00e1ximo de registros de dados a serem retornados.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>dict[str, any]</code> <p>Dicion\u00e1rio contendo os dados de mercado com as seguintes chaves:     - \"close\": lista de pre\u00e7os de fechamento.     - \"high\": lista de pre\u00e7os m\u00e1ximos.     - \"low\": lista de pre\u00e7os m\u00ednimos.</p> RAISES DESCRIPTION <code>DSLError</code> <p>Se ocorrer um erro ao obter os dados de mercado da Binance.</p> Source code in <code>src/imperiumengine/dsl/market_data.py</code> <pre><code>def get_market_data(self, symbol: str, interval: str, limit: int) -&gt; dict[str, any]:\n    \"\"\"\n    Obt\u00e9m os dados de mercado para um s\u00edmbolo utilizando a API da Binance.\n\n    Este m\u00e9todo utiliza o cliente Binance para buscar os dados de mercado (klines) para o s\u00edmbolo\n    especificado, em um intervalo de tempo definido e com um limite de registros. A partir dos\n    klines, s\u00e3o extra\u00eddas as listas de pre\u00e7os de fechamento, m\u00e1xima e m\u00ednima.\n\n    Parameters\n    ----------\n    symbol : str\n        S\u00edmbolo do ativo para o qual os dados ser\u00e3o obtidos (ex.: \"BTCUSDT\").\n    interval : str\n        Intervalo de tempo dos dados (ex.: \"1h\" para uma hora, \"1d\" para um dia).\n    limit : int\n        N\u00famero m\u00e1ximo de registros de dados a serem retornados.\n\n    Returns\n    -------\n    dict[str, any]\n        Dicion\u00e1rio contendo os dados de mercado com as seguintes chaves:\n            - \"close\": lista de pre\u00e7os de fechamento.\n            - \"high\": lista de pre\u00e7os m\u00e1ximos.\n            - \"low\": lista de pre\u00e7os m\u00ednimos.\n\n    Raises\n    ------\n    DSLError\n        Se ocorrer um erro ao obter os dados de mercado da Binance.\n    \"\"\"\n    self.logger.info(f\"Fetching market data for {symbol}, interval {interval}, limit {limit}\")\n\n    try:\n        klines = self.client.get_klines(symbol=symbol, interval=interval, limit=limit)\n        close_prices = [float(kline[4]) for kline in klines]\n        high_prices = [float(kline[2]) for kline in klines]\n        low_prices = [float(kline[3]) for kline in klines]\n\n        self.logger.info(\n            f\"Successfully retrieved {len(close_prices)} price entries for {symbol}\"\n        )\n\n        return {\"close\": close_prices, \"high\": high_prices, \"low\": low_prices}\n\n    except Exception as e:\n        self.logger.exception(\n            f\"Error obtaining market data from Binance for {symbol}, interval {interval}\"\n        )\n        raise DSLError(f\"Error obtaining market data: {e}\") from e\n</code></pre>"},{"location":"reference/imperiumengine/dsl/market_data/BinanceMarketDataProvider/#imperiumengine.dsl.market_data.BinanceMarketDataProvider.get_market_data(symbol)","title":"<code>symbol</code>","text":""},{"location":"reference/imperiumengine/dsl/market_data/BinanceMarketDataProvider/#imperiumengine.dsl.market_data.BinanceMarketDataProvider.get_market_data(interval)","title":"<code>interval</code>","text":""},{"location":"reference/imperiumengine/dsl/market_data/BinanceMarketDataProvider/#imperiumengine.dsl.market_data.BinanceMarketDataProvider.get_market_data(limit)","title":"<code>limit</code>","text":""},{"location":"reference/imperiumengine/dsl/market_data/IMarketDataProvider/","title":"Class <code>IMarketDataProvider</code>","text":"<p>Here's the reference information for the <code>IMarketDataProvider</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>IMarketDataProvider</code> class directly from <code>imperiumengine.dsl.market_data</code>:</p>"},{"location":"reference/imperiumengine/dsl/market_data/IMarketDataProvider/#usage","title":"Usage","text":"<pre><code>from imperiumengine.dsl.market_data import IMarketDataProvider\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Interface para provedores de dados de mercado.</p> <p>Esta interface define o contrato que deve ser implementado por qualquer classe que forne\u00e7a dados de mercado para a estrat\u00e9gia DSL. A implementa\u00e7\u00e3o deve fornecer o m\u00e9todo <code>get_market_data</code>, que obt\u00e9m os dados de mercado para um determinado s\u00edmbolo, intervalo e quantidade m\u00e1xima de registros.</p> METHOD DESCRIPTION <code>get_market_data</code> <p>Obt\u00e9m os dados de mercado para o s\u00edmbolo, intervalo e limite especificados.</p> RAISES DESCRIPTION <code>DSLError</code> <p>Se ocorrer um erro durante a obten\u00e7\u00e3o dos dados de mercado.</p>"},{"location":"reference/imperiumengine/dsl/market_data/IMarketDataProvider/#imperiumengine.dsl.market_data.IMarketDataProvider-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/dsl/market_data/IMarketDataProvider/#imperiumengine.dsl.market_data.IMarketDataProvider.get_market_data","title":"imperiumengine.dsl.market_data.IMarketDataProvider.get_market_data  <code>abstractmethod</code>","text":"<pre><code>get_market_data(symbol, interval, limit)\n</code></pre> <p>Obt\u00e9m os dados de mercado para o s\u00edmbolo, intervalo e limite especificados.</p> PARAMETER DESCRIPTION <p>S\u00edmbolo do ativo para o qual os dados de mercado ser\u00e3o obtidos (ex.: \"BTCUSDT\").</p> <p> TYPE: <code>str</code> </p> <p>Intervalo de tempo para os dados de mercado (ex.: \"1h\", \"1d\").</p> <p> TYPE: <code>str</code> </p> <p>N\u00famero m\u00e1ximo de registros de dados a serem retornados.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>dict[str, any]</code> <p>Dicion\u00e1rio contendo os dados de mercado. A estrutura do dicion\u00e1rio depender\u00e1 da implementa\u00e7\u00e3o, mas normalmente inclui listas de pre\u00e7os de fechamento, m\u00e1xima e m\u00ednima.</p> RAISES DESCRIPTION <code>DSLError</code> <p>Se ocorrer um erro na obten\u00e7\u00e3o dos dados de mercado.</p> Source code in <code>src/imperiumengine/dsl/market_data.py</code> <pre><code>@abstractmethod\ndef get_market_data(self, symbol: str, interval: str, limit: int) -&gt; dict[str, any]:\n    \"\"\"\n    Obt\u00e9m os dados de mercado para o s\u00edmbolo, intervalo e limite especificados.\n\n    Parameters\n    ----------\n    symbol : str\n        S\u00edmbolo do ativo para o qual os dados de mercado ser\u00e3o obtidos (ex.: \"BTCUSDT\").\n    interval : str\n        Intervalo de tempo para os dados de mercado (ex.: \"1h\", \"1d\").\n    limit : int\n        N\u00famero m\u00e1ximo de registros de dados a serem retornados.\n\n    Returns\n    -------\n    dict[str, any]\n        Dicion\u00e1rio contendo os dados de mercado. A estrutura do dicion\u00e1rio depender\u00e1 da implementa\u00e7\u00e3o,\n        mas normalmente inclui listas de pre\u00e7os de fechamento, m\u00e1xima e m\u00ednima.\n\n    Raises\n    ------\n    DSLError\n        Se ocorrer um erro na obten\u00e7\u00e3o dos dados de mercado.\n    \"\"\"\n</code></pre>"},{"location":"reference/imperiumengine/dsl/market_data/IMarketDataProvider/#imperiumengine.dsl.market_data.IMarketDataProvider.get_market_data(symbol)","title":"<code>symbol</code>","text":""},{"location":"reference/imperiumengine/dsl/market_data/IMarketDataProvider/#imperiumengine.dsl.market_data.IMarketDataProvider.get_market_data(interval)","title":"<code>interval</code>","text":""},{"location":"reference/imperiumengine/dsl/market_data/IMarketDataProvider/#imperiumengine.dsl.market_data.IMarketDataProvider.get_market_data(limit)","title":"<code>limit</code>","text":""},{"location":"reference/imperiumengine/dsl/parser/DSLParser/","title":"Class <code>DSLParser</code>","text":"<p>Here's the reference information for the <code>DSLParser</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>DSLParser</code> class directly from <code>imperiumengine.dsl.parser</code>:</p>"},{"location":"reference/imperiumengine/dsl/parser/DSLParser/#usage","title":"Usage","text":"<pre><code>from imperiumengine.dsl.parser import DSLParser\n</code></pre> <p>Analisa uma lista de dicion\u00e1rios de instru\u00e7\u00f5es e gera um CompoundInstruction.</p> <p>Esta classe \u00e9 respons\u00e1vel por converter uma lista de dicion\u00e1rios que representam instru\u00e7\u00f5es da DSL em uma inst\u00e2ncia de CompoundInstruction. Durante o processo de parsing, s\u00e3o identificados diferentes tipos de instru\u00e7\u00f5es (como \"if\", \"operation\", \"indicator\", \"trade\", \"wait\") e utilizadas as respectivas classes de instru\u00e7\u00e3o para sua representa\u00e7\u00e3o. Blocos condicionais s\u00e3o processados de forma recursiva, e a presen\u00e7a de instru\u00e7\u00f5es \"end\" \u00e9 utilizada para delimitar o fim de um bloco \"if\".</p> <p>Se, ao final do parsing, houver instru\u00e7\u00f5es n\u00e3o processadas ou se um bloco condicional n\u00e3o for devidamente fechado, uma exce\u00e7\u00e3o DSLError \u00e9 levantada.</p> ATTRIBUTE DESCRIPTION <code>logger</code> <p>Logger utilizado para registrar mensagens de informa\u00e7\u00e3o, debug e avisos durante o parsing. Definido como atributo de classe.</p> <p> TYPE: <code>Logger</code> </p> METHOD DESCRIPTION <code>parse</code> <p>Converte uma lista completa de instru\u00e7\u00f5es em um CompoundInstruction.</p> <code>_parse_block</code> <p>Processa recursivamente um bloco de instru\u00e7\u00f5es a partir do \u00edndice especificado, retornando o CompoundInstruction resultante e o \u00edndice do final do bloco.</p> RAISES DESCRIPTION <code>DSLError</code> <p>Se houver instru\u00e7\u00f5es n\u00e3o processadas ap\u00f3s o parsing ou se um bloco iniciado com \"if\" n\u00e3o for fechado com \"end\".</p> <p>Examples:</p> <p>Um exemplo simples de parsing com uma \u00fanica instru\u00e7\u00e3o de opera\u00e7\u00e3o:</p> <pre><code>&gt;&gt;&gt; instructions = [{\"operation\": \"x = 1\"}]\n&gt;&gt;&gt; compound = DSLParser.parse(instructions)\n&gt;&gt;&gt; compound.instructions[0].__class__.__name__\n'OperationInstruction'\n</code></pre> <p>Inicializa uma inst\u00e2ncia de DSLParser.</p> <p>Registra a inicializa\u00e7\u00e3o do parser por meio do logger.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; parser = DSLParser()\n&gt;&gt;&gt; isinstance(parser, DSLParser)\nTrue\n</code></pre> Source code in <code>src/imperiumengine/dsl/parser.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Inicializa uma inst\u00e2ncia de DSLParser.\n\n    Registra a inicializa\u00e7\u00e3o do parser por meio do logger.\n\n    Examples\n    --------\n    &gt;&gt;&gt; parser = DSLParser()\n    &gt;&gt;&gt; isinstance(parser, DSLParser)\n    True\n    \"\"\"\n    self.logger.info(\"DSLParser initialized.\")\n</code></pre>"},{"location":"reference/imperiumengine/dsl/parser/DSLParser/#imperiumengine.dsl.parser.DSLParser-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/dsl/parser/DSLParser/#imperiumengine.dsl.parser.DSLParser.logger","title":"imperiumengine.dsl.parser.DSLParser.logger  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>logger = get_logger('DSLParser')\n</code></pre>"},{"location":"reference/imperiumengine/dsl/parser/DSLParser/#imperiumengine.dsl.parser.DSLParser-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/dsl/parser/DSLParser/#imperiumengine.dsl.parser.DSLParser.parse","title":"imperiumengine.dsl.parser.DSLParser.parse  <code>staticmethod</code>","text":"<pre><code>parse(instructions_list)\n</code></pre> <p>Converte uma lista de instru\u00e7\u00f5es em um CompoundInstruction.</p> <p>Este m\u00e9todo inicia o processo de parsing para a lista completa de instru\u00e7\u00f5es da estrat\u00e9gia. Ele chama o m\u00e9todo auxiliar _parse_block para processar recursivamente as instru\u00e7\u00f5es e, ao final, verifica se todas as instru\u00e7\u00f5es foram processadas. Caso contr\u00e1rio, uma exce\u00e7\u00e3o DSLError \u00e9 levantada.</p> PARAMETER DESCRIPTION <p>Lista de dicion\u00e1rios onde cada dicion\u00e1rio representa uma instru\u00e7\u00e3o da DSL. As chaves dos dicion\u00e1rios podem incluir \"if\", \"operation\", \"indicator\", \"trade\", \"wait\" e \"end\".</p> <p> TYPE: <code>list of dict[str, Any]</code> </p> RETURNS DESCRIPTION <code>CompoundInstruction</code> <p>Uma inst\u00e2ncia de CompoundInstruction contendo todas as instru\u00e7\u00f5es analisadas.</p> RAISES DESCRIPTION <code>DSLError</code> <p>Se houver instru\u00e7\u00f5es n\u00e3o processadas ap\u00f3s o parsing.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; instructions = [{\"operation\": \"x = 1\"}]\n&gt;&gt;&gt; compound = DSLParser.parse(instructions)\n&gt;&gt;&gt; compound.instructions[0].__class__.__name__\n'OperationInstruction'\n</code></pre> Source code in <code>src/imperiumengine/dsl/parser.py</code> <pre><code>@staticmethod\ndef parse(instructions_list: list[dict[str, Any]]) -&gt; CompoundInstruction:\n    \"\"\"\n    Converte uma lista de instru\u00e7\u00f5es em um CompoundInstruction.\n\n    Este m\u00e9todo inicia o processo de parsing para a lista completa de instru\u00e7\u00f5es da estrat\u00e9gia.\n    Ele chama o m\u00e9todo auxiliar _parse_block para processar recursivamente as instru\u00e7\u00f5es e,\n    ao final, verifica se todas as instru\u00e7\u00f5es foram processadas. Caso contr\u00e1rio, uma exce\u00e7\u00e3o\n    DSLError \u00e9 levantada.\n\n    Parameters\n    ----------\n    instructions_list : list of dict[str, Any]\n        Lista de dicion\u00e1rios onde cada dicion\u00e1rio representa uma instru\u00e7\u00e3o da DSL. As chaves dos\n        dicion\u00e1rios podem incluir \"if\", \"operation\", \"indicator\", \"trade\", \"wait\" e \"end\".\n\n    Returns\n    -------\n    CompoundInstruction\n        Uma inst\u00e2ncia de CompoundInstruction contendo todas as instru\u00e7\u00f5es analisadas.\n\n    Raises\n    ------\n    DSLError\n        Se houver instru\u00e7\u00f5es n\u00e3o processadas ap\u00f3s o parsing.\n\n    Examples\n    --------\n    &gt;&gt;&gt; instructions = [{\"operation\": \"x = 1\"}]\n    &gt;&gt;&gt; compound = DSLParser.parse(instructions)\n    &gt;&gt;&gt; compound.instructions[0].__class__.__name__\n    'OperationInstruction'\n    \"\"\"\n    DSLParser.logger.info(f\"Starting DSL parsing for {len(instructions_list)} instructions.\")\n\n    compound, index = DSLParser._parse_block(instructions_list, 0, stop_at_end=False)\n\n    if index != len(instructions_list):\n        raise DSLError(\"Excesso de instru\u00e7\u00f5es n\u00e3o processadas.\")\n\n    DSLParser.logger.info(\"DSL parsing completed successfully.\")\n    return compound\n</code></pre>"},{"location":"reference/imperiumengine/dsl/parser/DSLParser/#imperiumengine.dsl.parser.DSLParser.parse(instructions_list)","title":"<code>instructions_list</code>","text":""},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/","title":"Class <code>StrategyValidator</code>","text":"<p>Here's the reference information for the <code>StrategyValidator</code> class, with all its parameters, attributes, and methods.</p> <p>You can import the <code>StrategyValidator</code> class directly from <code>imperiumengine.dsl.validators</code>:</p>"},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#usage","title":"Usage","text":"<pre><code>from imperiumengine.dsl.validators import StrategyValidator\n</code></pre> <p>Valida as instru\u00e7\u00f5es de estrat\u00e9gia definidas na DSL.</p> <p>Esta classe processa uma lista de instru\u00e7\u00f5es (cada instru\u00e7\u00e3o \u00e9 um dicion\u00e1rio) que definem uma estrat\u00e9gia de trading em uma linguagem espec\u00edfica (DSL). Ela realiza valida\u00e7\u00f5es tanto estruturais quanto sint\u00e1ticas, tais como:</p> <ul> <li>Verificar se cada instru\u00e7\u00e3o \u00e9 um dicion\u00e1rio com uma \u00fanica chave representando o tipo da     instru\u00e7\u00e3o.</li> <li>Validar instru\u00e7\u00f5es condicionais (\"if\") conferindo se a condi\u00e7\u00e3o \u00e9 uma string e se pode ser     interpretada como uma express\u00e3o Python v\u00e1lida.</li> <li>Processar recursivamente blocos aninhados para assegurar que cada \"if\" seja corretamente     fechado por um \"end\".</li> <li>Verificar que as instru\u00e7\u00f5es \"operation\" cont\u00eam c\u00f3digo Python v\u00e1lido.</li> <li>Confirmar que as instru\u00e7\u00f5es \"indicator\" incluem as chaves obrigat\u00f3rias e que o indicador     informado \u00e9 suportado.</li> <li>Validar que as instru\u00e7\u00f5es \"trade\" possuam os detalhes necess\u00e1rios, garantindo que a a\u00e7\u00e3o     seja \"buy\" ou \"sell\".</li> <li>Validar que as instru\u00e7\u00f5es \"wait\" tenham o tempo de espera definido de forma num\u00e9rica ou     como string formatada com unidade de tempo (segundos 's', minutos 'm' ou horas 'h').</li> </ul> <p>Todas as mensagens de erro s\u00e3o registradas via logger e acumuladas em uma lista de erros em n\u00edvel de classe. Dessa forma, mesmo que os m\u00e9todos sejam chamados de forma est\u00e1tica (como ocorre no DSLParser), os erros ser\u00e3o corretamente acumulados.</p> ATTRIBUTE DESCRIPTION <code>SUPPORTED_INDICATORS</code> <p>Conjunto de indicadores suportados. Atualmente, s\u00e3o suportados: {\"SMA\", \"EMA\", \"ATR\", \"BollingerBands\", \"MACD\", \"RSI\"}.</p> <p> TYPE: <code>set</code> </p> <code>errors</code> <p>Lista acumulada de mensagens de erro.</p> <p> TYPE: <code>list of str (atributo de classe)</code> </p> <code>logger</code> <p>Inst\u00e2ncia do logger utilizada para registrar informa\u00e7\u00f5es, avisos e erros.</p> <p> TYPE: <code>Logger</code> </p> METHOD DESCRIPTION <code>validate</code> <p>Inicia o processo de valida\u00e7\u00e3o das instru\u00e7\u00f5es da estrat\u00e9gia.</p> <code>_validate_block</code> <p>Processa recursivamente um bloco de instru\u00e7\u00f5es, tratando o emparelhamento de \"if\" e \"end\".</p> <code>validate_if</code> <p>Valida a instru\u00e7\u00e3o \"if\" verificando se a condi\u00e7\u00e3o \u00e9 uma string e uma express\u00e3o Python v\u00e1lida.</p> <code>validate_operation</code> <p>Valida a instru\u00e7\u00e3o \"operation\", assegurando que o c\u00f3digo seja uma string e v\u00e1lido.</p> <code>validate_indicator</code> <p>Valida a instru\u00e7\u00e3o \"indicator\", verificando a exist\u00eancia das chaves necess\u00e1rias e se o indicador \u00e9 suportado.</p> <code>validate_trade</code> <p>Valida a instru\u00e7\u00e3o \"trade\", garantindo que os dados de trade estejam completos e corretos.</p> <code>validate_wait</code> <p>Valida a instru\u00e7\u00e3o \"wait\", verificando se o tempo de espera est\u00e1 no formato correto.</p> <code>append_error</code> <p>Registra uma mensagem de erro via logger e a adiciona \u00e0 lista de erros.</p> <p>Examples:</p> <p>Um exemplo de estrat\u00e9gia v\u00e1lida com bloco condicional e trade:</p> <pre><code>&gt;&gt;&gt; instructions = [\n...     {\"if\": \"price &gt; 100\"},\n...     {\"operation\": \"execute_trade()\"},\n...     {\"end\": True},\n...     {\"trade\": {\"action\": \"buy\", \"symbol\": \"AAPL\", \"quantity\": 10}},\n... ]\n&gt;&gt;&gt; validator = StrategyValidator(instructions)\n&gt;&gt;&gt; is_valid, errs = validator.validate()\n&gt;&gt;&gt; is_valid\nTrue\n&gt;&gt;&gt; errs\n[]\n</code></pre> <p>Um exemplo de estrat\u00e9gia inv\u00e1lida, com condi\u00e7\u00e3o do \"if\" n\u00e3o sendo uma string:</p> <pre><code>&gt;&gt;&gt; instructions = [{\"if\": 123}]\n&gt;&gt;&gt; validator = StrategyValidator(instructions)\n&gt;&gt;&gt; is_valid, errs = validator.validate()\n&gt;&gt;&gt; is_valid\nFalse\n&gt;&gt;&gt; any(\"condition must be a string\" in err for err in errs)\nTrue\n</code></pre> <p>Inicializa o StrategyValidator com uma lista de instru\u00e7\u00f5es da estrat\u00e9gia.</p> PARAMETER DESCRIPTION <p>Lista onde cada elemento \u00e9 um dicion\u00e1rio representando uma instru\u00e7\u00e3o da DSL.</p> <p> TYPE: <code>list of dict</code> </p> Source code in <code>src/imperiumengine/dsl/validators.py</code> <pre><code>def __init__(self, instructions_list: list[dict]) -&gt; None:\n    \"\"\"\n    Inicializa o StrategyValidator com uma lista de instru\u00e7\u00f5es da estrat\u00e9gia.\n\n    Parameters\n    ----------\n    instructions_list : list of dict\n        Lista onde cada elemento \u00e9 um dicion\u00e1rio representando uma instru\u00e7\u00e3o da DSL.\n    \"\"\"\n    self.instructions = instructions_list\n    StrategyValidator.errors = []  # Reinicia a lista de erros\n    StrategyValidator.logger.info(\"StrategyValidator initialized.\")\n</code></pre>"},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator(instructions_list)","title":"<code>instructions_list</code>","text":""},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator-attributes","title":"Attributes","text":""},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.SUPPORTED_INDICATORS","title":"imperiumengine.dsl.validators.StrategyValidator.SUPPORTED_INDICATORS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SUPPORTED_INDICATORS = {'SMA', 'EMA', 'ATR', 'BollingerBands', 'MACD', 'RSI'}\n</code></pre>"},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.errors","title":"imperiumengine.dsl.validators.StrategyValidator.errors  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>errors = []\n</code></pre>"},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.logger","title":"imperiumengine.dsl.validators.StrategyValidator.logger  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>logger = get_logger('StrategyValidator')\n</code></pre>"},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.instructions","title":"imperiumengine.dsl.validators.StrategyValidator.instructions  <code>instance-attribute</code>","text":"<pre><code>instructions = instructions_list\n</code></pre>"},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator-functions","title":"Functions","text":""},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate","title":"imperiumengine.dsl.validators.StrategyValidator.validate","text":"<pre><code>validate()\n</code></pre> <p>Valida as instru\u00e7\u00f5es da estrat\u00e9gia.</p> <p>Percorre a lista de instru\u00e7\u00f5es, processando cada uma conforme seu tipo e utilizando processamento recursivo para blocos condicionais.</p> RETURNS DESCRIPTION <code>tuple of (bool, list of str)</code> <p>Uma tupla em que o primeiro elemento \u00e9 True se a estrat\u00e9gia for v\u00e1lida (ou seja, se nenhuma inconsist\u00eancia for encontrada) e o segundo elemento \u00e9 a lista de mensagens de erro acumuladas.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; instructions = [\n...     {\"if\": \"x &gt; 0\"},\n...     {\"operation\": \"x += 1\"},\n...     {\"end\": True},\n... ]\n&gt;&gt;&gt; validator = StrategyValidator(instructions)\n&gt;&gt;&gt; valid, errs = validator.validate()\n&gt;&gt;&gt; valid\nTrue\n</code></pre> Source code in <code>src/imperiumengine/dsl/validators.py</code> <pre><code>def validate(self) -&gt; tuple[bool, list[str]]:\n    \"\"\"\n    Valida as instru\u00e7\u00f5es da estrat\u00e9gia.\n\n    Percorre a lista de instru\u00e7\u00f5es, processando cada uma conforme seu tipo e utilizando\n    processamento recursivo para blocos condicionais.\n\n    Returns\n    -------\n    tuple of (bool, list of str)\n        Uma tupla em que o primeiro elemento \u00e9 True se a estrat\u00e9gia for v\u00e1lida (ou seja, se\n        nenhuma inconsist\u00eancia for encontrada) e o segundo elemento \u00e9 a lista de mensagens de erro\n        acumuladas.\n\n    Examples\n    --------\n    &gt;&gt;&gt; instructions = [\n    ...     {\"if\": \"x &gt; 0\"},\n    ...     {\"operation\": \"x += 1\"},\n    ...     {\"end\": True},\n    ... ]\n    &gt;&gt;&gt; validator = StrategyValidator(instructions)\n    &gt;&gt;&gt; valid, errs = validator.validate()\n    &gt;&gt;&gt; valid\n    True\n    \"\"\"\n    StrategyValidator.logger.info(\"Starting strategy validation...\")\n    # Inicia a valida\u00e7\u00e3o do bloco principal (n\u00edvel superior), sem esperar \"end\"\n    self._validate_block(self.instructions, 0, stop_at_end=False)\n    is_valid = len(StrategyValidator.errors) == 0\n    if is_valid:\n        StrategyValidator.logger.info(\"Strategy validation completed successfully.\")\n    else:\n        StrategyValidator.logger.error(\n            f\"Strategy validation failed with {len(StrategyValidator.errors)} errors.\"\n        )\n    return is_valid, StrategyValidator.errors\n</code></pre>"},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate_if","title":"imperiumengine.dsl.validators.StrategyValidator.validate_if  <code>staticmethod</code>","text":"<pre><code>validate_if(instr, index)\n</code></pre> <p>Valida a instru\u00e7\u00e3o \"if\".</p> <p>Verifica se a condi\u00e7\u00e3o associada \u00e0 chave \"if\" \u00e9 uma string e se pode ser interpretada como uma express\u00e3o Python v\u00e1lida.</p> PARAMETER DESCRIPTION <p>Dicion\u00e1rio que cont\u00e9m a instru\u00e7\u00e3o \"if\".</p> <p> TYPE: <code>dict</code> </p> <p>Posi\u00e7\u00e3o da instru\u00e7\u00e3o na lista.</p> <p> TYPE: <code>int</code> </p> Source code in <code>src/imperiumengine/dsl/validators.py</code> <pre><code>@staticmethod\ndef validate_if(instr: dict, index: int) -&gt; None:\n    \"\"\"\n    Valida a instru\u00e7\u00e3o \"if\".\n\n    Verifica se a condi\u00e7\u00e3o associada \u00e0 chave \"if\" \u00e9 uma string e se pode ser interpretada\n    como uma express\u00e3o Python v\u00e1lida.\n\n    Parameters\n    ----------\n    instr : dict\n        Dicion\u00e1rio que cont\u00e9m a instru\u00e7\u00e3o \"if\".\n    index : int\n        Posi\u00e7\u00e3o da instru\u00e7\u00e3o na lista.\n    \"\"\"\n    condition = instr[\"if\"]\n    if not isinstance(condition, str):\n        message = f\"Error at 'if' at position {index}: condition must be a string.\"\n        StrategyValidator.append_error(message)\n    else:\n        try:\n            ast.parse(condition, mode=\"eval\")\n        except Exception as e:\n            StrategyValidator.append_error(\n                f\"Error in condition '{condition}' at position {index}: {e}\"\n            )\n</code></pre>"},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate_if(instr)","title":"<code>instr</code>","text":""},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate_if(index)","title":"<code>index</code>","text":""},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate_operation","title":"imperiumengine.dsl.validators.StrategyValidator.validate_operation  <code>staticmethod</code>","text":"<pre><code>validate_operation(instr, index)\n</code></pre> <p>Valida a instru\u00e7\u00e3o \"operation\".</p> <p>Verifica se a opera\u00e7\u00e3o \u00e9 uma string e se o c\u00f3digo representa um Python v\u00e1lido.</p> PARAMETER DESCRIPTION <p>Dicion\u00e1rio que cont\u00e9m a instru\u00e7\u00e3o \"operation\".</p> <p> TYPE: <code>dict</code> </p> <p>Posi\u00e7\u00e3o da instru\u00e7\u00e3o na lista.</p> <p> TYPE: <code>int</code> </p> Source code in <code>src/imperiumengine/dsl/validators.py</code> <pre><code>@staticmethod\ndef validate_operation(instr: dict, index: int) -&gt; None:\n    \"\"\"\n    Valida a instru\u00e7\u00e3o \"operation\".\n\n    Verifica se a opera\u00e7\u00e3o \u00e9 uma string e se o c\u00f3digo representa um Python v\u00e1lido.\n\n    Parameters\n    ----------\n    instr : dict\n        Dicion\u00e1rio que cont\u00e9m a instru\u00e7\u00e3o \"operation\".\n    index : int\n        Posi\u00e7\u00e3o da instru\u00e7\u00e3o na lista.\n    \"\"\"\n    op = instr[\"operation\"]\n    if not isinstance(op, str):\n        StrategyValidator.append_error(\n            f\"Error in operation at position {index}: must be a string.\"\n        )\n    else:\n        try:\n            ast.parse(op, mode=\"exec\")\n        except Exception as e:\n            StrategyValidator.append_error(\n                f\"Error in operation '{op}' at position {index}: {e}\"\n            )\n</code></pre>"},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate_operation(instr)","title":"<code>instr</code>","text":""},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate_operation(index)","title":"<code>index</code>","text":""},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate_indicator","title":"imperiumengine.dsl.validators.StrategyValidator.validate_indicator  <code>staticmethod</code>","text":"<pre><code>validate_indicator(instr, index)\n</code></pre> <p>Valida a instru\u00e7\u00e3o \"indicator\".</p> <p>Verifica a exist\u00eancia da chave \"name\" e, dependendo do indicador, a exist\u00eancia de chaves obrigat\u00f3rias.</p> PARAMETER DESCRIPTION <p>Dicion\u00e1rio que cont\u00e9m a instru\u00e7\u00e3o \"indicator\".</p> <p> TYPE: <code>dict</code> </p> <p>Posi\u00e7\u00e3o da instru\u00e7\u00e3o na lista.</p> <p> TYPE: <code>int</code> </p> Source code in <code>src/imperiumengine/dsl/validators.py</code> <pre><code>@staticmethod\ndef validate_indicator(instr: dict, index: int) -&gt; None:\n    \"\"\"\n    Valida a instru\u00e7\u00e3o \"indicator\".\n\n    Verifica a exist\u00eancia da chave \"name\" e, dependendo do indicador, a exist\u00eancia de chaves\n    obrigat\u00f3rias.\n\n    Parameters\n    ----------\n    instr : dict\n        Dicion\u00e1rio que cont\u00e9m a instru\u00e7\u00e3o \"indicator\".\n    index : int\n        Posi\u00e7\u00e3o da instru\u00e7\u00e3o na lista.\n    \"\"\"\n    data = instr[\"indicator\"]\n    if \"name\" not in data:\n        StrategyValidator.append_error(\n            f\"Error in indicator at position {index}: missing key 'name'.\"\n        )\n    else:\n        indicator_name = data[\"name\"]\n        if indicator_name not in StrategyValidator.SUPPORTED_INDICATORS:\n            StrategyValidator.append_error(\n                f\"Error in indicator at position {index}: '{indicator_name}' is not supported.\"\n            )\n        elif indicator_name != \"MACD\":\n            for key in [\"period\", \"source\", \"var\"]:\n                if key not in data:\n                    StrategyValidator.append_error(\n                        f\"Error in indicator at position {index}: missing key '{key}'.\"\n                    )\n        else:\n            for key in [\"fast\", \"slow\", \"signal\", \"source\", \"var\"]:\n                if key not in data:\n                    StrategyValidator.append_error(\n                        f\"Error in MACD indicator at position {index}: missing key '{key}'.\"\n                    )\n</code></pre>"},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate_indicator(instr)","title":"<code>instr</code>","text":""},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate_indicator(index)","title":"<code>index</code>","text":""},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate_trade","title":"imperiumengine.dsl.validators.StrategyValidator.validate_trade  <code>staticmethod</code>","text":"<pre><code>validate_trade(instr, index)\n</code></pre> <p>Valida a instru\u00e7\u00e3o \"trade\".</p> <p>Verifica se os dados de trade cont\u00eam as chaves obrigat\u00f3rias (\"action\", \"symbol\", \"quantity\") e se a a\u00e7\u00e3o informada \u00e9 v\u00e1lida (\"buy\" ou \"sell\").</p> PARAMETER DESCRIPTION <p>Dicion\u00e1rio que cont\u00e9m a instru\u00e7\u00e3o \"trade\".</p> <p> TYPE: <code>dict</code> </p> <p>Posi\u00e7\u00e3o da instru\u00e7\u00e3o na lista.</p> <p> TYPE: <code>int</code> </p> Source code in <code>src/imperiumengine/dsl/validators.py</code> <pre><code>@staticmethod\ndef validate_trade(instr: dict, index: int) -&gt; None:\n    \"\"\"\n    Valida a instru\u00e7\u00e3o \"trade\".\n\n    Verifica se os dados de trade cont\u00eam as chaves obrigat\u00f3rias (\"action\", \"symbol\", \"quantity\")\n    e se a a\u00e7\u00e3o informada \u00e9 v\u00e1lida (\"buy\" ou \"sell\").\n\n    Parameters\n    ----------\n    instr : dict\n        Dicion\u00e1rio que cont\u00e9m a instru\u00e7\u00e3o \"trade\".\n    index : int\n        Posi\u00e7\u00e3o da instru\u00e7\u00e3o na lista.\n    \"\"\"\n    data = instr[\"trade\"]\n    for key in [\"action\", \"symbol\", \"quantity\"]:\n        if key not in data:\n            StrategyValidator.append_error(\n                f\"Error in trade at position {index}: missing key '{key}'.\"\n            )\n    if \"action\" in data and data[\"action\"] not in [\"buy\", \"sell\"]:\n        StrategyValidator.append_error(\n            f\"Error in trade at position {index}: invalid action '{data['action']}'.\"\n        )\n</code></pre>"},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate_trade(instr)","title":"<code>instr</code>","text":""},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate_trade(index)","title":"<code>index</code>","text":""},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate_wait","title":"imperiumengine.dsl.validators.StrategyValidator.validate_wait  <code>staticmethod</code>","text":"<pre><code>validate_wait(instr, index)\n</code></pre> <p>Valida a instru\u00e7\u00e3o \"wait\".</p> <p>Verifica se o tempo de espera \u00e9 num\u00e9rico ou uma string com um sufixo de tempo v\u00e1lido (s, m ou h).</p> PARAMETER DESCRIPTION <p>Dicion\u00e1rio que cont\u00e9m a instru\u00e7\u00e3o \"wait\".</p> <p> TYPE: <code>dict</code> </p> <p>Posi\u00e7\u00e3o da instru\u00e7\u00e3o na lista.</p> <p> TYPE: <code>int</code> </p> Source code in <code>src/imperiumengine/dsl/validators.py</code> <pre><code>@staticmethod\ndef validate_wait(instr: dict, index: int) -&gt; None:\n    \"\"\"\n    Valida a instru\u00e7\u00e3o \"wait\".\n\n    Verifica se o tempo de espera \u00e9 num\u00e9rico ou uma string com um sufixo de tempo v\u00e1lido\n    (s, m ou h).\n\n    Parameters\n    ----------\n    instr : dict\n        Dicion\u00e1rio que cont\u00e9m a instru\u00e7\u00e3o \"wait\".\n    index : int\n        Posi\u00e7\u00e3o da instru\u00e7\u00e3o na lista.\n    \"\"\"\n    value = instr[\"wait\"]\n    MIN_WAIT_LENGTH = 2\n    if isinstance(value, (int, float)):\n        return\n    if isinstance(value, str):\n        if len(value) &lt; MIN_WAIT_LENGTH or value[-1].lower() not in [\"s\", \"m\", \"h\"]:\n            StrategyValidator.append_error(\n                f\"Error in wait at position {index}: invalid format '{value}'.\"\n            )\n        else:\n            try:\n                float(value[:-1])\n            except Exception as e:\n                StrategyValidator.append_error(f\"Error in wait at position {index}: {e}\")\n    else:\n        StrategyValidator.append_error(\n            f\"Error in wait at position {index}: value must be numeric or a string with a unit.\"\n        )\n</code></pre>"},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate_wait(instr)","title":"<code>instr</code>","text":""},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.validate_wait(index)","title":"<code>index</code>","text":""},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.append_error","title":"imperiumengine.dsl.validators.StrategyValidator.append_error  <code>staticmethod</code>","text":"<pre><code>append_error(message)\n</code></pre> <p>Registra uma mensagem de erro.</p> <p>A mensagem \u00e9 registrada via logger e adicionada \u00e0 lista de erros acumulada.</p> PARAMETER DESCRIPTION <p>Mensagem de erro a ser registrada.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/imperiumengine/dsl/validators.py</code> <pre><code>@staticmethod\ndef append_error(message: str) -&gt; None:\n    \"\"\"\n    Registra uma mensagem de erro.\n\n    A mensagem \u00e9 registrada via logger e adicionada \u00e0 lista de erros acumulada.\n\n    Parameters\n    ----------\n    message : str\n        Mensagem de erro a ser registrada.\n    \"\"\"\n    StrategyValidator.errors.append(message)\n    StrategyValidator.logger.error(message)\n</code></pre>"},{"location":"reference/imperiumengine/dsl/validators/StrategyValidator/#imperiumengine.dsl.validators.StrategyValidator.append_error(message)","title":"<code>message</code>","text":""}]}