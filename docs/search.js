window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "imperiumengine", "modulename": "imperiumengine", "kind": "module", "doc": "<p>ImperiumEngine.</p>\n"}, {"fullname": "imperiumengine.config", "modulename": "imperiumengine.config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.config.imperiumengine_settings", "modulename": "imperiumengine.config.imperiumengine_settings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.config.imperiumengine_settings.DEFAULT_CONFIG_PATHS", "modulename": "imperiumengine.config.imperiumengine_settings", "qualname": "DEFAULT_CONFIG_PATHS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;./config.toml&#x27;, &#x27;~/.config/myapp/config.toml&#x27;, &#x27;/etc/myapp/config.toml&#x27;]"}, {"fullname": "imperiumengine.config.imperiumengine_settings.ImperiumengineConfig", "modulename": "imperiumengine.config.imperiumengine_settings", "qualname": "ImperiumengineConfig", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.config.imperiumengine_settings.ImperiumengineConfig.get", "modulename": "imperiumengine.config.imperiumengine_settings", "qualname": "ImperiumengineConfig.get", "kind": "function", "doc": "<p>Obt\u00e9m um valor da configura\u00e7\u00e3o.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.config.imperiumengine_settings.ImperiumengineConfig.reload", "modulename": "imperiumengine.config.imperiumengine_settings", "qualname": "ImperiumengineConfig.reload", "kind": "function", "doc": "<p>Recarrega as configura\u00e7\u00f5es do arquivo TOML.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.config.imperiumengine_settings.ImperiumengineConfig.set_config_file", "modulename": "imperiumengine.config.imperiumengine_settings", "qualname": "ImperiumengineConfig.set_config_file", "kind": "function", "doc": "<p>Define um novo arquivo de configura\u00e7\u00e3o e recarrega os dados.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.config.logger", "modulename": "imperiumengine.config.logger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.config.logger.ColoredFormatter", "modulename": "imperiumengine.config.logger", "qualname": "ColoredFormatter", "kind": "class", "doc": "<p>Formatter que adiciona cores \u00e0s mensagens de log de acordo com o n\u00edvel.</p>\n", "bases": "logging.Formatter"}, {"fullname": "imperiumengine.config.logger.ColoredFormatter.LEVEL_COLOR", "modulename": "imperiumengine.config.logger", "qualname": "ColoredFormatter.LEVEL_COLOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "{10: &#x27;\\x1b[36m&#x27;, 20: &#x27;\\x1b[32m&#x27;, 30: &#x27;\\x1b[33m&#x27;, 40: &#x27;\\x1b[31m&#x27;, 50: &#x27;\\x1b[31m\\x1b[1m&#x27;}"}, {"fullname": "imperiumengine.config.logger.ColoredFormatter.format", "modulename": "imperiumengine.config.logger", "qualname": "ColoredFormatter.format", "kind": "function", "doc": "<p>Format the specified record as text.</p>\n\n<p>The record's attribute dictionary is used as the operand to a\nstring formatting operation which yields the returned string.\nBefore formatting the dictionary, a couple of preparatory steps\nare carried out. The message attribute of the record is computed\nusing LogRecord.getMessage(). If the formatting string uses the\ntime (as determined by a call to usesTime(), formatTime() is\ncalled to format the event time. If there is exception information,\nit is formatted using formatException() and appended to the message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">LogRecord</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.config.logger.LogFactory", "modulename": "imperiumengine.config.logger", "qualname": "LogFactory", "kind": "class", "doc": "<p>F\u00e1brica centralizada para cria\u00e7\u00e3o e configura\u00e7\u00e3o dos loggers.</p>\n\n<p>Essa vers\u00e3o utiliza automaticamente a inst\u00e2ncia da classe Config (TOML) para obter as\nconfigura\u00e7\u00f5es de logging, sem necessidade de passar nenhum par\u00e2metro.</p>\n\n<p>As configura\u00e7\u00f5es esperadas no arquivo TOML (gerenciado pela classe Config) s\u00e3o, por exemplo:</p>\n\n<p>[sentry]\n  dsn = \"sua-dsn-aqui\"\n  environment = \"production\"</p>\n\n<p>[graylog]\n  host = \"endereco-do-graylog\"\n  port = 12201</p>\n\n<p>Se nenhuma das integra\u00e7\u00f5es (Sentry ou Graylog) for configurada, \u00e9 utilizado um fallback local.</p>\n"}, {"fullname": "imperiumengine.config.logger.LogFactory.configure", "modulename": "imperiumengine.config.logger", "qualname": "LogFactory.configure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.config.logger.LogFactory.get_logger", "modulename": "imperiumengine.config.logger", "qualname": "LogFactory.get_logger", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl", "modulename": "imperiumengine.dsl", "kind": "module", "doc": "<p>Pacote DSL que cont\u00e9m a implementa\u00e7\u00e3o do Domain Specific Language para estrat\u00e9gias de trading.</p>\n"}, {"fullname": "imperiumengine.dsl.context", "modulename": "imperiumengine.dsl.context", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.context.Context", "modulename": "imperiumengine.dsl.context", "qualname": "Context", "kind": "class", "doc": "<p>Contexto de execu\u00e7\u00e3o que armazena vari\u00e1veis.</p>\n\n<p>Esta classe fornece um cont\u00eainer simples para armazenar e gerenciar vari\u00e1veis durante a execu\u00e7\u00e3o\nde uma aplica\u00e7\u00e3o ou de uma DSL. O contexto utiliza um dicion\u00e1rio para manter o estado e permite\natualiza\u00e7\u00f5es din\u00e2micas dos dados atrav\u00e9s do m\u00e9todo <code>update</code>.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>variables</strong> (dict[str, any]):\nDicion\u00e1rio que armazena as vari\u00e1veis do contexto.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>update(data: dict[str, any]) -> None\n    Atualiza o dicion\u00e1rio de vari\u00e1veis com os valores fornecidos em <code>data</code>.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">variables</span>\n<span class=\"go\">{}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">variables</span>\n<span class=\"go\">{&#39;a&#39;: 1, &#39;b&#39;: 2}</span>\n</code></pre>\n</div>\n"}, {"fullname": "imperiumengine.dsl.context.Context.variables", "modulename": "imperiumengine.dsl.context", "qualname": "Context.variables", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, any]"}, {"fullname": "imperiumengine.dsl.context.Context.update", "modulename": "imperiumengine.dsl.context", "qualname": "Context.update", "kind": "function", "doc": "<p>Atualiza o contexto com os dados fornecidos.</p>\n\n<p>Este m\u00e9todo recebe um dicion\u00e1rio e atualiza o dicion\u00e1rio interno <code>variables</code> com os\npares chave-valor presentes em <code>data</code>. Se uma chave j\u00e1 existir, seu valor ser\u00e1 atualizado;\ncaso contr\u00e1rio, a chave ser\u00e1 adicionada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (dict[str, any]):\nDicion\u00e1rio contendo os dados a serem atualizados no contexto.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">variables</span>\n<span class=\"go\">{&#39;x&#39;: 10}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">variables</span>\n<span class=\"go\">{&#39;x&#39;: 10, &#39;y&#39;: 20}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.evaluator", "modulename": "imperiumengine.dsl.evaluator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.evaluator.SafeEvaluator", "modulename": "imperiumengine.dsl.evaluator", "qualname": "SafeEvaluator", "kind": "class", "doc": "<p>Avalia express\u00f5es de uma DSL de forma segura utilizando uma AST restrita.</p>\n\n<p>Esta classe percorre a \u00e1rvore sint\u00e1tica abstrata (AST) gerada a partir de uma express\u00e3o e\navalia os n\u00f3s permitidos, garantindo que somente opera\u00e7\u00f5es seguras sejam executadas. Opera\u00e7\u00f5es\nn\u00e3o permitidas ou n\u00f3s inesperados geram uma exce\u00e7\u00e3o <code>DSLError</code>.</p>\n\n<p>A classe permite opera\u00e7\u00f5es aritm\u00e9ticas simples, opera\u00e7\u00f5es un\u00e1rias, opera\u00e7\u00f5es booleanas, compara\u00e7\u00f5es,\nal\u00e9m de chamadas a fun\u00e7\u00f5es permitidas. As fun\u00e7\u00f5es autorizadas est\u00e3o definidas na vari\u00e1vel de classe\n<code>ALLOWED_FUNCTIONS</code>.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>ALLOWED_FUNCTIONS</strong> (ClassVar[set[str]]):\nConjunto de nomes de fun\u00e7\u00f5es que s\u00e3o permitidas nas express\u00f5es. Valores permitidos:\n{\"implies\", \"iff\", \"xor\", \"nand\", \"nor\"}.</li>\n<li><strong>context</strong> (dict[str, Any]):\nDicion\u00e1rio que representa o contexto de avalia\u00e7\u00e3o, contendo vari\u00e1veis e fun\u00e7\u00f5es dispon\u00edveis.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>context</strong> (dict[str, Any]):\nDicion\u00e1rio contendo as vari\u00e1veis e fun\u00e7\u00f5es que poder\u00e3o ser utilizadas durante a avalia\u00e7\u00e3o.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Exemplo simples de avalia\u00e7\u00e3o segura:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">contexto</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;x&quot;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s2\">&quot;y&quot;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">evaluator</span> <span class=\"o\">=</span> <span class=\"n\">SafeEvaluator</span><span class=\"p\">(</span><span class=\"n\">contexto</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">ast</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">&quot;x + y&quot;</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;eval&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">visit</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span>\n<span class=\"go\">15</span>\n</code></pre>\n</div>\n", "bases": "ast.NodeVisitor"}, {"fullname": "imperiumengine.dsl.evaluator.SafeEvaluator.__init__", "modulename": "imperiumengine.dsl.evaluator", "qualname": "SafeEvaluator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "imperiumengine.dsl.evaluator.SafeEvaluator.ALLOWED_FUNCTIONS", "modulename": "imperiumengine.dsl.evaluator", "qualname": "SafeEvaluator.ALLOWED_FUNCTIONS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ClassVar[set[str]]", "default_value": "{&#x27;implies&#x27;, &#x27;nor&#x27;, &#x27;xor&#x27;, &#x27;nand&#x27;, &#x27;iff&#x27;}"}, {"fullname": "imperiumengine.dsl.evaluator.SafeEvaluator.context", "modulename": "imperiumengine.dsl.evaluator", "qualname": "SafeEvaluator.context", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.evaluator.SafeEvaluator.visit_BinOp", "modulename": "imperiumengine.dsl.evaluator", "qualname": "SafeEvaluator.visit_BinOp", "kind": "function", "doc": "<p>Avalia uma opera\u00e7\u00e3o bin\u00e1ria (ex.: adi\u00e7\u00e3o, subtra\u00e7\u00e3o).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node</strong> (ast.BinOp):\nN\u00f3 da AST que representa uma opera\u00e7\u00e3o bin\u00e1ria.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Any</strong>: Resultado da opera\u00e7\u00e3o bin\u00e1ria avaliada.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se o operador bin\u00e1rio n\u00e3o for suportado.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">BinOp</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.evaluator.SafeEvaluator.visit_UnaryOp", "modulename": "imperiumengine.dsl.evaluator", "qualname": "SafeEvaluator.visit_UnaryOp", "kind": "function", "doc": "<p>Avalia uma opera\u00e7\u00e3o un\u00e1ria (ex.: nega\u00e7\u00e3o).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node</strong> (ast.UnaryOp):\nN\u00f3 da AST que representa uma opera\u00e7\u00e3o un\u00e1ria.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Any</strong>: Resultado da opera\u00e7\u00e3o un\u00e1ria avaliada.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se o operador un\u00e1rio n\u00e3o for suportado.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">UnaryOp</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.evaluator.SafeEvaluator.visit_Num", "modulename": "imperiumengine.dsl.evaluator", "qualname": "SafeEvaluator.visit_Num", "kind": "function", "doc": "<p>Retorna o valor num\u00e9rico de um n\u00f3 antigo (para vers\u00f5es de Python anteriores a 3.8).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node</strong> (ast.Num):\nN\u00f3 que cont\u00e9m um valor num\u00e9rico.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Any</strong>: Valor num\u00e9rico armazenado em node.n.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Num</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.evaluator.SafeEvaluator.visit_Constant", "modulename": "imperiumengine.dsl.evaluator", "qualname": "SafeEvaluator.visit_Constant", "kind": "function", "doc": "<p>Retorna o valor de um n\u00f3 constante (utilizado em Python 3.8+).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node</strong> (ast.Constant):\nN\u00f3 que cont\u00e9m um valor constante.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Any</strong>: Valor constante armazenado em node.value.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Constant</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.evaluator.SafeEvaluator.visit_Name", "modulename": "imperiumengine.dsl.evaluator", "qualname": "SafeEvaluator.visit_Name", "kind": "function", "doc": "<p>Recupera o valor de uma vari\u00e1vel a partir do contexto.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node</strong> (ast.Name):\nN\u00f3 que representa uma vari\u00e1vel.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Any</strong>: Valor da vari\u00e1vel obtido a partir do contexto.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se a vari\u00e1vel n\u00e3o estiver presente no contexto.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Name</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.evaluator.SafeEvaluator.visit_BoolOp", "modulename": "imperiumengine.dsl.evaluator", "qualname": "SafeEvaluator.visit_BoolOp", "kind": "function", "doc": "<p>Avalia opera\u00e7\u00f5es booleanas (AND, OR).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node</strong> (ast.BoolOp):\nN\u00f3 que representa uma opera\u00e7\u00e3o booleana.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Any</strong>: Resultado da opera\u00e7\u00e3o booleana.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se o operador booleano n\u00e3o for suportado.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">BoolOp</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.evaluator.SafeEvaluator.visit_Compare", "modulename": "imperiumengine.dsl.evaluator", "qualname": "SafeEvaluator.visit_Compare", "kind": "function", "doc": "<p>Avalia express\u00f5es de compara\u00e7\u00e3o (ex.: &gt;, &lt;, ==).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node</strong> (ast.Compare):\nN\u00f3 que representa uma compara\u00e7\u00e3o.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Any</strong>: Valor booleano que resulta da compara\u00e7\u00e3o.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se algum operador de compara\u00e7\u00e3o n\u00e3o for suportado.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Compare</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.evaluator.SafeEvaluator.visit_Call", "modulename": "imperiumengine.dsl.evaluator", "qualname": "SafeEvaluator.visit_Call", "kind": "function", "doc": "<p>Avalia uma chamada de fun\u00e7\u00e3o.</p>\n\n<p>Somente chamadas a fun\u00e7\u00f5es presentes em <code>ALLOWED_FUNCTIONS</code> s\u00e3o permitidas.\nOs argumentos e palavras-chave da chamada s\u00e3o avaliados recursivamente.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node</strong> (ast.Call):\nN\u00f3 que representa uma chamada de fun\u00e7\u00e3o.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Any</strong>: Resultado da chamada da fun\u00e7\u00e3o.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se a fun\u00e7\u00e3o chamada n\u00e3o for permitida ou n\u00e3o estiver presente no contexto, ou se a\nchamada n\u00e3o for uma chamada simples.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Call</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.evaluator.SafeEvaluator.generic_visit", "modulename": "imperiumengine.dsl.evaluator", "qualname": "SafeEvaluator.generic_visit", "kind": "function", "doc": "<p>M\u00e9todo gen\u00e9rico de visita que impede a avalia\u00e7\u00e3o de n\u00f3s n\u00e3o permitidos.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node</strong> (ast.AST):\nN\u00f3 da AST que n\u00e3o possui um m\u00e9todo de visita espec\u00edfico.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Sempre levanta uma exce\u00e7\u00e3o indicando que o n\u00f3 n\u00e3o \u00e9 permitido.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">AST</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.evaluator.safe_eval_expr", "modulename": "imperiumengine.dsl.evaluator", "qualname": "safe_eval_expr", "kind": "function", "doc": "<p>Avalia de forma segura uma express\u00e3o em uma DSL utilizando uma AST restrita.</p>\n\n<p>Esta fun\u00e7\u00e3o substitui operadores especiais por suas equivalentes em palavras (por exemplo,\n\"\u2192\" por \"implies\") e cria um contexto local que inclui fun\u00e7\u00f5es permitidas para opera\u00e7\u00f5es\nl\u00f3gicas. Em seguida, a express\u00e3o \u00e9 analisada e avaliada utilizando a classe <code>SafeEvaluator</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>expr</strong> (str):\nA express\u00e3o a ser avaliada. Pode conter operadores especiais que ser\u00e3o convertidos.</li>\n<li><strong>context</strong> (dict[str, Any]):\nDicion\u00e1rio com vari\u00e1veis e fun\u00e7\u00f5es dispon\u00edveis para a avalia\u00e7\u00e3o da express\u00e3o.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Any</strong>: Resultado da avalia\u00e7\u00e3o da express\u00e3o.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se ocorrer algum erro durante a an\u00e1lise ou avalia\u00e7\u00e3o segura da express\u00e3o.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">contexto</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;x&quot;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s2\">&quot;y&quot;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># A express\u00e3o utiliza operadores aritm\u00e9ticos e l\u00f3gicos seguros.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">safe_eval_expr</span><span class=\"p\">(</span><span class=\"s2\">&quot;x + y&quot;</span><span class=\"p\">,</span> <span class=\"n\">contexto</span><span class=\"p\">)</span>\n<span class=\"go\">15</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Exemplo utilizando um operador especial:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">safe_eval_expr</span><span class=\"p\">(</span><span class=\"s2\">&quot;x &gt; y and implies(x == 10, y == 5)&quot;</span><span class=\"p\">,</span> <span class=\"n\">contexto</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.evaluator.safe_exec_statement", "modulename": "imperiumengine.dsl.evaluator", "qualname": "safe_exec_statement", "kind": "function", "doc": "<p>Executa de forma segura uma \u00fanica instru\u00e7\u00e3o definida por uma string.</p>\n\n<p>Esta fun\u00e7\u00e3o permite apenas instru\u00e7\u00f5es simples, como atribui\u00e7\u00f5es simples a uma vari\u00e1vel ou\nchamadas de fun\u00e7\u00e3o restritas (por exemplo, a fun\u00e7\u00e3o <code>print</code>). Instru\u00e7\u00f5es com mais de um\ncomando ou estruturas n\u00e3o permitidas geram uma exce\u00e7\u00e3o <code>DSLError</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>statement</strong> (str):\nA instru\u00e7\u00e3o a ser executada. Exemplos: \"x = 5\" ou \"print(x)\".</li>\n<li><strong>context</strong> (dict[str, Any]):\nDicion\u00e1rio contendo as vari\u00e1veis (e fun\u00e7\u00f5es) que poder\u00e3o ser modificadas ou utilizadas\ndurante a execu\u00e7\u00e3o da instru\u00e7\u00e3o.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se a instru\u00e7\u00e3o n\u00e3o estiver no formato permitido, se houver mais de uma instru\u00e7\u00e3o, ou se\na instru\u00e7\u00e3o contiver elementos n\u00e3o permitidos.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">contexto</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;x&quot;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">safe_exec_statement</span><span class=\"p\">(</span><span class=\"s2\">&quot;x = x + 5&quot;</span><span class=\"p\">,</span> <span class=\"n\">contexto</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">contexto</span><span class=\"p\">[</span><span class=\"s2\">&quot;x&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">15</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Apenas chamadas \u00e0 fun\u00e7\u00e3o print s\u00e3o permitidas:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">safe_exec_statement</span><span class=\"p\">(</span><span class=\"s2\">&quot;print(x)&quot;</span><span class=\"p\">,</span> <span class=\"n\">contexto</span><span class=\"p\">)</span>\n<span class=\"go\">15</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">statement</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.exceptions", "modulename": "imperiumengine.dsl.exceptions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.exceptions.DSLError", "modulename": "imperiumengine.dsl.exceptions", "qualname": "DSLError", "kind": "class", "doc": "<p>Erro relacionado \u00e0 DSL (Domain Specific Language).</p>\n\n<p>Esta exce\u00e7\u00e3o \u00e9 lan\u00e7ada sempre que ocorre um problema durante a avalia\u00e7\u00e3o ou execu\u00e7\u00e3o de\nexpress\u00f5es e instru\u00e7\u00f5es definidas na DSL. Ela pode ser utilizada para sinalizar erros de\nsintaxe, sem\u00e2ntica ou de seguran\u00e7a, garantindo que apenas opera\u00e7\u00f5es permitidas sejam realizadas.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong> (str):\nExplica\u00e7\u00e3o detalhada do erro ocorrido.</li>\n<li><strong>Traceback (most recent call last):</strong>: ...</li>\n<li><strong>DSLError</strong> (Opera\u00e7\u00e3o inv\u00e1lida na DSL.):</li>\n</ul>\n", "bases": "builtins.Exception"}, {"fullname": "imperiumengine.dsl.instructions", "modulename": "imperiumengine.dsl.instructions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.compound_instruction", "modulename": "imperiumengine.dsl.instructions.compound_instruction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.compound_instruction.CompoundInstruction", "modulename": "imperiumengine.dsl.instructions.compound_instruction", "qualname": "CompoundInstruction", "kind": "class", "doc": "<p>Representa uma instru\u00e7\u00e3o composta que executa uma sequ\u00eancia de instru\u00e7\u00f5es.</p>\n\n<p>Esta classe permite agrupar m\u00faltiplas instru\u00e7\u00f5es que ser\u00e3o executadas sequencialmente em um mesmo\ncontexto. Cada instru\u00e7\u00e3o deve ser uma inst\u00e2ncia de uma classe derivada de <code>Instruction</code> e deve\nimplementar o m\u00e9todo <code>execute(context)</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instructions</strong> (list of Instruction):\nLista de instru\u00e7\u00f5es a serem executadas na ordem definida.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>instructions</strong> (list of Instruction):\nLista que armazena as instru\u00e7\u00f5es que ser\u00e3o executadas sequencialmente.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>execute(context: Context) -> None\n    Executa cada instru\u00e7\u00e3o presente na lista utilizando o contexto fornecido.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Para exemplificar o uso desta classe, considere o seguinte cen\u00e1rio em que definimos uma classe\ndummy derivada de <code>Instruction</code> que acumula valores em um contexto (representado aqui por um dicion\u00e1rio):</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">DummyInstruction</span><span class=\"p\">(</span><span class=\"n\">Instruction</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">valor</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">valor</span> <span class=\"o\">=</span> <span class=\"n\">valor</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"c1\"># Supondo que o contexto seja um dicion\u00e1rio com a chave &#39;resultado&#39;</span>\n<span class=\"gp\">... </span>        <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">&#39;resultado&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;resultado&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">valor</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Cria\u00e7\u00e3o de um contexto simples</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">contexto</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Cria\u00e7\u00e3o de duas instru\u00e7\u00f5es dummy</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">instrucao1</span> <span class=\"o\">=</span> <span class=\"n\">DummyInstruction</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">instrucao2</span> <span class=\"o\">=</span> <span class=\"n\">DummyInstruction</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Cria\u00e7\u00e3o da instru\u00e7\u00e3o composta com as duas instru\u00e7\u00f5es dummy</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">instrucao_composta</span> <span class=\"o\">=</span> <span class=\"n\">CompoundInstruction</span><span class=\"p\">([</span><span class=\"n\">instrucao1</span><span class=\"p\">,</span> <span class=\"n\">instrucao2</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Execu\u00e7\u00e3o da instru\u00e7\u00e3o composta</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">instrucao_composta</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">contexto</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">contexto</span><span class=\"p\">[</span><span class=\"s1\">&#39;resultado&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">15</span>\n</code></pre>\n</div>\n", "bases": "imperiumengine.dsl.instructions.instruction.Instruction"}, {"fullname": "imperiumengine.dsl.instructions.compound_instruction.CompoundInstruction.__init__", "modulename": "imperiumengine.dsl.instructions.compound_instruction", "qualname": "CompoundInstruction.__init__", "kind": "function", "doc": "<p>Inicializa a instru\u00e7\u00e3o composta com uma lista de instru\u00e7\u00f5es.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instructions</strong> (list of Instruction):\nLista de inst\u00e2ncias de instru\u00e7\u00f5es a serem executadas sequencialmente.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">instructions</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">imperiumengine</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">instructions</span><span class=\"o\">.</span><span class=\"n\">instruction</span><span class=\"o\">.</span><span class=\"n\">Instruction</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "imperiumengine.dsl.instructions.compound_instruction.CompoundInstruction.instructions", "modulename": "imperiumengine.dsl.instructions.compound_instruction", "qualname": "CompoundInstruction.instructions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.compound_instruction.CompoundInstruction.execute", "modulename": "imperiumengine.dsl.instructions.compound_instruction", "qualname": "CompoundInstruction.execute", "kind": "function", "doc": "<p>Executa cada instru\u00e7\u00e3o da lista utilizando o mesmo contexto.</p>\n\n<p>Itera sobre a lista de instru\u00e7\u00f5es e, para cada uma, invoca o m\u00e9todo <code>execute</code>, passando o\ncontexto fornecido como par\u00e2metro. Dessa forma, todas as instru\u00e7\u00f5es operam sobre o mesmo\nestado ou conjunto de dados.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>context</strong> (Context):\nObjeto que representa o contexto de execu\u00e7\u00e3o, contendo os dados ou estado necess\u00e1rio para\na execu\u00e7\u00e3o das instru\u00e7\u00f5es.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">imperiumengine</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.instructions.if_instruction", "modulename": "imperiumengine.dsl.instructions.if_instruction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.if_instruction.IfInstruction", "modulename": "imperiumengine.dsl.instructions.if_instruction", "qualname": "IfInstruction", "kind": "class", "doc": "<p>Avalia um bloco condicional e executa suas instru\u00e7\u00f5es se a condi\u00e7\u00e3o for verdadeira.</p>\n\n<p>Esta classe representa uma instru\u00e7\u00e3o condicional que avalia uma express\u00e3o booleana definida em\n<code>condition</code>. Se a express\u00e3o, quando avaliada utilizando as vari\u00e1veis do contexto, retornar um\nvalor verdadeiro, o bloco de instru\u00e7\u00f5es associado (<code>block</code>) \u00e9 executado.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>condition</strong> (str):\nExpress\u00e3o condicional a ser avaliada. Essa express\u00e3o deve resultar em um valor booleano quando\navaliada no contexto fornecido.</li>\n<li><strong>block</strong> (CompoundInstruction):\nBloco composto de instru\u00e7\u00f5es a ser executado se a condi\u00e7\u00e3o for satisfeita. Deve ser uma\ninst\u00e2ncia de <code>CompoundInstruction</code>.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>condition</strong> (str):\nA express\u00e3o condicional que ser\u00e1 avaliada.</li>\n<li><strong>block</strong> (CompoundInstruction):\nO bloco de instru\u00e7\u00f5es que ser\u00e1 executado se a condi\u00e7\u00e3o for verdadeira.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>execute(context: Context) -> None\n    Avalia a condi\u00e7\u00e3o e, se o resultado for verdadeiro, executa o bloco de instru\u00e7\u00f5es associado.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">imperiumengine.dsl.context</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Context</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\">  </span><span class=\"nn\">imperiumengine.dsl.instructions.compound_instruction</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">CompoundInstruction</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">imperiumengine.dsl.instructions.if_instruction</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">IfInstruction</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">imperiumengine.dsl.instructions.instruction</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Instruction</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Definindo uma instru\u00e7\u00e3o dummy que incrementa o valor &#39;counter&#39; no contexto</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">DummyInstruction</span><span class=\"p\">(</span><span class=\"n\">Instruction</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"s1\">&#39;counter&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;counter&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Cria\u00e7\u00e3o de um bloco composto com a instru\u00e7\u00e3o dummy</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">block</span> <span class=\"o\">=</span> <span class=\"n\">CompoundInstruction</span><span class=\"p\">([</span><span class=\"n\">DummyInstruction</span><span class=\"p\">()])</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Cria\u00e7\u00e3o do contexto com vari\u00e1vel &#39;x&#39; para avalia\u00e7\u00e3o da condi\u00e7\u00e3o</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Se x &gt; 5, o bloco \u00e9 executado e &#39;counter&#39; \u00e9 incrementado</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">if_instr</span> <span class=\"o\">=</span> <span class=\"n\">IfInstruction</span><span class=\"p\">(</span><span class=\"s2\">&quot;x &gt; 5&quot;</span><span class=\"p\">,</span> <span class=\"n\">block</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">if_instr</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;counter&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Exemplo com condi\u00e7\u00e3o falsa: se x &gt; 15, o bloco n\u00e3o \u00e9 executado</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">&#39;counter&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">if_instr</span> <span class=\"o\">=</span> <span class=\"n\">IfInstruction</span><span class=\"p\">(</span><span class=\"s2\">&quot;x &gt; 15&quot;</span><span class=\"p\">,</span> <span class=\"n\">block</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">if_instr</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;counter&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n", "bases": "imperiumengine.dsl.instructions.instruction.Instruction"}, {"fullname": "imperiumengine.dsl.instructions.if_instruction.IfInstruction.__init__", "modulename": "imperiumengine.dsl.instructions.if_instruction", "qualname": "IfInstruction.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">condition</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"s1\">&#39;CompoundInstruction&#39;</span></span>)</span>"}, {"fullname": "imperiumengine.dsl.instructions.if_instruction.IfInstruction.condition", "modulename": "imperiumengine.dsl.instructions.if_instruction", "qualname": "IfInstruction.condition", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.if_instruction.IfInstruction.block", "modulename": "imperiumengine.dsl.instructions.if_instruction", "qualname": "IfInstruction.block", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.if_instruction.IfInstruction.execute", "modulename": "imperiumengine.dsl.instructions.if_instruction", "qualname": "IfInstruction.execute", "kind": "function", "doc": "<p>Avalia a condi\u00e7\u00e3o e executa o bloco de instru\u00e7\u00f5es se a condi\u00e7\u00e3o for verdadeira.</p>\n\n<p>A avalia\u00e7\u00e3o da condi\u00e7\u00e3o \u00e9 realizada utilizando a fun\u00e7\u00e3o <code>safe_eval_expr</code>, que avalia a express\u00e3o\ndefinida em <code>condition</code> com base nas vari\u00e1veis presentes no objeto <code>context</code>. Caso o resultado\nseja avaliado como verdadeiro, o m\u00e9todo <code>execute</code> do bloco de instru\u00e7\u00f5es \u00e9 invocado.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>context</strong> (Context):\nObjeto que cont\u00e9m as vari\u00e1veis e o estado necess\u00e1rio para a avalia\u00e7\u00e3o da condi\u00e7\u00e3o e execu\u00e7\u00e3o\ndo bloco de instru\u00e7\u00f5es.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">imperiumengine</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.instructions.indicator", "modulename": "imperiumengine.dsl.instructions.indicator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.indicator.IndicatorInstruction", "modulename": "imperiumengine.dsl.instructions.indicator", "qualname": "IndicatorInstruction", "kind": "class", "doc": "<p>Calcula um indicador de mercado a partir dos dados fornecidos.</p>\n\n<p>Esta classe realiza o c\u00e1lculo de um indicador de mercado com base nos par\u00e2metros\npresentes em um dicion\u00e1rio (<code>indicator_data</code>). Os indicadores suportados incluem:\n\"SMA\", \"EMA\", \"ATR\", \"BollingerBands\", \"MACD\" e \"RSI\". Para cada indicador, \u00e9\nposs\u00edvel configurar par\u00e2metros espec\u00edficos, como per\u00edodo, fonte dos pre\u00e7os, e outros\nvalores necess\u00e1rios para o c\u00e1lculo (por exemplo, \"fast\", \"slow\" e \"signal\" para o MACD).</p>\n\n<h2 id=\"parametros\">Par\u00e2metros</h2>\n\n<p>indicator_data : dict\n    Dicion\u00e1rio contendo os par\u00e2metros necess\u00e1rios para o c\u00e1lculo do indicador.\n    Par\u00e2metros esperados:\n      - \"name\" : str\n            Nome do indicador a ser calculado. Valores poss\u00edveis: \"SMA\", \"EMA\", \"ATR\",\n            \"BollingerBands\", \"MACD\", \"RSI\".\n      - \"period\" : int, opcional\n            Per\u00edodo utilizado no c\u00e1lculo do indicador (valor padr\u00e3o \u00e9 14).\n      - \"source\" : str, opcional\n            Nome da vari\u00e1vel no contexto que cont\u00e9m os pre\u00e7os (valor padr\u00e3o \"close\").\n      - \"var\" : str\n            Nome da vari\u00e1vel onde o resultado do indicador ser\u00e1 armazenado no contexto.\n      - Outros par\u00e2metros espec\u00edficos, como:\n            * \"multiplier\" para BollingerBands;\n            * \"fast\", \"slow\" e \"signal\" para MACD.</p>\n\n<h6 id=\"atributos\">Atributos</h6>\n\n<p>indicator_data : dict\n    Armazena os par\u00e2metros do indicador.\nlogger : logging.Logger\n    Logger utilizado para registrar informa\u00e7\u00f5es, debug e erros durante a execu\u00e7\u00e3o.</p>\n\n<h2 id=\"metodos\">M\u00e9todos</h2>\n\n<p>_compute_indicator(name: str, prices: list[float], context: Context) -> any\n    Calcula o valor do indicador com base no nome, na lista de pre\u00e7os e no contexto.\n_get_required_param(param_name: str) -> any\n    Recupera um par\u00e2metro obrigat\u00f3rio do dicion\u00e1rio <code>indicator_data</code>.\nexecute(context: Context) -> None\n    Executa o c\u00e1lculo do indicador e armazena o resultado no contexto.</p>\n\n<h6 id=\"exemplos\">Exemplos</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">imperiumengine.dsl.context</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Context</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Exemplo de configura\u00e7\u00e3o para c\u00e1lculo de SMA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dados</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;SMA&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">&quot;period&quot;</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">&quot;source&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;close&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">&quot;var&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;sma_result&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">indicador</span> <span class=\"o\">=</span> <span class=\"n\">IndicatorInstruction</span><span class=\"p\">(</span><span class=\"n\">dados</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Supondo que o contexto possua a lista de pre\u00e7os na vari\u00e1vel &quot;close&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">contexto</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">contexto</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"s2\">&quot;close&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">indicador</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">contexto</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># O resultado do c\u00e1lculo estar\u00e1 armazenado em contexto.variables[&quot;sma_result&quot;]</span>\n</code></pre>\n</div>\n"}, {"fullname": "imperiumengine.dsl.instructions.indicator.IndicatorInstruction.__init__", "modulename": "imperiumengine.dsl.instructions.indicator", "qualname": "IndicatorInstruction.__init__", "kind": "function", "doc": "<p>Inicializa a instru\u00e7\u00e3o de indicador com os dados fornecidos.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>indicator_data</strong> (dict):\nDicion\u00e1rio contendo os par\u00e2metros necess\u00e1rios para o c\u00e1lculo do indicador.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">indicator_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "imperiumengine.dsl.instructions.indicator.IndicatorInstruction.indicator_data", "modulename": "imperiumengine.dsl.instructions.indicator", "qualname": "IndicatorInstruction.indicator_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.indicator.IndicatorInstruction.logger", "modulename": "imperiumengine.dsl.instructions.indicator", "qualname": "IndicatorInstruction.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.indicator.IndicatorInstruction.execute", "modulename": "imperiumengine.dsl.instructions.indicator", "qualname": "IndicatorInstruction.execute", "kind": "function", "doc": "<p>Executa o c\u00e1lculo do indicador e armazena o resultado no contexto.</p>\n\n<p>Recupera os par\u00e2metros obrigat\u00f3rios (\"name\" e \"var\") e, opcionalmente, o par\u00e2metro \"source\"\n(com valor padr\u00e3o \"close\"). Em seguida, extrai a lista de pre\u00e7os do contexto e realiza o\nc\u00e1lculo do indicador por meio do m\u00e9todo <code>_compute_indicator</code>. O resultado \u00e9 armazenado em\n<code>context.variables</code> utilizando o nome da vari\u00e1vel especificado.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>context</strong> (Context):\nObjeto que cont\u00e9m as vari\u00e1veis e o estado de execu\u00e7\u00e3o. \u00c9 esperado que contenha os dados\n(por exemplo, pre\u00e7os) necess\u00e1rios para o c\u00e1lculo do indicador.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se ocorrer algum erro na execu\u00e7\u00e3o do c\u00e1lculo do indicador.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">imperiumengine</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.instructions.instruction", "modulename": "imperiumengine.dsl.instructions.instruction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.instruction.Instruction", "modulename": "imperiumengine.dsl.instructions.instruction", "qualname": "Instruction", "kind": "class", "doc": "<p>Classe base abstrata para instru\u00e7\u00f5es na DSL.</p>\n\n<p>Esta classe define a interface que todas as instru\u00e7\u00f5es devem implementar. Cada instru\u00e7\u00e3o\ndeve fornecer sua pr\u00f3pria implementa\u00e7\u00e3o do m\u00e9todo <code>execute(context)</code>, que cont\u00e9m a l\u00f3gica\npara executar a instru\u00e7\u00e3o utilizando o contexto fornecido.</p>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>execute(context: Context) -> None\n    Executa a instru\u00e7\u00e3o utilizando o contexto passado como par\u00e2metro.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>A seguir, um exemplo de como criar uma subclasse de <code>Instruction</code> e implementar o m\u00e9todo\n<code>execute</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">imperiumengine.dsl.context</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Context</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">DummyInstruction</span><span class=\"p\">(</span><span class=\"n\">Instruction</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Context</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>        <span class=\"c1\"># Supondo que o objeto Context possua um atributo &#39;variables&#39; do tipo dict.</span>\n<span class=\"gp\">... </span>        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"s1\">&#39;dummy&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;executado&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Cria\u00e7\u00e3o de um contexto dummy com um atributo &#39;variables&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">DummyContext</span><span class=\"p\">(</span><span class=\"n\">Context</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">contexto</span> <span class=\"o\">=</span> <span class=\"n\">DummyContext</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">instrucao</span> <span class=\"o\">=</span> <span class=\"n\">DummyInstruction</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">instrucao</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">contexto</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">contexto</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"s1\">&#39;dummy&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;executado&#39;</span>\n</code></pre>\n</div>\n", "bases": "abc.ABC"}, {"fullname": "imperiumengine.dsl.instructions.instruction.Instruction.execute", "modulename": "imperiumengine.dsl.instructions.instruction", "qualname": "Instruction.execute", "kind": "function", "doc": "<p>Executa a instru\u00e7\u00e3o utilizando o contexto fornecido.</p>\n\n<p>Este m\u00e9todo deve ser implementado pelas subclasses de <code>Instruction</code>. A implementa\u00e7\u00e3o\ndeve definir a l\u00f3gica de execu\u00e7\u00e3o da instru\u00e7\u00e3o, podendo modificar o estado ou as vari\u00e1veis\ndo objeto <code>context</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>context</strong> (Context):\nObjeto que cont\u00e9m o estado e as vari\u00e1veis necess\u00e1rias para a execu\u00e7\u00e3o da instru\u00e7\u00e3o.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: Se a subclasse n\u00e3o implementar este m\u00e9todo.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">imperiumengine</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.instructions.operation", "modulename": "imperiumengine.dsl.instructions.operation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.operation.OperationInstruction", "modulename": "imperiumengine.dsl.instructions.operation", "qualname": "OperationInstruction", "kind": "class", "doc": "<p>Executa uma opera\u00e7\u00e3o de c\u00f3digo dentro do contexto da DSL.</p>\n\n<p>Esta classe encapsula uma opera\u00e7\u00e3o representada por uma string que ser\u00e1 executada\nde forma segura atrav\u00e9s da fun\u00e7\u00e3o <code>safe_exec_statement</code>. A opera\u00e7\u00e3o \u00e9 avaliada utilizando\nas vari\u00e1veis presentes no contexto, permitindo a modifica\u00e7\u00e3o do estado ou a execu\u00e7\u00e3o de\nl\u00f3gicas definidas pela DSL.</p>\n\n<h2 id=\"parametros\">Par\u00e2metros</h2>\n\n<p>operation : str\n    String contendo o c\u00f3digo ou opera\u00e7\u00e3o a ser executada. Essa opera\u00e7\u00e3o deve ser compat\u00edvel\n    com a sintaxe esperada pelo interpretador da DSL.</p>\n\n<h6 id=\"atributos\">Atributos</h6>\n\n<p>operation : str\n    Armazena a opera\u00e7\u00e3o de c\u00f3digo que ser\u00e1 executada.\nlogger : logging.Logger\n    Inst\u00e2ncia do logger utilizada para registrar mensagens, erros e informa\u00e7\u00f5es durante a execu\u00e7\u00e3o\n    da opera\u00e7\u00e3o.</p>\n\n<h2 id=\"metodos\">M\u00e9todos</h2>\n\n<p>execute(context: Context) -> None\n    Executa a opera\u00e7\u00e3o de c\u00f3digo no contexto fornecido, utilizando as vari\u00e1veis presentes no\n    objeto <code>Context</code>.</p>\n\n<h6 id=\"exemplos\">Exemplos</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">imperiumengine.dsl.context</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Context</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Supondo que o contexto possua um atributo &#39;variables&#39; (um dicion\u00e1rio)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Cria\u00e7\u00e3o de uma opera\u00e7\u00e3o que incrementa a vari\u00e1vel &#39;x&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">instrucao_operacao</span> <span class=\"o\">=</span> <span class=\"n\">OperationInstruction</span><span class=\"p\">(</span><span class=\"s2\">&quot;x = x + 5&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">instrucao_operacao</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">15</span>\n</code></pre>\n</div>\n", "bases": "imperiumengine.dsl.instructions.instruction.Instruction"}, {"fullname": "imperiumengine.dsl.instructions.operation.OperationInstruction.__init__", "modulename": "imperiumengine.dsl.instructions.operation", "qualname": "OperationInstruction.__init__", "kind": "function", "doc": "<p>Inicializa a instru\u00e7\u00e3o de opera\u00e7\u00e3o com o c\u00f3digo a ser executado.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>operation</strong> (str):\nString representando a opera\u00e7\u00e3o de c\u00f3digo que ser\u00e1 executada.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "imperiumengine.dsl.instructions.operation.OperationInstruction.operation", "modulename": "imperiumengine.dsl.instructions.operation", "qualname": "OperationInstruction.operation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.operation.OperationInstruction.logger", "modulename": "imperiumengine.dsl.instructions.operation", "qualname": "OperationInstruction.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.operation.OperationInstruction.execute", "modulename": "imperiumengine.dsl.instructions.operation", "qualname": "OperationInstruction.execute", "kind": "function", "doc": "<p>Executa a opera\u00e7\u00e3o de c\u00f3digo utilizando o contexto fornecido.</p>\n\n<p>A execu\u00e7\u00e3o \u00e9 realizada atrav\u00e9s da fun\u00e7\u00e3o <code>safe_exec_statement</code>, que avalia e executa a\nopera\u00e7\u00e3o de forma segura, utilizando as vari\u00e1veis presentes no objeto <code>context</code>. Caso a\nexecu\u00e7\u00e3o seja bem-sucedida, uma mensagem de log \u00e9 registrada. Em caso de erro relacionado \u00e0\nDSL (DSLError) ou qualquer outro erro inesperado, a exce\u00e7\u00e3o \u00e9 registrada e propagada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>context</strong> (Context):\nObjeto que cont\u00e9m as vari\u00e1veis e o estado necess\u00e1rio para a execu\u00e7\u00e3o da opera\u00e7\u00e3o. \u00c9\nesperado que o contexto possua um atributo <code>variables</code> (do tipo dict) onde os valores\npodem ser modificados.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se ocorrer um erro durante a execu\u00e7\u00e3o da opera\u00e7\u00e3o, seja ele esperado (DSLError) ou\ninesperado, uma exce\u00e7\u00e3o DSLError \u00e9 levantada.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">imperiumengine</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.instructions.trade", "modulename": "imperiumengine.dsl.instructions.trade", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.trade.TradeInstruction", "modulename": "imperiumengine.dsl.instructions.trade", "qualname": "TradeInstruction", "kind": "class", "doc": "<p>Executa uma opera\u00e7\u00e3o de trade e registra os dados no contexto.</p>\n\n<p>Esta classe representa uma instru\u00e7\u00e3o que processa uma opera\u00e7\u00e3o de trade. Ao ser executada,\nos dados do trade s\u00e3o adicionados \u00e0 lista de trades presente nas vari\u00e1veis do contexto.\nSe a chave \"trades\" n\u00e3o existir no contexto, ela ser\u00e1 criada e inicializada como uma lista.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>trade_data</strong> (dict):\nDicion\u00e1rio contendo os dados do trade. Geralmente, espera-se que contenha chaves como:\n<ul>\n<li>\"action\": A a\u00e7\u00e3o do trade (por exemplo, \"buy\" ou \"sell\").</li>\n<li>\"symbol\": O s\u00edmbolo do ativo (por exemplo, \"AAPL\").</li>\n<li>\"quantity\": A quantidade a ser negociada.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>trade_data</strong> (dict):\nArmazena os dados do trade que ser\u00e3o processados.</li>\n<li><strong>logger</strong> (logging.Logger):\nLogger utilizado para registrar informa\u00e7\u00f5es, mensagens de debug e erros durante a execu\u00e7\u00e3o\nda instru\u00e7\u00e3o.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>execute(context: Context) -> None\n    Executa a instru\u00e7\u00e3o de trade, adicionando os dados do trade \u00e0 lista de trades presente no contexto.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">imperiumengine.dsl.context</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Context</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">imperiumengine.dsl.instructions.trade</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">TradeInstruction</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Cria\u00e7\u00e3o de um contexto simples com um dicion\u00e1rio de vari\u00e1veis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Dados do trade a ser executado</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trade_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;action&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;buy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;symbol&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AAPL&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;quantity&quot;</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Cria\u00e7\u00e3o da instru\u00e7\u00e3o de trade</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trade_instr</span> <span class=\"o\">=</span> <span class=\"n\">TradeInstruction</span><span class=\"p\">(</span><span class=\"n\">trade_data</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Execu\u00e7\u00e3o da instru\u00e7\u00e3o de trade</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trade_instr</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Verifica se os dados do trade foram adicionados ao contexto</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"s2\">&quot;trades&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">[{&#39;action&#39;: &#39;buy&#39;, &#39;symbol&#39;: &#39;AAPL&#39;, &#39;quantity&#39;: 100}]</span>\n</code></pre>\n</div>\n", "bases": "imperiumengine.dsl.instructions.instruction.Instruction"}, {"fullname": "imperiumengine.dsl.instructions.trade.TradeInstruction.__init__", "modulename": "imperiumengine.dsl.instructions.trade", "qualname": "TradeInstruction.__init__", "kind": "function", "doc": "<p>Inicializa a instru\u00e7\u00e3o de trade com os dados fornecidos.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>trade_data</strong> (dict):\nDicion\u00e1rio contendo os dados do trade.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">trade_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "imperiumengine.dsl.instructions.trade.TradeInstruction.trade_data", "modulename": "imperiumengine.dsl.instructions.trade", "qualname": "TradeInstruction.trade_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.trade.TradeInstruction.logger", "modulename": "imperiumengine.dsl.instructions.trade", "qualname": "TradeInstruction.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.trade.TradeInstruction.execute", "modulename": "imperiumengine.dsl.instructions.trade", "qualname": "TradeInstruction.execute", "kind": "function", "doc": "<p>Executa a instru\u00e7\u00e3o de trade, registrando os dados no contexto.</p>\n\n<p>O m\u00e9todo adiciona os dados do trade \u00e0 lista associada \u00e0 chave \"trades\" no dicion\u00e1rio\nde vari\u00e1veis do contexto. Se a chave n\u00e3o existir, ela \u00e9 criada com uma lista vazia.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>context</strong> (Context):\nObjeto que cont\u00e9m o estado e as vari\u00e1veis necess\u00e1rias para a execu\u00e7\u00e3o da instru\u00e7\u00e3o.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>: Se ocorrer um erro inesperado durante a execu\u00e7\u00e3o da opera\u00e7\u00e3o de trade.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">imperiumengine</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.instructions.wait_instruction", "modulename": "imperiumengine.dsl.instructions.wait_instruction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.wait_instruction.MIN_WAIT_LENGTH", "modulename": "imperiumengine.dsl.instructions.wait_instruction", "qualname": "MIN_WAIT_LENGTH", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "imperiumengine.dsl.instructions.wait_instruction.WaitInstruction", "modulename": "imperiumengine.dsl.instructions.wait_instruction", "qualname": "WaitInstruction", "kind": "class", "doc": "<p>Instru\u00e7\u00e3o de espera que pausa a execu\u00e7\u00e3o por um determinado per\u00edodo.</p>\n\n<p>Esta instru\u00e7\u00e3o realiza uma pausa na execu\u00e7\u00e3o utilizando a fun\u00e7\u00e3o <code>time.sleep</code>.\nO tempo de espera pode ser especificado como um valor num\u00e9rico (int ou float) ou como uma\nstring que contenha um valor num\u00e9rico seguido de uma unidade de tempo. As unidades suportadas\ns\u00e3o:</p>\n\n<ul>\n<li>'s' para segundos;</li>\n<li>'m' para minutos;</li>\n<li>'h' para horas.</li>\n</ul>\n\n<p>Se o valor de espera informado for inferior a {MIN_WAIT_LENGTH} segundos, o tempo de espera\nser\u00e1 ajustado para {MIN_WAIT_LENGTH} segundos, garantindo uma pausa m\u00ednima.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>duration</strong> (int, float ou str):\nValor que representa o tempo de espera. Se for num\u00e9rico, \u00e9 interpretado em segundos.\nSe for uma string, deve ser um n\u00famero seguido de uma unidade ('s', 'm' ou 'h').\nExemplos:\n<ul>\n<li>5 ou 5.0: 5 segundos;</li>\n<li>'3s': 3 segundos;</li>\n<li>'1.5m': 90 segundos;</li>\n<li>'0.5h': 1800 segundos.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>duration</strong> (float):\nDura\u00e7\u00e3o da espera em segundos, ap\u00f3s a convers\u00e3o e valida\u00e7\u00e3o.</li>\n<li><strong>logger</strong> (logging.Logger):\nLogger utilizado para registrar mensagens, avisos e erros durante a execu\u00e7\u00e3o.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se a unidade de tempo na string for inv\u00e1lida ou se o formato da string for incorreto.</li>\n<li><strong>TypeError</strong>: Se o valor informado n\u00e3o for num\u00e9rico nem uma string com unidade.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">time</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">imperiumengine.dsl.context</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Context</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Cria\u00e7\u00e3o de um contexto dummy para testes</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">DummyContext</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">DummyContext</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Exemplo com valor num\u00e9rico inferior ao m\u00ednimo (1 segundo \u00e9 ajustado para 2 segundos)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">WaitInstruction</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">inicio</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elapsed</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">inicio</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elapsed</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Exemplo com string e unidade: &#39;3s&#39; para 3 segundos</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">w2</span> <span class=\"o\">=</span> <span class=\"n\">WaitInstruction</span><span class=\"p\">(</span><span class=\"s2\">&quot;3s&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">inicio</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">w2</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elapsed</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">inicio</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elapsed</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "bases": "imperiumengine.dsl.instructions.instruction.Instruction"}, {"fullname": "imperiumengine.dsl.instructions.wait_instruction.WaitInstruction.__init__", "modulename": "imperiumengine.dsl.instructions.wait_instruction", "qualname": "WaitInstruction.__init__", "kind": "function", "doc": "<p>Inicializa a instru\u00e7\u00e3o de espera com a dura\u00e7\u00e3o especificada.</p>\n\n<p>Converte o valor informado para segundos, de acordo com o tipo e a unidade especificada.\nCaso o valor seja num\u00e9rico, ele \u00e9 interpretado diretamente como segundos. Se for uma string,\no \u00faltimo caractere \u00e9 considerado a unidade de tempo e o restante \u00e9 convertido para float.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>duration</strong> (int, float ou str):\nValor que representa o tempo de espera. Exemplos:\n<ul>\n<li>5 ou 5.0: 5 segundos;</li>\n<li>'3s': 3 segundos;</li>\n<li>'1.5m': 90 segundos;</li>\n<li>'0.5h': 1800 segundos.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se a unidade de tempo na string for inv\u00e1lida (diferente de 's', 'm' ou 'h') ou se o\nformato for incorreto.</li>\n<li><strong>TypeError</strong>: Se o valor informado n\u00e3o for num\u00e9rico nem uma string com unidade.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "imperiumengine.dsl.instructions.wait_instruction.WaitInstruction.logger", "modulename": "imperiumengine.dsl.instructions.wait_instruction", "qualname": "WaitInstruction.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.instructions.wait_instruction.WaitInstruction.execute", "modulename": "imperiumengine.dsl.instructions.wait_instruction", "qualname": "WaitInstruction.execute", "kind": "function", "doc": "<p>Executa a instru\u00e7\u00e3o de espera, pausando a execu\u00e7\u00e3o pelo per\u00edodo especificado.</p>\n\n<p>Este m\u00e9todo utiliza a fun\u00e7\u00e3o <code>time.sleep</code> para pausar a execu\u00e7\u00e3o por <code>self.duration</code>\nsegundos. Durante a espera, mensagens de log s\u00e3o registradas para indicar o in\u00edcio e o\nt\u00e9rmino da opera\u00e7\u00e3o.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>context</strong> (Context):\nObjeto que cont\u00e9m o estado e as vari\u00e1veis do contexto de execu\u00e7\u00e3o. Embora este m\u00e9todo\nn\u00e3o modifique o contexto, ele o utiliza para manter a consist\u00eancia na interface das\ninstru\u00e7\u00f5es.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>: Se ocorrer um erro inesperado durante a execu\u00e7\u00e3o da espera.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">imperiumengine</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.interpreter", "modulename": "imperiumengine.dsl.interpreter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.interpreter.DSLInterpreter", "modulename": "imperiumengine.dsl.interpreter", "qualname": "DSLInterpreter", "kind": "class", "doc": "<p>Interpreta a estrat\u00e9gia definida na DSL.</p>\n\n<p>Esta classe \u00e9 respons\u00e1vel por interpretar e executar uma estrat\u00e9gia definida por uma DSL. Ela\ngerencia o contexto de execu\u00e7\u00e3o, carrega os dados de mercado utilizando um provedor de dados e\nexecuta a instru\u00e7\u00e3o raiz da estrat\u00e9gia. Durante a execu\u00e7\u00e3o, mensagens de log s\u00e3o registradas para\nfacilitar o monitoramento e a depura\u00e7\u00e3o.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>root_instruction</strong> (Instruction):\nInstru\u00e7\u00e3o raiz que representa a estrat\u00e9gia a ser executada. Essa instru\u00e7\u00e3o deve ser uma\ninst\u00e2ncia de uma classe que implemente o m\u00e9todo <code>execute(context)</code>.</li>\n<li><strong>market_data_provider</strong> (IMarketDataProvider):\nProvedor de dados de mercado que ser\u00e1 utilizado para carregar os dados necess\u00e1rios \u00e0 estrat\u00e9gia.\nEsse objeto deve implementar o m\u00e9todo <code>get_market_data(symbol, interval, limit)</code>.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>logger</strong> (logging.Logger):\nLogger utilizado para registrar informa\u00e7\u00f5es, avisos e erros durante a execu\u00e7\u00e3o da estrat\u00e9gia.</li>\n<li><strong>root_instruction</strong> (Instruction):\nInstru\u00e7\u00e3o raiz que define a estrat\u00e9gia DSL.</li>\n<li><strong>market_data_provider</strong> (IMarketDataProvider):\nInst\u00e2ncia do provedor de dados de mercado.</li>\n<li><strong>context</strong> (Context):\nContexto de execu\u00e7\u00e3o que armazena as vari\u00e1veis utilizadas durante a execu\u00e7\u00e3o da estrat\u00e9gia.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>load_market_data(symbol: str, interval: str, limit: int) -> None\n    Carrega os dados de mercado para um s\u00edmbolo espec\u00edfico, atualizando o contexto com os dados obtidos.\nrun() -> None\n    Executa a estrat\u00e9gia DSL chamando o m\u00e9todo <code>execute</code> da instru\u00e7\u00e3o raiz com o contexto atual.</p>\n\n<h2 id=\"examples\">Examples</h2>\n"}, {"fullname": "imperiumengine.dsl.interpreter.DSLInterpreter.__init__", "modulename": "imperiumengine.dsl.interpreter", "qualname": "DSLInterpreter.__init__", "kind": "function", "doc": "<p>Inicializa o interpretador DSL com a instru\u00e7\u00e3o raiz e o provedor de dados de mercado.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>root_instruction</strong> (Instruction):\nInstru\u00e7\u00e3o raiz que define a estrat\u00e9gia a ser executada.</li>\n<li><strong>market_data_provider</strong> (IMarketDataProvider):\nProvedor de dados de mercado para carregar os dados necess\u00e1rios \u00e0 execu\u00e7\u00e3o da estrat\u00e9gia.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">root_instruction</span>,</span><span class=\"param\">\t<span class=\"n\">market_data_provider</span><span class=\"p\">:</span> <span class=\"n\">imperiumengine</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">market_data</span><span class=\"o\">.</span><span class=\"n\">IMarketDataProvider</span></span>)</span>"}, {"fullname": "imperiumengine.dsl.interpreter.DSLInterpreter.logger", "modulename": "imperiumengine.dsl.interpreter", "qualname": "DSLInterpreter.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.interpreter.DSLInterpreter.root_instruction", "modulename": "imperiumengine.dsl.interpreter", "qualname": "DSLInterpreter.root_instruction", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.interpreter.DSLInterpreter.market_data_provider", "modulename": "imperiumengine.dsl.interpreter", "qualname": "DSLInterpreter.market_data_provider", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.interpreter.DSLInterpreter.context", "modulename": "imperiumengine.dsl.interpreter", "qualname": "DSLInterpreter.context", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.interpreter.DSLInterpreter.load_market_data", "modulename": "imperiumengine.dsl.interpreter", "qualname": "DSLInterpreter.load_market_data", "kind": "function", "doc": "<p>Carrega os dados de mercado e atualiza o contexto.</p>\n\n<p>Utiliza o provedor de dados de mercado para obter os dados correspondentes ao s\u00edmbolo,\nintervalo e limite especificados. Ap\u00f3s obter os dados, o contexto de execu\u00e7\u00e3o \u00e9 atualizado\ncom as informa\u00e7\u00f5es, permitindo que a estrat\u00e9gia utilize esses dados durante sua execu\u00e7\u00e3o.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>symbol</strong> (str):\nS\u00edmbolo do ativo (ex.: \"AAPL\") para o qual os dados de mercado ser\u00e3o carregados.</li>\n<li><strong>interval</strong> (str):\nIntervalo de tempo dos dados (ex.: \"1h\" para uma hora).</li>\n<li><strong>limit</strong> (int):\nN\u00famero m\u00e1ximo de registros de dados a serem carregados.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se ocorrer algum erro durante a obten\u00e7\u00e3o ou atualiza\u00e7\u00e3o dos dados de mercado.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">symbol</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.interpreter.DSLInterpreter.run", "modulename": "imperiumengine.dsl.interpreter", "qualname": "DSLInterpreter.run", "kind": "function", "doc": "<p>Executa a estrat\u00e9gia DSL.</p>\n\n<p>Inicia a execu\u00e7\u00e3o da estrat\u00e9gia chamando o m\u00e9todo <code>execute</code> da instru\u00e7\u00e3o raiz com o contexto\natual. Durante a execu\u00e7\u00e3o, mensagens de log s\u00e3o registradas para monitoramento e diagn\u00f3stico.\nEm caso de erros durante a execu\u00e7\u00e3o, as exce\u00e7\u00f5es s\u00e3o capturadas, logadas e relan\u00e7adas como\n<code>DSLError</code>.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se ocorrer um erro durante a execu\u00e7\u00e3o da estrat\u00e9gia.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.market_data", "modulename": "imperiumengine.dsl.market_data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.market_data.IMarketDataProvider", "modulename": "imperiumengine.dsl.market_data", "qualname": "IMarketDataProvider", "kind": "class", "doc": "<p>Interface para provedores de dados de mercado.</p>\n\n<p>Esta interface define o contrato que deve ser implementado por qualquer classe que forne\u00e7a\ndados de mercado para a estrat\u00e9gia DSL. A implementa\u00e7\u00e3o deve fornecer o m\u00e9todo\n<code>get_market_data</code>, que obt\u00e9m os dados de mercado para um determinado s\u00edmbolo, intervalo e\nquantidade m\u00e1xima de registros.</p>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>get_market_data(symbol: str, interval: str, limit: int) -> dict[str, any]\n    Obt\u00e9m os dados de mercado para o s\u00edmbolo, intervalo e limite especificados.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se ocorrer um erro durante a obten\u00e7\u00e3o dos dados de mercado.</li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "imperiumengine.dsl.market_data.IMarketDataProvider.get_market_data", "modulename": "imperiumengine.dsl.market_data", "qualname": "IMarketDataProvider.get_market_data", "kind": "function", "doc": "<p>Obt\u00e9m os dados de mercado para o s\u00edmbolo, intervalo e limite especificados.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>symbol</strong> (str):\nS\u00edmbolo do ativo para o qual os dados de mercado ser\u00e3o obtidos (ex.: \"BTCUSDT\").</li>\n<li><strong>interval</strong> (str):\nIntervalo de tempo para os dados de mercado (ex.: \"1h\", \"1d\").</li>\n<li><strong>limit</strong> (int):\nN\u00famero m\u00e1ximo de registros de dados a serem retornados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict[str, any]</strong>: Dicion\u00e1rio contendo os dados de mercado. A estrutura do dicion\u00e1rio depender\u00e1 da implementa\u00e7\u00e3o,\nmas normalmente inclui listas de pre\u00e7os de fechamento, m\u00e1xima e m\u00ednima.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se ocorrer um erro na obten\u00e7\u00e3o dos dados de mercado.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">symbol</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.market_data.BinanceMarketDataProvider", "modulename": "imperiumengine.dsl.market_data", "qualname": "BinanceMarketDataProvider", "kind": "class", "doc": "<p>Implementa\u00e7\u00e3o de provedor de dados de mercado utilizando a API da Binance.</p>\n\n<p>Esta classe utiliza a biblioteca <code>binance.client.Client</code> para se conectar \u00e0 API da Binance e\nobter os dados de mercado (klines) para um s\u00edmbolo espec\u00edfico. Os dados obtidos s\u00e3o processados\npara extrair as listas de pre\u00e7os de fechamento, m\u00e1xima e m\u00ednima.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_key</strong> (str, optional):\nChave de API para autentica\u00e7\u00e3o na Binance. Valor padr\u00e3o \u00e9 uma string vazia.</li>\n<li><strong>api_secret</strong> (str, optional):\nSegredo da API para autentica\u00e7\u00e3o na Binance. Valor padr\u00e3o \u00e9 uma string vazia.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>client</strong> (Client):\nInst\u00e2ncia do cliente Binance utilizada para obter os dados de mercado.</li>\n<li><strong>logger</strong> (logging.Logger):\nLogger utilizado para registrar informa\u00e7\u00f5es, avisos e erros durante a execu\u00e7\u00e3o.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>get_market_data(symbol: str, interval: str, limit: int) -> dict[str, any]\n    Obt\u00e9m os dados de mercado (klines) para o s\u00edmbolo, intervalo e limite especificados e\n    retorna um dicion\u00e1rio com listas de pre\u00e7os de fechamento, alta e baixa.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se ocorrer um erro durante a inicializa\u00e7\u00e3o do cliente ou na obten\u00e7\u00e3o dos dados de mercado.</li>\n</ul>\n", "bases": "IMarketDataProvider"}, {"fullname": "imperiumengine.dsl.market_data.BinanceMarketDataProvider.__init__", "modulename": "imperiumengine.dsl.market_data", "qualname": "BinanceMarketDataProvider.__init__", "kind": "function", "doc": "<p>Inicializa a inst\u00e2ncia do BinanceMarketDataProvider.</p>\n\n<p>Tenta criar uma inst\u00e2ncia do cliente Binance utilizando as credenciais fornecidas.\nCaso ocorra algum erro durante a inicializa\u00e7\u00e3o, uma exce\u00e7\u00e3o <code>DSLError</code> \u00e9 lan\u00e7ada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_key</strong> (str, optional):\nChave de API para autentica\u00e7\u00e3o na Binance. Valor padr\u00e3o \u00e9 uma string vazia.</li>\n<li><strong>api_secret</strong> (str, optional):\nSegredo da API para autentica\u00e7\u00e3o na Binance. Valor padr\u00e3o \u00e9 uma string vazia.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se ocorrer um erro ao inicializar o cliente da Binance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">api_secret</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "imperiumengine.dsl.market_data.BinanceMarketDataProvider.logger", "modulename": "imperiumengine.dsl.market_data", "qualname": "BinanceMarketDataProvider.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.market_data.BinanceMarketDataProvider.get_market_data", "modulename": "imperiumengine.dsl.market_data", "qualname": "BinanceMarketDataProvider.get_market_data", "kind": "function", "doc": "<p>Obt\u00e9m os dados de mercado para um s\u00edmbolo utilizando a API da Binance.</p>\n\n<p>Este m\u00e9todo utiliza o cliente Binance para buscar os dados de mercado (klines) para o s\u00edmbolo\nespecificado, em um intervalo de tempo definido e com um limite de registros. A partir dos\nklines, s\u00e3o extra\u00eddas as listas de pre\u00e7os de fechamento, m\u00e1xima e m\u00ednima.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>symbol</strong> (str):\nS\u00edmbolo do ativo para o qual os dados ser\u00e3o obtidos (ex.: \"BTCUSDT\").</li>\n<li><strong>interval</strong> (str):\nIntervalo de tempo dos dados (ex.: \"1h\" para uma hora, \"1d\" para um dia).</li>\n<li><strong>limit</strong> (int):\nN\u00famero m\u00e1ximo de registros de dados a serem retornados.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict[str, any]</strong>: Dicion\u00e1rio contendo os dados de mercado com as seguintes chaves:\n<ul>\n<li>\"close\": lista de pre\u00e7os de fechamento.</li>\n<li>\"high\": lista de pre\u00e7os m\u00e1ximos.</li>\n<li>\"low\": lista de pre\u00e7os m\u00ednimos.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se ocorrer um erro ao obter os dados de mercado da Binance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">symbol</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.parser", "modulename": "imperiumengine.dsl.parser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.parser.DSLParser", "modulename": "imperiumengine.dsl.parser", "qualname": "DSLParser", "kind": "class", "doc": "<p>Analisa uma lista de dicion\u00e1rios de instru\u00e7\u00f5es e gera um CompoundInstruction.</p>\n\n<p>Esta classe \u00e9 respons\u00e1vel por converter uma lista de dicion\u00e1rios que representam instru\u00e7\u00f5es\nda DSL em uma inst\u00e2ncia de CompoundInstruction. Durante o processo de parsing, s\u00e3o identificados\ndiferentes tipos de instru\u00e7\u00f5es (como \"if\", \"operation\", \"indicator\", \"trade\", \"wait\") e utilizadas\nas respectivas classes de instru\u00e7\u00e3o para sua representa\u00e7\u00e3o. Blocos condicionais s\u00e3o processados de\nforma recursiva, e a presen\u00e7a de instru\u00e7\u00f5es \"end\" \u00e9 utilizada para delimitar o fim de um bloco \"if\".</p>\n\n<p>Se, ao final do parsing, houver instru\u00e7\u00f5es n\u00e3o processadas ou se um bloco condicional n\u00e3o for\ndevidamente fechado, uma exce\u00e7\u00e3o DSLError \u00e9 levantada.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>logger</strong> (logging.Logger):\nLogger utilizado para registrar mensagens de informa\u00e7\u00e3o, debug e avisos durante o parsing.\nDefinido como atributo de classe.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>parse(instructions_list: list[dict[str, Any]]) -> CompoundInstruction\n    Converte uma lista completa de instru\u00e7\u00f5es em um CompoundInstruction.\n_parse_block(instructions: list[dict[str, Any]], start: int, *, stop_at_end: bool = False) -> tuple[CompoundInstruction, int]\n    Processa recursivamente um bloco de instru\u00e7\u00f5es a partir do \u00edndice especificado, retornando o\n    CompoundInstruction resultante e o \u00edndice do final do bloco.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se houver instru\u00e7\u00f5es n\u00e3o processadas ap\u00f3s o parsing ou se um bloco iniciado com \"if\" n\u00e3o for\nfechado com \"end\".</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Um exemplo simples de parsing com uma \u00fanica instru\u00e7\u00e3o de opera\u00e7\u00e3o:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">instructions</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">&quot;operation&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;x = 1&quot;</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">compound</span> <span class=\"o\">=</span> <span class=\"n\">DSLParser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">instructions</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Verifica se a primeira instru\u00e7\u00e3o analisada \u00e9 do tipo OperationInstruction</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">compound</span><span class=\"o\">.</span><span class=\"n\">instructions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"go\">&#39;OperationInstruction&#39;</span>\n</code></pre>\n</div>\n"}, {"fullname": "imperiumengine.dsl.parser.DSLParser.__init__", "modulename": "imperiumengine.dsl.parser", "qualname": "DSLParser.__init__", "kind": "function", "doc": "<p>Inicializa uma inst\u00e2ncia de DSLParser.</p>\n\n<p>Registra a inicializa\u00e7\u00e3o do parser por meio do logger.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">DSLParser</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">DSLParser</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "imperiumengine.dsl.parser.DSLParser.logger", "modulename": "imperiumengine.dsl.parser", "qualname": "DSLParser.logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger DSLParser (DEBUG)&gt;"}, {"fullname": "imperiumengine.dsl.parser.DSLParser.parse", "modulename": "imperiumengine.dsl.parser", "qualname": "DSLParser.parse", "kind": "function", "doc": "<p>Converte uma lista de instru\u00e7\u00f5es em um CompoundInstruction.</p>\n\n<p>Este m\u00e9todo inicia o processo de parsing para a lista completa de instru\u00e7\u00f5es da estrat\u00e9gia.\nEle chama o m\u00e9todo auxiliar _parse_block para processar recursivamente as instru\u00e7\u00f5es e,\nao final, verifica se todas as instru\u00e7\u00f5es foram processadas. Caso contr\u00e1rio, uma exce\u00e7\u00e3o\nDSLError \u00e9 levantada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instructions_list</strong> (list of dict[str, Any]):\nLista de dicion\u00e1rios onde cada dicion\u00e1rio representa uma instru\u00e7\u00e3o da DSL. As chaves dos\ndicion\u00e1rios podem incluir \"if\", \"operation\", \"indicator\", \"trade\", \"wait\" e \"end\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>CompoundInstruction</strong>: Uma inst\u00e2ncia de CompoundInstruction contendo todas as instru\u00e7\u00f5es analisadas.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se houver instru\u00e7\u00f5es n\u00e3o processadas ap\u00f3s o parsing.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">instructions</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">&quot;operation&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;x = 1&quot;</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">compound</span> <span class=\"o\">=</span> <span class=\"n\">DSLParser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">instructions</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">compound</span><span class=\"o\">.</span><span class=\"n\">instructions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"go\">&#39;OperationInstruction&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">instructions_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">imperiumengine</span><span class=\"o\">.</span><span class=\"n\">dsl</span><span class=\"o\">.</span><span class=\"n\">instructions</span><span class=\"o\">.</span><span class=\"n\">compound_instruction</span><span class=\"o\">.</span><span class=\"n\">CompoundInstruction</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.utils", "modulename": "imperiumengine.dsl.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.utils.compute_sma", "modulename": "imperiumengine.dsl.utils", "qualname": "compute_sma", "kind": "function", "doc": "<p>Calcula a M\u00e9dia M\u00f3vel Simples (SMA) para uma lista de pre\u00e7os.</p>\n\n<p>A SMA \u00e9 definida como a m\u00e9dia aritm\u00e9tica dos \u00faltimos <code>period</code> valores da lista de pre\u00e7os.\nSe a quantidade de pre\u00e7os for menor que o per\u00edodo especificado, uma exce\u00e7\u00e3o DSLError \u00e9 levantada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prices</strong> (list of float):\nLista de pre\u00e7os.</li>\n<li><strong>period</strong> (int):\nPer\u00edodo utilizado para o c\u00e1lculo da m\u00e9dia.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Valor da M\u00e9dia M\u00f3vel Simples calculada.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se o n\u00famero de pre\u00e7os for insuficiente para o per\u00edodo solicitado.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">compute_sma</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">4.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.utils.compute_ema", "modulename": "imperiumengine.dsl.utils", "qualname": "compute_ema", "kind": "function", "doc": "<p>Calcula a M\u00e9dia M\u00f3vel Exponencial (EMA) para uma lista de pre\u00e7os.</p>\n\n<p>A EMA \u00e9 calculada utilizando a SMA dos primeiros <code>period</code> valores como ponto de partida,\ne aplicando um fator de suaviza\u00e7\u00e3o em cada valor subsequente. Se a quantidade de pre\u00e7os for\ninsuficiente para o per\u00edodo, uma exce\u00e7\u00e3o DSLError \u00e9 levantada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prices</strong> (list of float):\nLista de pre\u00e7os.</li>\n<li><strong>period</strong> (int):\nPer\u00edodo para o c\u00e1lculo da EMA.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Valor da M\u00e9dia M\u00f3vel Exponencial calculada.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se o n\u00famero de pre\u00e7os for insuficiente para o per\u00edodo solicitado.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">compute_ema</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">4.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.utils.compute_atr", "modulename": "imperiumengine.dsl.utils", "qualname": "compute_atr", "kind": "function", "doc": "<p>Calcula a M\u00e9dia de Intervalo Verdadeiro (ATR) a partir das listas de pre\u00e7os m\u00e1ximos, m\u00ednimos e de fechamento.</p>\n\n<p>O ATR \u00e9 obtido calculando o True Range (TR) para cada per\u00edodo e, em seguida, fazendo a m\u00e9dia dos\n\u00faltimos <code>period</code> valores de TR. Se a quantidade de dados for insuficiente, uma exce\u00e7\u00e3o DSLError \u00e9 levantada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>highs</strong> (list of float):\nLista de pre\u00e7os m\u00e1ximos.</li>\n<li><strong>lows</strong> (list of float):\nLista de pre\u00e7os m\u00ednimos.</li>\n<li><strong>closes</strong> (list of float):\nLista de pre\u00e7os de fechamento.</li>\n<li><strong>period</strong> (int):\nPer\u00edodo utilizado para o c\u00e1lculo do ATR.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Valor do ATR calculado.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se a quantidade de dados for insuficiente para o per\u00edodo solicitado.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">highs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lows</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">closes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">compute_atr</span><span class=\"p\">(</span><span class=\"n\">highs</span><span class=\"p\">,</span> <span class=\"n\">lows</span><span class=\"p\">,</span> <span class=\"n\">closes</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">2.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">highs</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">lows</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">closes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.utils.compute_bollinger_bands", "modulename": "imperiumengine.dsl.utils", "qualname": "compute_bollinger_bands", "kind": "function", "doc": "<p>Calcula as Bandas de Bollinger para uma lista de pre\u00e7os.</p>\n\n<p>As Bandas de Bollinger s\u00e3o compostas pela m\u00e9dia m\u00f3vel simples (banda do meio) e pelas bandas\nsuperior e inferior, que s\u00e3o definidas como a m\u00e9dia mais (ou menos) o <code>multiplier</code> vezes o\ndesvio padr\u00e3o dos \u00faltimos <code>period</code> valores. Se a quantidade de pre\u00e7os for insuficiente,\numa exce\u00e7\u00e3o DSLError \u00e9 levantada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prices</strong> (list of float):\nLista de pre\u00e7os.</li>\n<li><strong>period</strong> (int):\nPer\u00edodo utilizado para o c\u00e1lculo da m\u00e9dia e do desvio padr\u00e3o.</li>\n<li><strong>multiplier</strong> (float):\nFator multiplicador para o desvio padr\u00e3o, utilizado no c\u00e1lculo das bandas superior e inferior.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict of {str</strong> (float}):\nDicion\u00e1rio com as chaves \"lower\", \"middle\" e \"upper\", representando, respectivamente,\na banda inferior, a banda central (m\u00e9dia) e a banda superior.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se o n\u00famero de pre\u00e7os for insuficiente para o per\u00edodo solicitado.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bands</span> <span class=\"o\">=</span> <span class=\"n\">compute_bollinger_bands</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">bands</span><span class=\"p\">[</span><span class=\"s2\">&quot;middle&quot;</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">3.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">bands</span><span class=\"p\">[</span><span class=\"s2\">&quot;upper&quot;</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">6.16</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">bands</span><span class=\"p\">[</span><span class=\"s2\">&quot;lower&quot;</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">-0.16</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">multiplier</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.utils.compute_ema_series", "modulename": "imperiumengine.dsl.utils", "qualname": "compute_ema_series", "kind": "function", "doc": "<p>Calcula a s\u00e9rie da M\u00e9dia M\u00f3vel Exponencial (EMA) para uma lista de pre\u00e7os.</p>\n\n<p>Utiliza a m\u00e9dia m\u00f3vel simples dos primeiros <code>period</code> valores como ponto de partida e,\nem seguida, calcula a EMA para os valores subsequentes. Se a quantidade de pre\u00e7os for insuficiente,\numa exce\u00e7\u00e3o DSLError \u00e9 levantada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prices</strong> (list of float):\nLista de pre\u00e7os.</li>\n<li><strong>period</strong> (int):\nPer\u00edodo para o c\u00e1lculo da EMA.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list of float</strong>: Lista contendo os valores da EMA calculados para cada pre\u00e7o ap\u00f3s o per\u00edodo inicial.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se o n\u00famero de pre\u00e7os for insuficiente para o per\u00edodo solicitado.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">compute_ema_series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">[3.0, 4.0]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.utils.compute_macd", "modulename": "imperiumengine.dsl.utils", "qualname": "compute_macd", "kind": "function", "doc": "<p>Calcula o Moving Average Convergence Divergence (MACD) para uma lista de pre\u00e7os.</p>\n\n<p>O MACD \u00e9 definido como a diferen\u00e7a entre duas EMAs com per\u00edodos diferentes (<code>fast</code> e <code>slow</code>).\nEm seguida, \u00e9 calculada uma EMA da s\u00e9rie MACD (denominada \"signal\") e o histograma \u00e9 obtido\nsubtraindo-se o valor do signal do \u00faltimo valor da s\u00e9rie MACD. Se a quantidade de pre\u00e7os for\ninsuficiente para os per\u00edodos solicitados ou para calcular a s\u00e9rie do signal, uma exce\u00e7\u00e3o DSLError \u00e9 levantada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prices</strong> (list of float):\nLista de pre\u00e7os.</li>\n<li><strong>fast</strong> (int, optional):\nPer\u00edodo da EMA r\u00e1pida. Valor padr\u00e3o \u00e9 12.</li>\n<li><strong>slow</strong> (int, optional):\nPer\u00edodo da EMA lenta. Valor padr\u00e3o \u00e9 26.</li>\n<li><strong>signal</strong> (int, optional):\nPer\u00edodo para o c\u00e1lculo da EMA do MACD (signal). Valor padr\u00e3o \u00e9 9.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict of {str</strong> (float}):\nDicion\u00e1rio contendo as chaves:\n    - \"macd\": \u00faltimo valor da s\u00e9rie MACD.\n    - \"signal\": \u00faltimo valor da s\u00e9rie do signal.\n    - \"histogram\": diferen\u00e7a entre \"macd\" e \"signal\".</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se o n\u00famero de pre\u00e7os for insuficiente para os per\u00edodos solicitados ou para calcular a s\u00e9rie do signal.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prices</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">compute_macd</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">,</span> <span class=\"n\">fast</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">slow</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">signal</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">&quot;macd&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">1.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">&quot;signal&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">1.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">&quot;histogram&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">fast</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">slow</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">26</span>,</span><span class=\"param\">\t<span class=\"n\">signal</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.utils.compute_rsi", "modulename": "imperiumengine.dsl.utils", "qualname": "compute_rsi", "kind": "function", "doc": "<p>Calcula o \u00cdndice de For\u00e7a Relativa (RSI) para uma lista de pre\u00e7os.</p>\n\n<p>O RSI \u00e9 calculado com base nas varia\u00e7\u00f5es de pre\u00e7os entre per\u00edodos consecutivos, comparando\nos ganhos m\u00e9dios e as perdas m\u00e9dias. Em uma tend\u00eancia de alta cont\u00ednua, o RSI tende a 100,\nenquanto em uma tend\u00eancia de baixa, tende a 0. Se a quantidade de pre\u00e7os for insuficiente\n(menos de period + 1 valores), uma exce\u00e7\u00e3o DSLError \u00e9 levantada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prices</strong> (list of float):\nLista de pre\u00e7os.</li>\n<li><strong>period</strong> (int, optional):\nPer\u00edodo utilizado para o c\u00e1lculo do RSI. Valor padr\u00e3o \u00e9 14.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Valor do RSI calculado, variando de 0 a 100.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DSLError</strong>: Se o n\u00famero de pre\u00e7os for insuficiente para o per\u00edodo solicitado.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prices</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">compute_rsi</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">)</span>\n<span class=\"go\">100</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prices</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">14</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.validators", "modulename": "imperiumengine.dsl.validators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.validators.StrategyValidator", "modulename": "imperiumengine.dsl.validators", "qualname": "StrategyValidator", "kind": "class", "doc": "<p>Valida as instru\u00e7\u00f5es de estrat\u00e9gia definidas na DSL.</p>\n\n<p>Esta classe processa uma lista de instru\u00e7\u00f5es (cada instru\u00e7\u00e3o \u00e9 um dicion\u00e1rio)\nque definem uma estrat\u00e9gia de trading em uma linguagem espec\u00edfica (DSL). Ela realiza\nvalida\u00e7\u00f5es tanto estruturais quanto sint\u00e1ticas, tais como:</p>\n\n<ul>\n<li>Verificar se cada instru\u00e7\u00e3o \u00e9 um dicion\u00e1rio com uma \u00fanica chave representando o tipo da\ninstru\u00e7\u00e3o.</li>\n<li>Validar instru\u00e7\u00f5es condicionais (\"if\") conferindo se a condi\u00e7\u00e3o \u00e9 uma string e se pode ser\ninterpretada como uma express\u00e3o Python v\u00e1lida.</li>\n<li>Processar recursivamente blocos aninhados para assegurar que cada \"if\" seja corretamente\nfechado por um \"end\".</li>\n<li>Verificar que as instru\u00e7\u00f5es \"operation\" cont\u00eam c\u00f3digo Python v\u00e1lido.</li>\n<li>Confirmar que as instru\u00e7\u00f5es \"indicator\" incluem as chaves obrigat\u00f3rias e que o indicador\ninformado \u00e9 suportado.</li>\n<li>Validar que as instru\u00e7\u00f5es \"trade\" possuam os detalhes necess\u00e1rios, garantindo que a a\u00e7\u00e3o\nseja \"buy\" ou \"sell\".</li>\n<li>Validar que as instru\u00e7\u00f5es \"wait\" tenham o tempo de espera definido de forma num\u00e9rica ou\ncomo string formatada com unidade de tempo (segundos 's', minutos 'm' ou horas 'h').</li>\n</ul>\n\n<p>Todas as mensagens de erro s\u00e3o registradas via logger e acumuladas em uma lista de erros em n\u00edvel de classe.\nDessa forma, mesmo que os m\u00e9todos sejam chamados de forma est\u00e1tica (como ocorre no DSLParser), os erros ser\u00e3o\ncorretamente acumulados.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>SUPPORTED_INDICATORS</strong> (set):\nConjunto de indicadores suportados. Atualmente, s\u00e3o suportados:\n{\"SMA\", \"EMA\", \"ATR\", \"BollingerBands\", \"MACD\", \"RSI\"}.</li>\n<li><strong>errors</strong> (list of str (atributo de classe)):\nLista acumulada de mensagens de erro.</li>\n<li><strong>logger</strong> (logging.Logger):\nInst\u00e2ncia do logger utilizada para registrar informa\u00e7\u00f5es, avisos e erros.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>validate() -> tuple[bool, list[str]]\n    Inicia o processo de valida\u00e7\u00e3o das instru\u00e7\u00f5es da estrat\u00e9gia.\n_validate_block(instructions: list[dict], start: int, *, stop_at_end: bool = False) -> int\n    Processa recursivamente um bloco de instru\u00e7\u00f5es, tratando o emparelhamento de \"if\" e \"end\".\nvalidate_if(instr: dict, index: int) -> None\n    Valida a instru\u00e7\u00e3o \"if\" verificando se a condi\u00e7\u00e3o \u00e9 uma string e uma express\u00e3o Python v\u00e1lida.\nvalidate_operation(instr: dict, index: int) -> None\n    Valida a instru\u00e7\u00e3o \"operation\", assegurando que o c\u00f3digo seja uma string e v\u00e1lido.\nvalidate_indicator(instr: dict, index: int) -> None\n    Valida a instru\u00e7\u00e3o \"indicator\", verificando a exist\u00eancia das chaves necess\u00e1rias e se o\n    indicador \u00e9 suportado.\nvalidate_trade(instr: dict, index: int) -> None\n    Valida a instru\u00e7\u00e3o \"trade\", garantindo que os dados de trade estejam completos e corretos.\nvalidate_wait(instr: dict, index: int) -> None\n    Valida a instru\u00e7\u00e3o \"wait\", verificando se o tempo de espera est\u00e1 no formato correto.\nappend_error(message: str) -> None\n    Registra uma mensagem de erro via logger e a adiciona \u00e0 lista de erros.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Um exemplo de estrat\u00e9gia v\u00e1lida com bloco condicional e trade:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">instructions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"gp\">... </span>    <span class=\"p\">{</span><span class=\"s2\">&quot;if&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;price &gt; 100&quot;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"p\">{</span><span class=\"s2\">&quot;operation&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;execute_trade()&quot;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"p\">{</span><span class=\"s2\">&quot;end&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"p\">{</span><span class=\"s2\">&quot;trade&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;action&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;buy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;symbol&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;AAPL&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;quantity&quot;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}},</span>\n<span class=\"gp\">... </span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"n\">StrategyValidator</span><span class=\"p\">(</span><span class=\"n\">instructions</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_valid</span><span class=\"p\">,</span> <span class=\"n\">errs</span> <span class=\"o\">=</span> <span class=\"n\">validator</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_valid</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">errs</span>\n<span class=\"go\">[]</span>\n</code></pre>\n</div>\n\n<p>Um exemplo de estrat\u00e9gia inv\u00e1lida, com condi\u00e7\u00e3o do \"if\" n\u00e3o sendo uma string:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">instructions</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">&quot;if&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"n\">StrategyValidator</span><span class=\"p\">(</span><span class=\"n\">instructions</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_valid</span><span class=\"p\">,</span> <span class=\"n\">errs</span> <span class=\"o\">=</span> <span class=\"n\">validator</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_valid</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"s2\">&quot;condition must be a string&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">err</span> <span class=\"k\">for</span> <span class=\"n\">err</span> <span class=\"ow\">in</span> <span class=\"n\">errs</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n"}, {"fullname": "imperiumengine.dsl.validators.StrategyValidator.__init__", "modulename": "imperiumengine.dsl.validators", "qualname": "StrategyValidator.__init__", "kind": "function", "doc": "<p>Inicializa o StrategyValidator com uma lista de instru\u00e7\u00f5es da estrat\u00e9gia.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instructions_list</strong> (list of dict):\nLista onde cada elemento \u00e9 um dicion\u00e1rio representando uma instru\u00e7\u00e3o da DSL.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instructions_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "imperiumengine.dsl.validators.StrategyValidator.SUPPORTED_INDICATORS", "modulename": "imperiumengine.dsl.validators", "qualname": "StrategyValidator.SUPPORTED_INDICATORS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;ATR&#x27;, &#x27;MACD&#x27;, &#x27;EMA&#x27;, &#x27;SMA&#x27;, &#x27;RSI&#x27;, &#x27;BollingerBands&#x27;}"}, {"fullname": "imperiumengine.dsl.validators.StrategyValidator.errors", "modulename": "imperiumengine.dsl.validators", "qualname": "StrategyValidator.errors", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]", "default_value": "[]"}, {"fullname": "imperiumengine.dsl.validators.StrategyValidator.logger", "modulename": "imperiumengine.dsl.validators", "qualname": "StrategyValidator.logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger StrategyValidator (DEBUG)&gt;"}, {"fullname": "imperiumengine.dsl.validators.StrategyValidator.instructions", "modulename": "imperiumengine.dsl.validators", "qualname": "StrategyValidator.instructions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.dsl.validators.StrategyValidator.validate", "modulename": "imperiumengine.dsl.validators", "qualname": "StrategyValidator.validate", "kind": "function", "doc": "<p>Valida as instru\u00e7\u00f5es da estrat\u00e9gia.</p>\n\n<p>Percorre a lista de instru\u00e7\u00f5es, processando cada uma conforme seu tipo e utilizando\nprocessamento recursivo para blocos condicionais.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple of (bool, list of str)</strong>: Uma tupla em que o primeiro elemento \u00e9 True se a estrat\u00e9gia for v\u00e1lida (ou seja, se\nnenhuma inconsist\u00eancia for encontrada) e o segundo elemento \u00e9 a lista de mensagens de erro\nacumuladas.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">instructions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"gp\">... </span>    <span class=\"p\">{</span><span class=\"s2\">&quot;if&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;x &gt; 0&quot;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"p\">{</span><span class=\"s2\">&quot;operation&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;x += 1&quot;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"p\">{</span><span class=\"s2\">&quot;end&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"n\">StrategyValidator</span><span class=\"p\">(</span><span class=\"n\">instructions</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">valid</span><span class=\"p\">,</span> <span class=\"n\">errs</span> <span class=\"o\">=</span> <span class=\"n\">validator</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">valid</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.validators.StrategyValidator.validate_if", "modulename": "imperiumengine.dsl.validators", "qualname": "StrategyValidator.validate_if", "kind": "function", "doc": "<p>Valida a instru\u00e7\u00e3o \"if\".</p>\n\n<p>Verifica se a condi\u00e7\u00e3o associada \u00e0 chave \"if\" \u00e9 uma string e se pode ser interpretada\ncomo uma express\u00e3o Python v\u00e1lida.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instr</strong> (dict):\nDicion\u00e1rio que cont\u00e9m a instru\u00e7\u00e3o \"if\".</li>\n<li><strong>index</strong> (int):\nPosi\u00e7\u00e3o da instru\u00e7\u00e3o na lista.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instr</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.validators.StrategyValidator.validate_operation", "modulename": "imperiumengine.dsl.validators", "qualname": "StrategyValidator.validate_operation", "kind": "function", "doc": "<p>Valida a instru\u00e7\u00e3o \"operation\".</p>\n\n<p>Verifica se a opera\u00e7\u00e3o \u00e9 uma string e se o c\u00f3digo representa um Python v\u00e1lido.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instr</strong> (dict):\nDicion\u00e1rio que cont\u00e9m a instru\u00e7\u00e3o \"operation\".</li>\n<li><strong>index</strong> (int):\nPosi\u00e7\u00e3o da instru\u00e7\u00e3o na lista.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instr</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.validators.StrategyValidator.validate_indicator", "modulename": "imperiumengine.dsl.validators", "qualname": "StrategyValidator.validate_indicator", "kind": "function", "doc": "<p>Valida a instru\u00e7\u00e3o \"indicator\".</p>\n\n<p>Verifica a exist\u00eancia da chave \"name\" e, dependendo do indicador, a exist\u00eancia de chaves\nobrigat\u00f3rias.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instr</strong> (dict):\nDicion\u00e1rio que cont\u00e9m a instru\u00e7\u00e3o \"indicator\".</li>\n<li><strong>index</strong> (int):\nPosi\u00e7\u00e3o da instru\u00e7\u00e3o na lista.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instr</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.validators.StrategyValidator.validate_trade", "modulename": "imperiumengine.dsl.validators", "qualname": "StrategyValidator.validate_trade", "kind": "function", "doc": "<p>Valida a instru\u00e7\u00e3o \"trade\".</p>\n\n<p>Verifica se os dados de trade cont\u00eam as chaves obrigat\u00f3rias (\"action\", \"symbol\", \"quantity\")\ne se a a\u00e7\u00e3o informada \u00e9 v\u00e1lida (\"buy\" ou \"sell\").</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instr</strong> (dict):\nDicion\u00e1rio que cont\u00e9m a instru\u00e7\u00e3o \"trade\".</li>\n<li><strong>index</strong> (int):\nPosi\u00e7\u00e3o da instru\u00e7\u00e3o na lista.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instr</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.validators.StrategyValidator.validate_wait", "modulename": "imperiumengine.dsl.validators", "qualname": "StrategyValidator.validate_wait", "kind": "function", "doc": "<p>Valida a instru\u00e7\u00e3o \"wait\".</p>\n\n<p>Verifica se o tempo de espera \u00e9 num\u00e9rico ou uma string com um sufixo de tempo v\u00e1lido\n(s, m ou h).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instr</strong> (dict):\nDicion\u00e1rio que cont\u00e9m a instru\u00e7\u00e3o \"wait\".</li>\n<li><strong>index</strong> (int):\nPosi\u00e7\u00e3o da instru\u00e7\u00e3o na lista.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instr</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.dsl.validators.StrategyValidator.append_error", "modulename": "imperiumengine.dsl.validators", "qualname": "StrategyValidator.append_error", "kind": "function", "doc": "<p>Registra uma mensagem de erro.</p>\n\n<p>A mensagem \u00e9 registrada via logger e adicionada \u00e0 lista de erros acumulada.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong> (str):\nMensagem de erro a ser registrada.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.indicators", "modulename": "imperiumengine.indicators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.indicators.atr", "modulename": "imperiumengine.indicators.atr", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.indicators.atr.ATR", "modulename": "imperiumengine.indicators.atr", "qualname": "ATR", "kind": "class", "doc": "<p>Average True Range (ATR).</p>\n\n<p>O ATR \u00e9 um indicador t\u00e9cnico que mede a volatilidade de um ativo ao calcular\na m\u00e9dia m\u00f3vel exponencial da amplitude real dos pre\u00e7os.</p>\n\n<h2 id=\"parametros\">Par\u00e2metros</h2>\n\n<p>data : pandas.DataFrame\n    DataFrame contendo as colunas 'high', 'low' e 'close'.\nperiod : int, opcional, padr\u00e3o=14\n    Per\u00edodo utilizado para calcular a m\u00e9dia m\u00f3vel exponencial.</p>\n\n<h2 id=\"metodos\">M\u00e9todos</h2>\n\n<p>calculate() -> pandas.DataFrame\n    Calcula o ATR com base nos dados de alta, baixa e fechamento.</p>\n", "bases": "imperiumengine.indicators.base_indicator.FinancialIndicator"}, {"fullname": "imperiumengine.indicators.atr.ATR.__init__", "modulename": "imperiumengine.indicators.atr", "qualname": "ATR.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">14</span></span>)</span>"}, {"fullname": "imperiumengine.indicators.atr.ATR.period", "modulename": "imperiumengine.indicators.atr", "qualname": "ATR.period", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "imperiumengine.indicators.atr.ATR.calculate", "modulename": "imperiumengine.indicators.atr", "qualname": "ATR.calculate", "kind": "function", "doc": "<p>Calcula o ATR (Average True Range).</p>\n\n<h6 id=\"retorna\">Retorna</h6>\n\n<p>pandas.DataFrame\n    DataFrame atualizado com uma nova coluna 'ATR', contendo os valores calculados.</p>\n\n<h6 id=\"exemplos\">Exemplos</h6>\n\n<p>Neste exemplo, utilizamos um DataFrame simples e definimos <code>period=2</code>\npara facilitar o acompanhamento dos c\u00e1lculos do ATR.</p>\n\n<p>Considere o seguinte DataFrame de exemplo:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">pandas</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">pd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">imperiumengine.indicators.atr</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">ATR</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"p\">{</span><span class=\"s2\">&quot;high&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">],</span> <span class=\"s2\">&quot;low&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"s2\">&quot;close&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">]}</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Usamos period=2, onde o fator de suaviza\u00e7\u00e3o alpha = 2/(2+1) = 2/3.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># C\u00e1lculo do True Range (TR):</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Linha 0: TR = high - low = 10 - 5 = 5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Linha 1: TR = max(12-6, |12-7|, |6-7|) = max(6, 5, 1) = 6</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Linha 2: TR = max(11-7, |11-10|, |7-10|) = max(4, 1, 3) = 4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Linha 3: TR = max(13-8, |13-9|, |8-9|) = max(5, 4, 1) = 5</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># C\u00e1lculo do ATR usando EWMA:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Linha 0: ATR_0 = 5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Linha 1: ATR_1 = 6*(2/3) + 5*(1/3) = 5.666666666666667</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Linha 2: ATR_2 = 4*(2/3) + ATR_1*(1/3) = 4.555555555555556</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Linha 3: ATR_3 = 5*(2/3) + ATR_2*(1/3) = 4.8518518518518515</span>\n<span class=\"gp\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atr_indicator</span> <span class=\"o\">=</span> <span class=\"n\">ATR</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">period</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">atr_indicator</span><span class=\"o\">.</span><span class=\"n\">calculate</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">&quot;ATR&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span>\n<span class=\"go\">[5.0, 5.666666666666667, 4.55555555555555..., 4.85185185185185...]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.indicators.base_indicator", "modulename": "imperiumengine.indicators.base_indicator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.indicators.base_indicator.FinancialIndicator", "modulename": "imperiumengine.indicators.base_indicator", "qualname": "FinancialIndicator", "kind": "class", "doc": "<p>Classe base para c\u00e1lculo de indicadores financeiros.</p>\n"}, {"fullname": "imperiumengine.indicators.base_indicator.FinancialIndicator.__init__", "modulename": "imperiumengine.indicators.base_indicator", "qualname": "FinancialIndicator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">price_column</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;close&#39;</span></span>)</span>"}, {"fullname": "imperiumengine.indicators.base_indicator.FinancialIndicator.data", "modulename": "imperiumengine.indicators.base_indicator", "qualname": "FinancialIndicator.data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame"}, {"fullname": "imperiumengine.indicators.base_indicator.FinancialIndicator.price_column", "modulename": "imperiumengine.indicators.base_indicator", "qualname": "FinancialIndicator.price_column", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "imperiumengine.indicators.base_indicator.FinancialIndicator.logger", "modulename": "imperiumengine.indicators.base_indicator", "qualname": "FinancialIndicator.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger | None"}, {"fullname": "imperiumengine.indicators.base_indicator.FinancialIndicator.setup_logger", "modulename": "imperiumengine.indicators.base_indicator", "qualname": "FinancialIndicator.setup_logger", "kind": "function", "doc": "<p>Configura um logger para cada indicador.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.indicators.base_indicator.FinancialIndicator.log", "modulename": "imperiumengine.indicators.base_indicator", "qualname": "FinancialIndicator.log", "kind": "function", "doc": "<p>M\u00e9todo para registrar mensagens no log.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.indicators.base_indicator.FinancialIndicator.calculate", "modulename": "imperiumengine.indicators.base_indicator", "qualname": "FinancialIndicator.calculate", "kind": "function", "doc": "<p>M\u00e9todo a ser implementado pelas classes filhas para calcular o indicador.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: Sempre, pois deve ser implementado na classe derivada.</li>\n</ul>\n\n<h6 id=\"exemplos\">Exemplos</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">pandas</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">pd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">imperiumengine.indicators.base_indicator</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">FinancialIndicator</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s2\">&quot;close&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">indicador</span> <span class=\"o\">=</span> <span class=\"n\">FinancialIndicator</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">indicador</span><span class=\"o\">.</span><span class=\"n\">calculate</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +ELLIPSIS</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">NotImplementedError</span>: <span class=\"n\">M\u00e9todo calculate() deve ser implementado na classe derivada</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.indicators.bollinger_bands", "modulename": "imperiumengine.indicators.bollinger_bands", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.indicators.bollinger_bands.BollingerBands", "modulename": "imperiumengine.indicators.bollinger_bands", "qualname": "BollingerBands", "kind": "class", "doc": "<p>Indicador das Bandas de Bollinger.</p>\n\n<p>Calcula a M\u00e9dia M\u00f3vel Simples (SMA) e utiliza-a, juntamente com o desvio padr\u00e3o, para\ncalcular as bandas superior e inferior de Bollinger. Os c\u00e1lculos s\u00e3o realizados utilizando\numa janela m\u00f3vel.</p>\n\n<p>As f\u00f3rmulas utilizadas s\u00e3o:</p>\n\n<ul>\n<li><strong>SMA</strong>: m\u00e9dia m\u00f3vel dos pre\u00e7os sobre o per\u00edodo especificado.</li>\n<li><strong>Desvio Padr\u00e3o (std)</strong>: desvio padr\u00e3o dos pre\u00e7os sobre o mesmo per\u00edodo.</li>\n<li><strong>Banda Superior</strong>: SMA + (std_dev * std)</li>\n<li><strong>Banda Inferior</strong>: SMA - (std_dev * std)</li>\n</ul>\n\n<h2 id=\"parametros\">Par\u00e2metros</h2>\n\n<p>data : pd.DataFrame\n    DataFrame contendo os dados financeiros. Deve incluir uma coluna especificada por <code>price_column</code>.\nperiod : int, opcional\n    N\u00famero de per\u00edodos a serem usados para o c\u00e1lculo da SMA e do desvio padr\u00e3o. Padr\u00e3o \u00e9 20.\nstd_dev : int ou float, opcional\n    Multiplicador para o desvio padr\u00e3o utilizado no c\u00e1lculo das bandas. Padr\u00e3o \u00e9 2.\nprice_column : str, opcional\n    Nome da coluna que cont\u00e9m os dados de pre\u00e7o. Padr\u00e3o \u00e9 'Close'.</p>\n\n<h6 id=\"atributos\">Atributos</h6>\n\n<p>period : int\n    Per\u00edodo utilizado para os c\u00e1lculos m\u00f3veis.\nstd_dev : int ou float\n    Multiplicador do desvio padr\u00e3o.</p>\n\n<h2 id=\"metodos\">M\u00e9todos</h2>\n\n<p>calculate() -> pd.DataFrame\n    Calcula a SMA, a Banda Superior e a Banda Inferior e retorna o DataFrame com as bandas adicionadas.</p>\n\n<h6 id=\"exemplos\">Exemplos</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">pandas</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">pd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">numpy</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dates</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-01-01&quot;</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s2\">&quot;D&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">lognormal</span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">cumprod</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">100</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s2\">&quot;Close&quot;</span><span class=\"p\">:</span> <span class=\"n\">prices</span><span class=\"p\">},</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">dates</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"n\">BollingerBands</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">period</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">std_dev</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">price_column</span><span class=\"o\">=</span><span class=\"s2\">&quot;Close&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">calculate</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "bases": "imperiumengine.indicators.base_indicator.FinancialIndicator"}, {"fullname": "imperiumengine.indicators.bollinger_bands.BollingerBands.__init__", "modulename": "imperiumengine.indicators.bollinger_bands", "qualname": "BollingerBands.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">std_dev</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">price_column</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Close&#39;</span></span>)</span>"}, {"fullname": "imperiumengine.indicators.bollinger_bands.BollingerBands.period", "modulename": "imperiumengine.indicators.bollinger_bands", "qualname": "BollingerBands.period", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "imperiumengine.indicators.bollinger_bands.BollingerBands.std_dev", "modulename": "imperiumengine.indicators.bollinger_bands", "qualname": "BollingerBands.std_dev", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int | float"}, {"fullname": "imperiumengine.indicators.bollinger_bands.BollingerBands.calculate", "modulename": "imperiumengine.indicators.bollinger_bands", "qualname": "BollingerBands.calculate", "kind": "function", "doc": "<p>Calcula as Bandas de Bollinger.</p>\n\n<p>Realiza o c\u00e1lculo da m\u00e9dia m\u00f3vel simples (SMA) e do desvio padr\u00e3o para o per\u00edodo especificado,\ne a partir destes valores, calcula as bandas superior e inferior.</p>\n\n<h6 id=\"retorna\">Retorna</h6>\n\n<p>pd.DataFrame\n    DataFrame com duas novas colunas:</p>\n\n<pre><code>- 'Upper_Band': A banda superior de Bollinger.\n- 'Lower_Band': A banda inferior de Bollinger.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.indicators.ema", "modulename": "imperiumengine.indicators.ema", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.indicators.ema.EMA", "modulename": "imperiumengine.indicators.ema", "qualname": "EMA", "kind": "class", "doc": "<p>M\u00e9dia M\u00f3vel Exponencial (EMA).</p>\n\n<p>Calcula a M\u00e9dia M\u00f3vel Exponencial (EMA) dos pre\u00e7os utilizando o per\u00edodo especificado.</p>\n\n<h2 id=\"parametros\">Par\u00e2metros</h2>\n\n<p>data : pd.DataFrame\n    DataFrame contendo os dados financeiros. Deve incluir a coluna definida por <code>price_column</code>.\nperiod : int, opcional\n    N\u00famero de per\u00edodos para calcular a EMA. Padr\u00e3o \u00e9 14.\nprice_column : str, opcional\n    Nome da coluna que cont\u00e9m os dados de pre\u00e7o. Padr\u00e3o \u00e9 'Close'.</p>\n\n<h6 id=\"atributos\">Atributos</h6>\n\n<p>period : int\n    Per\u00edodo utilizado para o c\u00e1lculo da EMA.</p>\n\n<h2 id=\"metodos\">M\u00e9todos</h2>\n\n<p>calculate()\n    Calcula a EMA e adiciona uma nova coluna ao DataFrame com os resultados.</p>\n\n<h6 id=\"exemplos\">Exemplos</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">pandas</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">pd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">numpy</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dates</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-01-01&quot;</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s2\">&quot;D&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">lognormal</span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">cumprod</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">100</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s2\">&quot;Close&quot;</span><span class=\"p\">:</span> <span class=\"n\">prices</span><span class=\"p\">},</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">dates</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ema</span> <span class=\"o\">=</span> <span class=\"n\">EMA</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">period</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">price_column</span><span class=\"o\">=</span><span class=\"s2\">&quot;Close&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ema</span><span class=\"o\">.</span><span class=\"n\">calculate</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "bases": "imperiumengine.indicators.base_indicator.FinancialIndicator"}, {"fullname": "imperiumengine.indicators.ema.EMA.__init__", "modulename": "imperiumengine.indicators.ema", "qualname": "EMA.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">14</span>,</span><span class=\"param\">\t<span class=\"n\">price_column</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Close&#39;</span></span>)</span>"}, {"fullname": "imperiumengine.indicators.ema.EMA.period", "modulename": "imperiumengine.indicators.ema", "qualname": "EMA.period", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "imperiumengine.indicators.ema.EMA.calculate", "modulename": "imperiumengine.indicators.ema", "qualname": "EMA.calculate", "kind": "function", "doc": "<p>Calcula a M\u00e9dia M\u00f3vel Exponencial (EMA).</p>\n\n<p>Calcula a EMA dos pre\u00e7os utilizando o per\u00edodo especificado e adiciona uma nova coluna no DataFrame.</p>\n\n<h6 id=\"retorna\">Retorna</h6>\n\n<p>pd.DataFrame\n    DataFrame com uma nova coluna contendo a EMA calculada.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.indicators.macd", "modulename": "imperiumengine.indicators.macd", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.indicators.macd.MACD", "modulename": "imperiumengine.indicators.macd", "qualname": "MACD", "kind": "class", "doc": "<p>Converg\u00eancia/Diverg\u00eancia da M\u00e9dia M\u00f3vel (MACD).</p>\n\n<p>Calcula o indicador MACD a partir dos pre\u00e7os utilizando as m\u00e9dias m\u00f3veis exponenciais (EMAs)\nde per\u00edodos curto e longo e gera uma linha de sinal a partir da EMA do MACD.</p>\n\n<h2 id=\"parametros\">Par\u00e2metros</h2>\n\n<p>data : pd.DataFrame\n    DataFrame contendo os dados financeiros. Deve incluir a coluna definida por <code>price_column</code>.\nshort_period : int, opcional\n    N\u00famero de per\u00edodos para calcular a EMA de curto prazo. Padr\u00e3o \u00e9 12.\nlong_period : int, opcional\n    N\u00famero de per\u00edodos para calcular a EMA de longo prazo. Padr\u00e3o \u00e9 26.\nsignal_period : int, opcional\n    N\u00famero de per\u00edodos para calcular a linha de sinal (EMA do MACD). Padr\u00e3o \u00e9 9.\nprice_column : str, opcional\n    Nome da coluna que cont\u00e9m os dados de pre\u00e7o. Padr\u00e3o \u00e9 'Close'.</p>\n\n<h6 id=\"atributos\">Atributos</h6>\n\n<p>short_period : int\n    N\u00famero de per\u00edodos para a EMA de curto prazo.\nlong_period : int\n    N\u00famero de per\u00edodos para a EMA de longo prazo.\nsignal_period : int\n    N\u00famero de per\u00edodos para a linha de sinal.</p>\n\n<h2 id=\"metodos\">M\u00e9todos</h2>\n\n<p>calculate() -> pd.DataFrame\n    Calcula o MACD e a linha de sinal, adicionando duas novas colunas ao DataFrame: 'MACD' e 'MACD_Signal'.</p>\n\n<h6 id=\"exemplos\">Exemplos</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">pandas</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">pd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">numpy</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dates</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-01-01&quot;</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s2\">&quot;D&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">lognormal</span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">cumprod</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">100</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s2\">&quot;Close&quot;</span><span class=\"p\">:</span> <span class=\"n\">prices</span><span class=\"p\">},</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">dates</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">macd</span> <span class=\"o\">=</span> <span class=\"n\">MACD</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">short_period</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">long_period</span><span class=\"o\">=</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"n\">signal_period</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">price_column</span><span class=\"o\">=</span><span class=\"s2\">&quot;Close&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">macd</span><span class=\"o\">.</span><span class=\"n\">calculate</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "bases": "imperiumengine.indicators.base_indicator.FinancialIndicator"}, {"fullname": "imperiumengine.indicators.macd.MACD.__init__", "modulename": "imperiumengine.indicators.macd", "qualname": "MACD.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">short_period</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">long_period</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">26</span>,</span><span class=\"param\">\t<span class=\"n\">signal_period</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>,</span><span class=\"param\">\t<span class=\"n\">price_column</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Close&#39;</span></span>)</span>"}, {"fullname": "imperiumengine.indicators.macd.MACD.short_period", "modulename": "imperiumengine.indicators.macd", "qualname": "MACD.short_period", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "imperiumengine.indicators.macd.MACD.long_period", "modulename": "imperiumengine.indicators.macd", "qualname": "MACD.long_period", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "imperiumengine.indicators.macd.MACD.signal_period", "modulename": "imperiumengine.indicators.macd", "qualname": "MACD.signal_period", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "imperiumengine.indicators.macd.MACD.calculate", "modulename": "imperiumengine.indicators.macd", "qualname": "MACD.calculate", "kind": "function", "doc": "<p>Calcula o indicador MACD e a linha de sinal.</p>\n\n<p>Calcula a EMA de curto prazo e a EMA de longo prazo para os pre\u00e7os, subtrai as duas para obter o MACD,\ne ent\u00e3o calcula a linha de sinal como a EMA do MACD.</p>\n\n<h6 id=\"retorna\">Retorna</h6>\n\n<p>pd.DataFrame\n    DataFrame com duas novas colunas:\n    - 'MACD': O valor do MACD.\n    - 'MACD_Signal': A linha de sinal derivada do MACD.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.indicators.rsi", "modulename": "imperiumengine.indicators.rsi", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.indicators.rsi.RSI", "modulename": "imperiumengine.indicators.rsi", "qualname": "RSI", "kind": "class", "doc": "<p>\u00cdndice de For\u00e7a Relativa (RSI).</p>\n\n<p>Calcula o RSI a partir dos dados de pre\u00e7os utilizando a varia\u00e7\u00e3o dos pre\u00e7os e uma m\u00e9dia m\u00f3vel\npara ganhos e perdas.</p>\n\n<h2 id=\"parametros\">Par\u00e2metros</h2>\n\n<p>data : pd.DataFrame\n    DataFrame contendo os dados financeiros. Deve incluir a coluna definida por <code>price_column</code>.\nprice_column : str, opcional\n    Nome da coluna que cont\u00e9m os dados de pre\u00e7o. Padr\u00e3o \u00e9 'close'.\nperiod : int, opcional\n    N\u00famero de per\u00edodos para o c\u00e1lculo do RSI. Padr\u00e3o \u00e9 14.</p>\n\n<h6 id=\"atributos\">Atributos</h6>\n\n<p>period : int\n    Per\u00edodo utilizado para o c\u00e1lculo do RSI.</p>\n\n<h2 id=\"metodos\">M\u00e9todos</h2>\n\n<p>calculate() -> pd.DataFrame\n    Calcula o RSI e adiciona uma nova coluna 'RSI' ao DataFrame.</p>\n\n<h6 id=\"exemplos\">Exemplos</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">pandas</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">pd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">numpy</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dates</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-01-01&quot;</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s2\">&quot;D&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">lognormal</span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">cumprod</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">100</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s2\">&quot;close&quot;</span><span class=\"p\">:</span> <span class=\"n\">prices</span><span class=\"p\">},</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">dates</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rsi_indicator</span> <span class=\"o\">=</span> <span class=\"n\">RSI</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">price_column</span><span class=\"o\">=</span><span class=\"s2\">&quot;close&quot;</span><span class=\"p\">,</span> <span class=\"n\">period</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">rsi_indicator</span><span class=\"o\">.</span><span class=\"n\">calculate</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "bases": "imperiumengine.indicators.base_indicator.FinancialIndicator"}, {"fullname": "imperiumengine.indicators.rsi.RSI.__init__", "modulename": "imperiumengine.indicators.rsi", "qualname": "RSI.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">price_column</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;close&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">14</span></span>)</span>"}, {"fullname": "imperiumengine.indicators.rsi.RSI.period", "modulename": "imperiumengine.indicators.rsi", "qualname": "RSI.period", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "imperiumengine.indicators.rsi.RSI.calculate", "modulename": "imperiumengine.indicators.rsi", "qualname": "RSI.calculate", "kind": "function", "doc": "<p>Calcula o \u00cdndice de For\u00e7a Relativa (RSI).</p>\n\n<p>Utiliza a varia\u00e7\u00e3o dos pre\u00e7os para calcular os ganhos e perdas, em seguida calcula a m\u00e9dia\nm\u00f3vel dos ganhos e perdas e, a partir destes valores, determina o RSI.</p>\n\n<h6 id=\"retorna\">Retorna</h6>\n\n<p>pd.DataFrame\n    DataFrame com uma nova coluna 'RSI' contendo os valores do RSI.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.indicators.vwap", "modulename": "imperiumengine.indicators.vwap", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.indicators.vwap.VWAP", "modulename": "imperiumengine.indicators.vwap", "qualname": "VWAP", "kind": "class", "doc": "<p>Volume Weighted Average Price (VWAP).</p>\n\n<p>O VWAP \u00e9 um indicador t\u00e9cnico que calcula o pre\u00e7o m\u00e9dio ponderado pelo volume\nde um ativo durante um determinado per\u00edodo.</p>\n\n<h2 id=\"metodos\">M\u00e9todos</h2>\n\n<p>calculate() -> pd.DataFrame\n    Calcula o VWAP com base nos dados de fechamento e volume.</p>\n\n<h6 id=\"atributos\">Atributos</h6>\n\n<p>self.data : pandas.DataFrame\n    DataFrame contendo os pre\u00e7os de fechamento e volume do ativo.</p>\n", "bases": "imperiumengine.indicators.base_indicator.FinancialIndicator"}, {"fullname": "imperiumengine.indicators.vwap.VWAP.calculate", "modulename": "imperiumengine.indicators.vwap", "qualname": "VWAP.calculate", "kind": "function", "doc": "<p>Calcula o VWAP (Volume Weighted Average Price).</p>\n\n<h6 id=\"retorna\">Retorna</h6>\n\n<p>pd.DataFrame\n    DataFrame atualizado com uma nova coluna 'VWAP', contendo os valores calculados.</p>\n\n<h6 id=\"exemplos\">Exemplos</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">pandas</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">pd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">imperiumengine.indicators.vwap</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">VWAP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Cria\u00e7\u00e3o de um DataFrame de exemplo com colunas &#39;close&#39; e &#39;volume&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s2\">&quot;close&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">],</span> <span class=\"s2\">&quot;volume&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">]})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vwap_indicator</span> <span class=\"o\">=</span> <span class=\"n\">VWAP</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">vwap_indicator</span><span class=\"o\">.</span><span class=\"n\">calculate</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">&quot;VWAP&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span>\n<span class=\"go\">[10.0, 16.666666666666668, 23.333333333333332, 30.0]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "imperiumengine.services", "modulename": "imperiumengine.services", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "imperiumengine.services.price_service", "modulename": "imperiumengine.services.price_service", "kind": "module", "doc": "<p></p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();